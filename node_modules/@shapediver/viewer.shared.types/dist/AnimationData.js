"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AnimationData_animate, _AnimationData_animationTime, _AnimationData_duration, _AnimationData_name, _AnimationData_repeat, _AnimationData_start, _AnimationData_started, _AnimationData_tracks;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnimationData = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
class AnimationData extends viewer_shared_node_tree_1.AbstractTreeNodeData {
    constructor(name, tracks, start, duration, id) {
        super(id);
        _AnimationData_animate.set(this, false);
        _AnimationData_animationTime.set(this, 0);
        _AnimationData_duration.set(this, void 0);
        _AnimationData_name.set(this, void 0);
        _AnimationData_repeat.set(this, false);
        _AnimationData_start.set(this, void 0);
        _AnimationData_started.set(this, false);
        _AnimationData_tracks.set(this, void 0);
        __classPrivateFieldSet(this, _AnimationData_name, name, "f");
        __classPrivateFieldSet(this, _AnimationData_tracks, tracks, "f");
        __classPrivateFieldSet(this, _AnimationData_start, start, "f");
        __classPrivateFieldSet(this, _AnimationData_duration, duration, "f");
    }
    get animate() {
        return __classPrivateFieldGet(this, _AnimationData_animate, "f");
    }
    get animationTime() {
        return __classPrivateFieldGet(this, _AnimationData_animationTime, "f");
    }
    set animationTime(value) {
        __classPrivateFieldSet(this, _AnimationData_animationTime, value, "f");
    }
    get duration() {
        return __classPrivateFieldGet(this, _AnimationData_duration, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _AnimationData_name, "f");
    }
    get repeat() {
        return __classPrivateFieldGet(this, _AnimationData_repeat, "f");
    }
    set repeat(value) {
        __classPrivateFieldSet(this, _AnimationData_repeat, value, "f");
    }
    get start() {
        return __classPrivateFieldGet(this, _AnimationData_start, "f");
    }
    get tracks() {
        return __classPrivateFieldGet(this, _AnimationData_tracks, "f");
    }
    clone() {
        return new AnimationData(this.name, __classPrivateFieldGet(this, _AnimationData_tracks, "f"), this.start, this.duration, this.id);
    }
    continueAnimation() {
        if (__classPrivateFieldGet(this, _AnimationData_started, "f"))
            __classPrivateFieldSet(this, _AnimationData_animate, true, "f");
    }
    pauseAnimation() {
        if (__classPrivateFieldGet(this, _AnimationData_started, "f"))
            __classPrivateFieldSet(this, _AnimationData_animate, false, "f");
    }
    startAnimation() {
        __classPrivateFieldSet(this, _AnimationData_animationTime, 0, "f");
        __classPrivateFieldSet(this, _AnimationData_animate, true, "f");
        __classPrivateFieldSet(this, _AnimationData_started, true, "f");
        for (let i = 0; i < __classPrivateFieldGet(this, _AnimationData_tracks, "f").length; i++) {
            const track = __classPrivateFieldGet(this, _AnimationData_tracks, "f")[i];
            const idleTransformation = track.node.transformations.filter(t => t.id === 'gltf_matrix');
            track.previousMatrix = idleTransformation[0];
            track.node.transformations = track.node.transformations.filter((el) => {
                return !idleTransformation.includes(el);
            });
        }
    }
    stopAnimation() {
        for (let i = 0; i < __classPrivateFieldGet(this, _AnimationData_tracks, "f").length; i++) {
            const track = __classPrivateFieldGet(this, _AnimationData_tracks, "f")[i];
            const id = this.id + '_' + i;
            const prevAnimation = track.node.transformations.filter(t => t.id === id);
            track.node.transformations = track.node.transformations.filter((el) => {
                return !prevAnimation.includes(el);
            });
            if (track.previousMatrix)
                track.node.transformations.push(track.previousMatrix);
        }
        __classPrivateFieldSet(this, _AnimationData_animationTime, -1, "f");
        __classPrivateFieldSet(this, _AnimationData_started, false, "f");
        __classPrivateFieldSet(this, _AnimationData_animate, false, "f");
    }
}
exports.AnimationData = AnimationData;
_AnimationData_animate = new WeakMap(), _AnimationData_animationTime = new WeakMap(), _AnimationData_duration = new WeakMap(), _AnimationData_name = new WeakMap(), _AnimationData_repeat = new WeakMap(), _AnimationData_start = new WeakMap(), _AnimationData_started = new WeakMap(), _AnimationData_tracks = new WeakMap();
//# sourceMappingURL=AnimationData.js.map