"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SDTFAttributeData_typeHint, _SDTFAttributeData_value, _SDTFAttributesData_attributes;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDTFAttributesData = exports.SDTFAttributeData = exports.GEOMETRYTYPEHINT = exports.PRIMITIVETYPEHINT = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
var PRIMITIVETYPEHINT;
(function (PRIMITIVETYPEHINT) {
    PRIMITIVETYPEHINT["DOUBLE"] = "double";
    PRIMITIVETYPEHINT["COLOR"] = "color";
    PRIMITIVETYPEHINT["STRING"] = "string";
    PRIMITIVETYPEHINT["BOOL"] = "bool";
    PRIMITIVETYPEHINT["FLOAT"] = "float";
    PRIMITIVETYPEHINT["DECIMAL"] = "decimal";
    PRIMITIVETYPEHINT["CULTUREINFO"] = "cultureinfo";
    PRIMITIVETYPEHINT["INT"] = "int";
})(PRIMITIVETYPEHINT = exports.PRIMITIVETYPEHINT || (exports.PRIMITIVETYPEHINT = {}));
var GEOMETRYTYPEHINT;
(function (GEOMETRYTYPEHINT) {
    GEOMETRYTYPEHINT["COMPLEX"] = "geometry.complex";
    GEOMETRYTYPEHINT["INTERVAL2"] = "geometry.interval2";
    GEOMETRYTYPEHINT["PATH"] = "grasshopper.path";
    GEOMETRYTYPEHINT["ARC"] = "geometry.arc";
    GEOMETRYTYPEHINT["BOUNDINGBOX"] = "geometry.boundingbox";
    GEOMETRYTYPEHINT["BOX"] = "geometry.box";
    GEOMETRYTYPEHINT["CIRCLE"] = "geometry.circle";
    GEOMETRYTYPEHINT["CONE"] = "geometry.cone";
    GEOMETRYTYPEHINT["CYLINDER"] = "geometry.cylinder";
    GEOMETRYTYPEHINT["ELLIPSE"] = "geometry.ellipse";
    GEOMETRYTYPEHINT["INTERVAL"] = "geometry.interval";
    GEOMETRYTYPEHINT["LINE"] = "geometry.line";
    GEOMETRYTYPEHINT["MATRIX"] = "geometry.matrix";
    GEOMETRYTYPEHINT["PLANE"] = "geometry.plane";
    GEOMETRYTYPEHINT["POINT2D"] = "geometry.point2d";
    GEOMETRYTYPEHINT["POINT2F"] = "geometry.point2f";
    GEOMETRYTYPEHINT["POINT3D"] = "geometry.point3d";
    GEOMETRYTYPEHINT["POINT3F"] = "geometry.point3f";
    GEOMETRYTYPEHINT["POINT4D"] = "geometry.point4d";
    GEOMETRYTYPEHINT["POLYLINE"] = "geometry.polyline";
    GEOMETRYTYPEHINT["RAY"] = "geometry.ray";
    GEOMETRYTYPEHINT["RECTANGLE"] = "geometry.rectangle";
    GEOMETRYTYPEHINT["SPHERE"] = "geometry.sphere";
    GEOMETRYTYPEHINT["TORUS"] = "geometry.torus";
    GEOMETRYTYPEHINT["TRANSFORM"] = "geometry.transform";
    GEOMETRYTYPEHINT["VECTOR2D"] = "geometry.vector2d";
    GEOMETRYTYPEHINT["VECTOR2F"] = "geometry.vector2f";
    GEOMETRYTYPEHINT["VECTOR3D"] = "geometry.vector3d";
    GEOMETRYTYPEHINT["VECTOR3F"] = "geometry.vector3f";
})(GEOMETRYTYPEHINT = exports.GEOMETRYTYPEHINT || (exports.GEOMETRYTYPEHINT = {}));
class SDTFAttributeData {
    constructor(typeHint, value) {
        _SDTFAttributeData_typeHint.set(this, void 0);
        _SDTFAttributeData_value.set(this, void 0);
        __classPrivateFieldSet(this, _SDTFAttributeData_typeHint, typeHint, "f");
        __classPrivateFieldSet(this, _SDTFAttributeData_value, value, "f");
    }
    get typeHint() {
        return __classPrivateFieldGet(this, _SDTFAttributeData_typeHint, "f");
    }
    get value() {
        return __classPrivateFieldGet(this, _SDTFAttributeData_value, "f");
    }
}
exports.SDTFAttributeData = SDTFAttributeData;
_SDTFAttributeData_typeHint = new WeakMap(), _SDTFAttributeData_value = new WeakMap();
class SDTFAttributesData extends viewer_shared_node_tree_1.AbstractTreeNodeData {
    constructor(attributes = {}, id) {
        super(id);
        _SDTFAttributesData_attributes.set(this, {});
        __classPrivateFieldSet(this, _SDTFAttributesData_attributes, attributes, "f");
    }
    get attributes() {
        return __classPrivateFieldGet(this, _SDTFAttributesData_attributes, "f");
    }
    clone() {
        return new SDTFAttributesData(this.attributes, this.id);
    }
}
exports.SDTFAttributesData = SDTFAttributesData;
_SDTFAttributesData_attributes = new WeakMap();
//# sourceMappingURL=SDTFAttributesData.js.map