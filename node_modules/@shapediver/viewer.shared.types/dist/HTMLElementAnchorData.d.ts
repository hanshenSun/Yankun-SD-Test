import { Box } from '@shapediver/viewer.shared.math';
import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
import { vec3 } from 'gl-matrix';
interface AnchorDataImage {
    alt: string;
    height: number;
    hidden?: boolean;
    position?: {
        horizontal?: string;
        vertical?: string;
    };
    src: string;
    width: number;
}
interface AnchorDataText {
    color: string | number | vec3;
    hidden?: boolean;
    position?: {
        horizontal?: string;
        vertical?: string;
    };
    text: string;
    textAlign?: string;
}
export declare class HTMLElementAnchorData extends AbstractTreeNodeData {
    #private;
    constructor(location: vec3, data: AnchorDataImage | AnchorDataText, format: 'text' | 'image', hideable?: boolean, viewers?: string[], intersectionTarget?: Box | string | string[], id?: string);
    get data(): AnchorDataImage | AnchorDataText;
    set data(value: AnchorDataImage | AnchorDataText);
    get format(): 'text' | 'image';
    set format(value: 'text' | 'image');
    get hideable(): boolean;
    set hideable(value: boolean);
    get intersectionTarget(): Box | string | string[] | undefined;
    set intersectionTarget(value: Box | string | string[] | undefined);
    get location(): vec3;
    set location(value: vec3);
    get viewers(): string[];
    set viewers(value: string[]);
    clone(): ITreeNodeData;
    createViewerHtmlElement(viewer: string): HTMLDivElement | null;
    getViewerHtmlElement(viewer: string): HTMLDivElement | null;
    update(): void;
    private createImageElement;
    private createTextElement;
}
export {};
//# sourceMappingURL=HTMLElementAnchorData.d.ts.map