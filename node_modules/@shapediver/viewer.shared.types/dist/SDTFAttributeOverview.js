"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SDTFAttributeOverview_overview;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDTFAttributeOverview = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const SDTFAttributesData_1 = require("./SDTFAttributesData");
class SDTFAttributeOverview extends viewer_shared_node_tree_1.AbstractTreeNodeData {
    constructor(overview, id) {
        super(id);
        _SDTFAttributeOverview_overview.set(this, {});
        __classPrivateFieldSet(this, _SDTFAttributeOverview_overview, overview, "f");
    }
    get overview() {
        return __classPrivateFieldGet(this, _SDTFAttributeOverview_overview, "f");
    }
    clone() {
        return new SDTFAttributeOverview(__classPrivateFieldGet(this, _SDTFAttributeOverview_overview, "f"), this.id);
    }
    merge(data) {
        var _a;
        for (let overviewKey in data.overview) {
            for (let i = 0; i < data.overview[overviewKey].length; i++) {
                const dataToCopy = data.overview[overviewKey][i];
                const existingEntries = this.overview[overviewKey] ? this.overview[overviewKey].filter(o => o.typeHint === dataToCopy.typeHint) : [];
                if (this.overview[overviewKey] && existingEntries.length > 0) {
                    const entry = existingEntries[0];
                    entry.count++;
                    if (dataToCopy.typeHint === SDTFAttributesData_1.PRIMITIVETYPEHINT.STRING) {
                        entry.values = (_a = entry.values) === null || _a === void 0 ? void 0 : _a.concat(dataToCopy.values.filter((item) => entry.values.indexOf(item) < 0));
                    }
                    if (dataToCopy.typeHint === SDTFAttributesData_1.PRIMITIVETYPEHINT.DOUBLE ||
                        dataToCopy.typeHint === SDTFAttributesData_1.PRIMITIVETYPEHINT.FLOAT ||
                        dataToCopy.typeHint === SDTFAttributesData_1.PRIMITIVETYPEHINT.DECIMAL ||
                        dataToCopy.typeHint === SDTFAttributesData_1.PRIMITIVETYPEHINT.INT) {
                        entry.min = Math.min(dataToCopy.min, entry.min);
                        entry.max = Math.max(dataToCopy.max, entry.max);
                    }
                }
                else if (this.overview[overviewKey]) {
                    this.overview[overviewKey].push({
                        typeHint: dataToCopy.typeHint,
                        count: dataToCopy.count,
                        values: dataToCopy.values,
                        min: dataToCopy.min,
                        max: dataToCopy.max,
                    });
                }
                else {
                    this.overview[overviewKey] = [{
                            typeHint: dataToCopy.typeHint,
                            count: dataToCopy.count,
                            values: dataToCopy.values,
                            min: dataToCopy.min,
                            max: dataToCopy.max,
                        }];
                }
            }
        }
    }
}
exports.SDTFAttributeOverview = SDTFAttributeOverview;
_SDTFAttributeOverview_overview = new WeakMap();
//# sourceMappingURL=SDTFAttributeOverview.js.map