import { vec2 } from 'gl-matrix';
import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
export declare enum MATERIAL_SIDE {
    DOUBLE = "double",
    FRONT = "front",
    BACK = "back"
}
export declare enum TEXTURE_WRAPPING {
    REPEAT = 10497,
    CLAMP_TO_EDGE = 33071,
    MIRRORED_REPEAT = 33648
}
export declare enum TEXTURE_FILTERING {
    NONE = 0,
    NEAREST = 9728,
    LINEAR = 9729,
    NEAREST_MIPMAP_NEAREST = 9984,
    LINEAR_MIPMAP_NEAREST = 9985,
    NEAREST_MIPMAP_LINEAR = 9986,
    LINEAR_MIPMAP_LINEAR = 9987
}
export declare enum MATERIAL_ALPHA {
    OPAQUE = "opaque",
    MASK = "mask",
    BLEND = "blend"
}
export declare enum MATERIAL_SHADING {
    FLAT = "flat",
    SMOOTH = "smooth"
}
export declare class MapData {
    #private;
    constructor(image: HTMLImageElement, wrapS?: TEXTURE_WRAPPING, wrapT?: TEXTURE_WRAPPING, minFilter?: TEXTURE_FILTERING, magFilter?: TEXTURE_FILTERING, center?: vec2, color?: string, offset?: vec2, repeat?: vec2, rotation?: number, flipY?: boolean);
    get center(): vec2;
    get color(): string | undefined;
    get flipY(): boolean;
    get image(): HTMLImageElement;
    get magFilter(): TEXTURE_FILTERING;
    get minFilter(): TEXTURE_FILTERING;
    get offset(): vec2;
    get repeat(): vec2;
    get rotation(): number;
    get wrapS(): TEXTURE_WRAPPING;
    get wrapT(): TEXTURE_WRAPPING;
    clone(): MapData;
}
export declare class MaterialData extends AbstractTreeNodeData {
    #private;
    constructor(properties?: {
        alphaMap?: MapData;
        alphaCutoff?: number;
        alphaMode?: MATERIAL_ALPHA;
        aoMap?: MapData;
        aoMapIntensity?: number;
        bumpMap?: MapData;
        bumpScale?: number;
        color?: string;
        emissiveMap?: MapData;
        emissiveness?: string;
        shading?: MATERIAL_SHADING;
        map?: MapData;
        metalness?: number;
        metalnessMap?: MapData;
        metalnessRoughnessMap?: MapData;
        name?: string;
        normalMap?: MapData;
        normalScale?: number;
        opacity?: number;
        roughness?: number;
        roughnessMap?: MapData;
        side?: MATERIAL_SIDE;
        KHR_materials_pbrSpecularGlossiness?: boolean;
        KHR_materials_unlit?: boolean;
        glossiness?: number;
        specular?: string;
        specularGlossinessMap?: MapData;
        specularMap?: MapData;
        glossinessMap?: MapData;
    }, id?: string);
    get KHR_materials_pbrSpecularGlossiness(): boolean;
    set KHR_materials_pbrSpecularGlossiness(value: boolean);
    get KHR_materials_unlit(): boolean;
    set KHR_materials_unlit(value: boolean);
    get alphaCutoff(): number;
    set alphaCutoff(value: number);
    get alphaMap(): MapData | undefined;
    set alphaMap(value: MapData | undefined);
    get alphaMode(): MATERIAL_ALPHA;
    set alphaMode(value: MATERIAL_ALPHA);
    get aoMap(): MapData | undefined;
    set aoMap(value: MapData | undefined);
    get aoMapIntensity(): number;
    set aoMapIntensity(value: number);
    get bumpMap(): MapData | undefined;
    set bumpMap(value: MapData | undefined);
    get bumpScale(): number;
    set bumpScale(value: number);
    get color(): string;
    set color(value: string);
    get emissiveMap(): MapData | undefined;
    set emissiveMap(value: MapData | undefined);
    get emissiveness(): string | undefined;
    set emissiveness(value: string | undefined);
    get glossiness(): number;
    set glossiness(value: number);
    get glossinessMap(): MapData | undefined;
    set glossinessMap(value: MapData | undefined);
    get map(): MapData | undefined;
    set map(value: MapData | undefined);
    get metalness(): number;
    set metalness(value: number);
    get metalnessMap(): MapData | undefined;
    set metalnessMap(value: MapData | undefined);
    get metalnessRoughnessMap(): MapData | undefined;
    set metalnessRoughnessMap(value: MapData | undefined);
    get name(): string | undefined;
    set name(value: string | undefined);
    get normalMap(): MapData | undefined;
    set normalMap(value: MapData | undefined);
    get normalScale(): number;
    set normalScale(value: number);
    get opacity(): number;
    set opacity(value: number);
    get roughness(): number;
    set roughness(value: number);
    get roughnessMap(): MapData | undefined;
    set roughnessMap(value: MapData | undefined);
    get shading(): MATERIAL_SHADING;
    set shading(value: MATERIAL_SHADING);
    get side(): MATERIAL_SIDE;
    set side(value: MATERIAL_SIDE);
    get specular(): string;
    set specular(value: string);
    get specularGlossinessMap(): MapData | undefined;
    set specularGlossinessMap(value: MapData | undefined);
    get specularMap(): MapData | undefined;
    set specularMap(value: MapData | undefined);
    clone(): ITreeNodeData;
}
//# sourceMappingURL=MaterialData.d.ts.map