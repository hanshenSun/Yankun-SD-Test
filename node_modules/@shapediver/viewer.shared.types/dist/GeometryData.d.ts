import { mat4, vec3 } from 'gl-matrix';
import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
import { Box } from '@shapediver/viewer.shared.math';
import { MaterialData } from './MaterialData';
export declare enum PRIMITIVE_MODE {
    POINTS = 0,
    LINES = 1,
    LINE_LOOP = 2,
    LINE_STRIP = 3,
    TRIANGLES = 4,
    TRIANGLE_STRIP = 5,
    TRIANGLE_FAN = 6
}
export declare class AttributeData {
    #private;
    constructor(array: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array, itemSize: number, itemBytes: number, byteOffset: number, elementBytes: number, normalized: boolean, count: number, min?: number[], max?: number[], byteStride?: number, sparse?: boolean, sparseIndices?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array, sparseValues?: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array);
    get array(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array;
    get byteOffset(): number;
    get byteStride(): number | undefined;
    get count(): number;
    get elementBytes(): number;
    get itemBytes(): number;
    get itemSize(): number;
    get max(): number[];
    get min(): number[];
    get normalized(): boolean;
    get sparse(): boolean | undefined;
    get sparseIndices(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array | undefined;
    get sparseValues(): Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array | undefined;
    clone(): AttributeData;
}
export declare class PrimitiveData {
    #private;
    constructor(attributes?: {
        [key: string]: AttributeData;
    }, mode?: PRIMITIVE_MODE, indices?: AttributeData | null, material?: MaterialData | null);
    get attributes(): {
        [key: string]: AttributeData;
    };
    get boundingBox(): Box;
    get indices(): AttributeData | null;
    set indices(value: AttributeData | null);
    get material(): MaterialData | null;
    set material(value: MaterialData | null);
    get mode(): PRIMITIVE_MODE;
    clone(): PrimitiveData;
}
export declare class GeometryData extends AbstractTreeNodeData {
    #private;
    constructor(primitive: PrimitiveData, matrix?: mat4, id?: string);
    get boundingBox(): Box;
    get matrix(): mat4;
    get primitive(): PrimitiveData;
    get renderOrder(): number;
    set renderOrder(value: number);
    clone(): ITreeNodeData;
    intersect(origin: vec3, direction: vec3): number | null;
}
//# sourceMappingURL=GeometryData.d.ts.map