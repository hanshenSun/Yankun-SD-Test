import { AbstractTreeNodeData, ITreeNodeData } from '@shapediver/viewer.shared.node-tree';
export declare enum PRIMITIVETYPEHINT {
    DOUBLE = "double",
    COLOR = "color",
    STRING = "string",
    BOOL = "bool",
    FLOAT = "float",
    DECIMAL = "decimal",
    CULTUREINFO = "cultureinfo",
    INT = "int"
}
export declare enum GEOMETRYTYPEHINT {
    COMPLEX = "geometry.complex",
    INTERVAL2 = "geometry.interval2",
    PATH = "grasshopper.path",
    ARC = "geometry.arc",
    BOUNDINGBOX = "geometry.boundingbox",
    BOX = "geometry.box",
    CIRCLE = "geometry.circle",
    CONE = "geometry.cone",
    CYLINDER = "geometry.cylinder",
    ELLIPSE = "geometry.ellipse",
    INTERVAL = "geometry.interval",
    LINE = "geometry.line",
    MATRIX = "geometry.matrix",
    PLANE = "geometry.plane",
    POINT2D = "geometry.point2d",
    POINT2F = "geometry.point2f",
    POINT3D = "geometry.point3d",
    POINT3F = "geometry.point3f",
    POINT4D = "geometry.point4d",
    POLYLINE = "geometry.polyline",
    RAY = "geometry.ray",
    RECTANGLE = "geometry.rectangle",
    SPHERE = "geometry.sphere",
    TORUS = "geometry.torus",
    TRANSFORM = "geometry.transform",
    VECTOR2D = "geometry.vector2d",
    VECTOR2F = "geometry.vector2f",
    VECTOR3D = "geometry.vector3d",
    VECTOR3F = "geometry.vector3f"
}
export declare class SDTFAttributeData {
    #private;
    constructor(typeHint: PRIMITIVETYPEHINT | GEOMETRYTYPEHINT | string, value: any);
    get typeHint(): PRIMITIVETYPEHINT | GEOMETRYTYPEHINT | string;
    get value(): any;
}
export declare class SDTFAttributesData extends AbstractTreeNodeData {
    #private;
    constructor(attributes?: {
        [key: string]: SDTFAttributeData;
    }, id?: string);
    get attributes(): {
        [key: string]: SDTFAttributeData;
    };
    clone(): ITreeNodeData;
}
//# sourceMappingURL=SDTFAttributesData.d.ts.map