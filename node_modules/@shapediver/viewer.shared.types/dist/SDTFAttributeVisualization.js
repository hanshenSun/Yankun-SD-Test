"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDTFAttributeVisualization = exports.ATTRIBUTEVISUALIZATION = void 0;
const gl_matrix_1 = require("gl-matrix");
var ATTRIBUTEVISUALIZATION;
(function (ATTRIBUTEVISUALIZATION) {
    ATTRIBUTEVISUALIZATION["GRAYSCALE"] = "grayscale";
    ATTRIBUTEVISUALIZATION["OPACITY"] = "opacity";
    ATTRIBUTEVISUALIZATION["BLUE_RED"] = "blue_red";
    ATTRIBUTEVISUALIZATION["BLUE_WHITE_RED"] = "blue_white_red";
    ATTRIBUTEVISUALIZATION["GREEN_RED"] = "green_red";
    ATTRIBUTEVISUALIZATION["GREEN_WHITE_RED"] = "green_white_red";
    ATTRIBUTEVISUALIZATION["BLUE_GREEN_RED"] = "blue_green_red";
    ATTRIBUTEVISUALIZATION["BLUE_GREEN_YELLOW_RED_PURPLE_WHITE"] = "blue_green_yellow_red_purple_white";
    ATTRIBUTEVISUALIZATION["HSL"] = "hsl";
})(ATTRIBUTEVISUALIZATION = exports.ATTRIBUTEVISUALIZATION || (exports.ATTRIBUTEVISUALIZATION = {}));
const grayscaleVisualization = (factor) => {
    const color = Math.floor(factor * 255.0);
    return {
        color: 'rgb(' + color + ', ' + color + ', ' + color + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const opacityVisualization = (factor) => {
    return {
        color: '#00fff7',
        opacity: factor,
        matrix: gl_matrix_1.mat4.create()
    };
};
const blueRedVisualization = (factor) => {
    const red = factor * 255.0;
    const blue = (1 - factor) * 255.0;
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(0) + ', ' + Math.floor(blue) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const blueWhiteRedVisualization = (factor) => {
    let red = 255, green = 255, blue = 255;
    if (factor < 0.5) {
        const remappedFactor = factor / 0.5;
        red = 255.0 * remappedFactor;
        green = 255.0 * remappedFactor;
        blue = 255.0;
    }
    else {
        const remappedFactor = (factor - 0.5) / 0.5;
        red = 255.0;
        green = 255.0 * (1 - remappedFactor);
        blue = 255.0 * (1 - remappedFactor);
    }
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const greenRedVisualization = (factor) => {
    const red = factor * 255.0;
    const green = (1 - factor) * 255.0;
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(0) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const greenWhiteRedVisualization = (factor) => {
    let red = 255, green = 255, blue = 255;
    if (factor < 0.5) {
        const remappedFactor = factor / 0.5;
        red = 255.0 * remappedFactor;
        green = 255.0;
        blue = 255.0 * remappedFactor;
    }
    else {
        const remappedFactor = (factor - 0.5) / 0.5;
        red = 255.0;
        green = 255.0 * (1 - remappedFactor);
        blue = 255.0 * (1 - remappedFactor);
    }
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const blueGreenRedVisualization = (factor) => {
    let red = 255, green = 255, blue = 255;
    if (factor < 0.5) {
        const remappedFactor = factor / 0.5;
        red = 0;
        green = 255.0 * remappedFactor;
        blue = 255.0 * (1 - remappedFactor);
    }
    else {
        const remappedFactor = (factor - 0.5) / 0.5;
        red = 255.0 * remappedFactor;
        green = 255.0 * (1 - remappedFactor);
        blue = 0;
    }
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const blueGreenYellowRedPurpleWhiteVisualization = (factor) => {
    let red = 255, green = 255, blue = 255;
    if (factor < 0.2) {
        const remappedFactor = factor / 0.2;
        red = 0;
        green = 255.0 * remappedFactor;
        blue = 255.0 * (1 - remappedFactor);
    }
    else if (factor < 0.4) {
        const remappedFactor = (factor - 0.2) / 0.2;
        red = 255.0 * remappedFactor;
        green = 255.0;
        blue = 0.0;
    }
    else if (factor < 0.6) {
        const remappedFactor = (factor - 0.4) / 0.2;
        red = 255.0;
        green = 255.0 * (1 - remappedFactor);
        blue = 0.0;
    }
    else if (factor < 0.8) {
        const remappedFactor = (factor - 0.6) / 0.2;
        red = 255.0;
        green = 0.0;
        blue = 255.0 * remappedFactor;
    }
    else {
        const remappedFactor = (factor - 0.8) / 0.2;
        red = 255.0;
        green = 255.0 * remappedFactor;
        blue = 255.0;
    }
    return {
        color: 'rgb(' + Math.floor(red) + ', ' + Math.floor(green) + ', ' + Math.floor(blue) + ')',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const hslVisualization = (factor) => {
    const hue = factor * 359.99;
    return {
        color: 'hsl(' + Math.floor(hue) + ', 100%, 50%)',
        opacity: 1,
        matrix: gl_matrix_1.mat4.create()
    };
};
const numberVisualization = (value, min, max, type) => {
    const factor = (value - min) / (max - min);
    switch (type) {
        case ATTRIBUTEVISUALIZATION.GRAYSCALE:
            return grayscaleVisualization(factor);
        case ATTRIBUTEVISUALIZATION.OPACITY:
            return opacityVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_RED:
            return blueRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_WHITE_RED:
            return blueWhiteRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.GREEN_RED:
            return greenRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.GREEN_WHITE_RED:
            return greenWhiteRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_GREEN_RED:
            return blueGreenRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_GREEN_YELLOW_RED_PURPLE_WHITE:
            return blueGreenYellowRedPurpleWhiteVisualization(factor);
        case ATTRIBUTEVISUALIZATION.HSL:
            return hslVisualization(factor);
    }
    return {
        color: '#00fff7',
        opacity: 0,
        matrix: gl_matrix_1.mat4.create()
    };
};
const stringOpacityVisualization = (value, opacities) => {
    if (!opacities[value])
        return {
            color: '#00fff7',
            opacity: 0,
            matrix: gl_matrix_1.mat4.create()
        };
    return {
        color: '#00fff7',
        opacity: opacities[value],
        matrix: gl_matrix_1.mat4.create()
    };
};
const stringVisualization = (value, values, type) => {
    const factor = values.indexOf(value) / (values.length - 1);
    switch (type) {
        case ATTRIBUTEVISUALIZATION.GRAYSCALE:
            return grayscaleVisualization(factor);
        case ATTRIBUTEVISUALIZATION.OPACITY:
            return opacityVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_RED:
            return blueRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_WHITE_RED:
            return blueWhiteRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.GREEN_RED:
            return greenRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.GREEN_WHITE_RED:
            return greenWhiteRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_GREEN_RED:
            return blueGreenRedVisualization(factor);
        case ATTRIBUTEVISUALIZATION.BLUE_GREEN_YELLOW_RED_PURPLE_WHITE:
            return blueGreenYellowRedPurpleWhiteVisualization(factor);
        case ATTRIBUTEVISUALIZATION.HSL:
            return hslVisualization(factor);
    }
    return {
        color: '#00fff7',
        opacity: 0,
        matrix: gl_matrix_1.mat4.create()
    };
};
exports.SDTFAttributeVisualization = {
    numberVisualization,
    stringVisualization,
    stringOpacityVisualization
};
//# sourceMappingURL=SDTFAttributeVisualization.js.map