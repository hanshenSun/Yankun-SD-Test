import { mat4, vec3 } from 'gl-matrix';
import { IGeometry } from './IGeometry';
import { Sphere } from './Sphere';
export declare class Box implements IGeometry {
    private _min;
    private _max;
    private _boundingSphere;
    private _boundingSphereState;
    constructor(_min?: vec3, _max?: vec3);
    intersect(origin: vec3, direction: vec3): number | null;
    get boundingSphere(): Sphere;
    get max(): vec3;
    set max(value: vec3);
    get min(): vec3;
    set min(value: vec3);
    applyMatrix(matrix: mat4): Box;
    clone(): Box;
    containsPoint(point: vec3): boolean;
    clampPoint(point: vec3): vec3;
    setFromAttributeArray(array: Int8Array | Uint8Array | Int16Array | Uint16Array | Uint32Array | Float32Array): Box;
    union(box: Box): Box;
    isEmpty(): boolean;
}
//# sourceMappingURL=Box.d.ts.map