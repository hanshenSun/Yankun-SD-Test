"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Session_api, _Session_eventEngine, _Session_exports, _Session_id, _Session_inputValidator, _Session_logger, _Session_modelViewUrl, _Session_outputs, _Session_parameters, _Session_performanceEvaluator, _Session_primarySessionRequest, _Session_saveSessionSettings, _Session_sceneTree, _Session_sessionEngine, _Session_settingsEngine, _Session_stateEngine, _Session_ticket, _Session_uuidGenerator, _Session_automaticUpdate, _Session_canUploadGLTF, _Session_commitParameters, _Session_commitSettings, _Session_customizationProcess, _Session_excludeViewers, _Session_node, _Session_parameterHistory, _Session_parameterHistoryCall, _Session_parameterHistoryForward, _Session_primarySession, _Session_useSessionSettings;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_session_engine_session_engine_1 = require("@shapediver/viewer.session-engine.session-engine");
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const Parameter_1 = require("./Parameter");
const Api_1 = require("../Api");
const FileParameter_1 = require("./FileParameter");
const Export_1 = require("./Export");
const Output_1 = require("./Output");
let Session = class Session {
    constructor(properties, callbacks) {
        _Session_api.set(this, tsyringe_1.container.resolve(Api_1.Api));
        _Session_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _Session_exports.set(this, {});
        _Session_id.set(this, void 0);
        _Session_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Session_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Session_modelViewUrl.set(this, void 0);
        _Session_outputs.set(this, {});
        _Session_parameters.set(this, {});
        _Session_performanceEvaluator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.PerformanceEvaluator));
        _Session_primarySessionRequest.set(this, false);
        _Session_saveSessionSettings.set(this, () => {
            const parameters = this.parameters;
            const exports = this.exports;
            const sessionProperties = {};
            for (let p in parameters) {
                sessionProperties[p] = {
                    order: parameters[p].order || 0,
                    displayname: parameters[p].displayname || '',
                    hidden: parameters[p].hidden
                };
            }
            for (let e in exports) {
                sessionProperties[e] = {
                    order: exports[e].order || 0,
                    displayname: exports[e].displayname || '',
                    hidden: exports[e].hidden
                };
            }
            __classPrivateFieldGet(this, _Session_settingsEngine, "f").session = sessionProperties;
            let orderedOutputs = [];
            for (let o in this.outputs)
                orderedOutputs.push(this.outputs[o]);
            orderedOutputs.sort((a, b) => ((a.order || Infinity) - (b.order || Infinity)));
            let zerosOutputs = orderedOutputs.filter(x => x.order === 0);
            orderedOutputs = orderedOutputs.filter((el) => { return !zerosOutputs.includes(el); });
            orderedOutputs = zerosOutputs.concat(orderedOutputs);
            const controlOrderOutputs = orderedOutputs.map((value) => { return value.id; });
            for (let i = 0; i < controlOrderOutputs.length; i++) {
                if (this.outputs[controlOrderOutputs[i]])
                    if (this.outputs[controlOrderOutputs[i]].order !== i)
                        this.outputs[controlOrderOutputs[i]].order = i;
            }
        });
        _Session_sceneTree.set(this, tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree));
        _Session_sessionEngine.set(this, void 0);
        _Session_settingsEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine));
        _Session_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _Session_ticket.set(this, void 0);
        _Session_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _Session_automaticUpdate.set(this, false);
        _Session_canUploadGLTF.set(this, false);
        _Session_commitParameters.set(this, false);
        _Session_commitSettings.set(this, false);
        _Session_customizationProcess.set(this, void 0);
        _Session_excludeViewers.set(this, []);
        _Session_node.set(this, void 0);
        _Session_parameterHistory.set(this, []);
        _Session_parameterHistoryCall.set(this, false);
        _Session_parameterHistoryForward.set(this, []);
        _Session_primarySession.set(this, false);
        _Session_useSessionSettings.set(this, true);
        try {
            __classPrivateFieldSet(this, _Session_node, new viewer_shared_node_tree_1.TreeNode(properties.id), "f");
            __classPrivateFieldSet(this, _Session_sessionEngine, new viewer_session_engine_session_engine_1.Session(Object.assign({ buildDate: viewer_shared_build_data_1.build_data.build_date, buildVersion: viewer_shared_build_data_1.build_data.build_version }, properties)), "f");
            __classPrivateFieldSet(this, _Session_id, __classPrivateFieldGet(this, _Session_sessionEngine, "f").id, "f");
            __classPrivateFieldSet(this, _Session_ticket, __classPrivateFieldGet(this, _Session_sessionEngine, "f").ticket, "f");
            __classPrivateFieldSet(this, _Session_modelViewUrl, __classPrivateFieldGet(this, _Session_sessionEngine, "f").modelViewUrl, "f");
            __classPrivateFieldGet(this, _Session_stateEngine, "f").createCustomState(this.id + '_settings_registered');
            __classPrivateFieldSet(this, _Session_excludeViewers, properties.excludeViewers || [], "f");
            __classPrivateFieldSet(this, _Session_primarySessionRequest, properties.primarySession !== false, "f");
            if (this.primarySessionRequest === true) {
                if (__classPrivateFieldGet(this, _Session_stateEngine, "f").primarySessionLoaded.resolved === false) {
                    __classPrivateFieldSet(this, _Session_primarySession, true, "f");
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}): This is now the primary session.`);
                }
                __classPrivateFieldGet(this, _Session_stateEngine, "f").getCustomState(this.id + '_settings_registered').then(() => {
                    __classPrivateFieldSet(this, _Session_commitParameters, __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitParameters, "f");
                    __classPrivateFieldSet(this, _Session_commitSettings, __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitSettings, "f");
                    if (__classPrivateFieldGet(this, _Session_useSessionSettings, "f") === true) {
                        for (let s in __classPrivateFieldGet(this, _Session_settingsEngine, "f").session) {
                            const temp = __classPrivateFieldGet(this, _Session_settingsEngine, "f").session[s];
                            if (this.parameters[s]) {
                                if (temp.displayname !== undefined)
                                    this.parameters[s].displayname = temp.displayname;
                                if (temp.order !== undefined)
                                    this.parameters[s].order = temp.order;
                                if (temp.hidden !== undefined)
                                    this.parameters[s].hidden = temp.hidden;
                            }
                            if (this.exports[s]) {
                                if (temp.displayname !== undefined)
                                    this.exports[s].displayname = temp.displayname;
                                if (temp.order !== undefined)
                                    this.exports[s].order = temp.order;
                                if (temp.hidden !== undefined)
                                    this.exports[s].hidden = temp.hidden;
                            }
                        }
                    }
                });
            }
            callbacks.setAsPrimary = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    __classPrivateFieldSet(this, _Session_primarySession, true, "f");
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIALIZED, { sessionId: this.id });
                    __classPrivateFieldGet(this, _Session_settingsEngine, "f").loadSettings(__classPrivateFieldGet(this, _Session_sessionEngine, "f").settingsConfig, this.id, this.primarySession);
                    yield new Promise((resolve) => __classPrivateFieldGet(this, _Session_stateEngine, "f").getCustomState(this.id + '_settings_registered').then(() => { resolve(); }));
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_LOADED, { sessionId: this.id });
                    __classPrivateFieldGet(this, _Session_api, "f").update();
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).setAsPrimary: This is now the primary session.`);
                }
                catch (e) {
                    if (e instanceof viewer_shared_services_1.SDError)
                        throw e;
                    throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).setAsPrimary: Something unexpected happened.`, true);
                }
            });
            callbacks.close = () => __awaiter(this, void 0, void 0, function* () {
                try {
                    const closeResult = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").close();
                    if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                        __classPrivateFieldGet(this, _Session_sceneTree, "f").removeNode(this.node);
                    __classPrivateFieldGet(this, _Session_api, "f").update();
                    __classPrivateFieldGet(this, _Session_settingsEngine, "f").reset();
                    __classPrivateFieldGet(this, _Session_stateEngine, "f").primarySettingsRegistered.reset();
                    __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CLOSED, { sessionId: this.id });
                    if (!closeResult)
                        __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).close: Was not able to close session completely, please disregard this session.`);
                    return closeResult;
                }
                catch (e) {
                    if (e instanceof viewer_shared_services_1.SDError)
                        throw e;
                    throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).close: Something unexpected happened.`, true);
                }
            });
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).constructor: Session api created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.constructor: Something unexpected happened.`, true);
        }
    }
    get automaticUpdate() {
        return __classPrivateFieldGet(this, _Session_automaticUpdate, "f");
    }
    set automaticUpdate(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate: Updating automaticUpdate to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate`, value, 'boolean');
            __classPrivateFieldSet(this, _Session_automaticUpdate, value, "f");
            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).automaticUpdate: automaticUpdate was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).automaticUpdate: Something unexpected happened.`, true);
        }
    }
    get authorTicket() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").authorTicket;
    }
    get bearerToken() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").bearerToken;
    }
    set bearerToken(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken: Updating BearerToken to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken`, value, 'string', false);
            __classPrivateFieldGet(this, _Session_sessionEngine, "f").bearerToken = value;
            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).bearerToken: bearerToken was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).bearerToken: Something unexpected happened.`, true);
        }
    }
    get canUploadGLTF() {
        return __classPrivateFieldGet(this, _Session_canUploadGLTF, "f");
    }
    get commitParameters() {
        return __classPrivateFieldGet(this, _Session_commitParameters, "f");
    }
    set commitParameters(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters: Updating CommitParameters to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters`, value, 'boolean');
            __classPrivateFieldSet(this, _Session_commitParameters, value, "f");
            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitParameters: commitParameters was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).commitParameters: Something unexpected happened.`, true);
        }
    }
    get commitSettings() {
        return __classPrivateFieldGet(this, _Session_commitSettings, "f");
    }
    set commitSettings(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings: Updating CommitSettings to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings`, value, 'boolean');
            __classPrivateFieldSet(this, _Session_commitSettings, value, "f");
            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).commitSettings: commitSettings was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).commitSettings: Something unexpected happened.`, true);
        }
    }
    get exports() {
        return __classPrivateFieldGet(this, _Session_exports, "f");
    }
    get id() {
        return __classPrivateFieldGet(this, _Session_id, "f");
    }
    get initialized() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").initialized;
    }
    get modelViewUrl() {
        return __classPrivateFieldGet(this, _Session_modelViewUrl, "f");
    }
    get node() {
        return __classPrivateFieldGet(this, _Session_node, "f");
    }
    get outputs() {
        return __classPrivateFieldGet(this, _Session_outputs, "f");
    }
    get parameters() {
        return __classPrivateFieldGet(this, _Session_parameters, "f");
    }
    get primarySession() {
        return __classPrivateFieldGet(this, _Session_primarySession, "f");
    }
    get primarySessionRequest() {
        return __classPrivateFieldGet(this, _Session_primarySessionRequest, "f");
    }
    get refreshBearerToken() {
        return __classPrivateFieldGet(this, _Session_sessionEngine, "f").refreshBearerToken;
    }
    set refreshBearerToken(value) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken: Updating RefreshBearerToken to ${value}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken`, value, 'function');
            __classPrivateFieldGet(this, _Session_sessionEngine, "f").refreshBearerToken = value;
            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).refreshBearerToken: refreshBearerToken was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).refreshBearerToken: Something unexpected happened.`, true);
        }
    }
    get ticket() {
        return __classPrivateFieldGet(this, _Session_ticket, "f");
    }
    canGoBack() {
        return __classPrivateFieldGet(this, _Session_parameterHistory, "f").length > 1;
    }
    canGoForward() {
        return __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").length > 0;
    }
    customize() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const customizationID = __classPrivateFieldGet(this, _Session_uuidGenerator, "f").create();
                __classPrivateFieldSet(this, _Session_customizationProcess, customizationID, "f");
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").start();
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('init');
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customizing session.`);
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    if (__classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].blurSceneWhenBusy)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].registerBusyMode(customizationID);
                const fileParameterIds = {};
                for (const parameterId in this.parameters) {
                    if (this.parameters[parameterId] instanceof FileParameter_1.FileParameter) {
                        fileParameterIds[parameterId] = yield this.parameters[parameterId].upload();
                        if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                            __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                            __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                            for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                                __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                            __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                            return new viewer_shared_node_tree_1.TreeNode();
                        }
                    }
                }
                if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                    for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                for (const parameterId in fileParameterIds)
                    this.parameters[parameterId].value = fileParameterIds[parameterId];
                const parameterSet = {};
                for (const parameterId in this.parameters) {
                    parameterSet[parameterId] = {
                        value: this.parameters[parameterId].value,
                        valueString: this.parameters[parameterId].stringify()
                    };
                }
                for (const parameterId in this.parameters)
                    __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameterValues[parameterId] = parameterSet[parameterId].valueString;
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customizing session with parameters ${JSON.stringify(__classPrivateFieldGet(this, _Session_sessionEngine, "f").parameterValues)}.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('customize');
                const node = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").customize(() => __classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('customize');
                if (__classPrivateFieldGet(this, _Session_customizationProcess, "f") !== customizationID) {
                    __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                    for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                        __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customization was exceeded by other customization request.`);
                    return node;
                }
                if (!__classPrivateFieldGet(this, _Session_parameterHistoryCall, "f")) {
                    __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(parameterSet);
                    __classPrivateFieldSet(this, _Session_parameterHistoryForward, [], "f");
                }
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('finish');
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").removeNode(this.node);
                __classPrivateFieldSet(this, _Session_node, node, "f");
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Customization request finished, updating geometry.`);
                for (const parameterId in this.parameters)
                    this.parameters[parameterId].sessionValue = parameterSet[parameterId].value;
                this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                for (let viewerId in __classPrivateFieldGet(this, _Session_api, "f").viewers)
                    __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId].deregisterBusyMode(customizationID);
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).customize: Session customized.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('finish');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, { sessionId: this.id });
                return this.node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).customize: Something unexpected happened.`, true);
            }
        });
    }
    getExportById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportById: Getting export with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportById`, id, 'string');
            return this.exports[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, e, `Session(${this.id}).getExportById: Something unexpected happened.`, true);
        }
    }
    getExportByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByName: Getting export(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByName`, name, 'string');
            const exports = [];
            for (let exportId in this.exports) {
                if (name === this.exports[exportId].name)
                    exports.push(this.exports[exportId]);
            }
            return exports;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, e, `Session(${this.id}).getExportByName: Something unexpected happened.`, true);
        }
    }
    getExportByType(type) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByType: Getting export(s) with type ${type}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, `Session(${this.id}).getExportByType`, type, 'string');
            const exports = [];
            for (let exportId in this.exports) {
                if (type === this.exports[exportId].type)
                    exports.push(this.exports[exportId]);
            }
            return exports;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.EXPORT, e, `Session(${this.id}).getExportByType: Something unexpected happened.`, true);
        }
    }
    getOutputById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputById: Getting output with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputById`, id, 'string');
            return this.outputs[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, e, `Session(${this.id}).getOutputById: Something unexpected happened.`, true);
        }
    }
    getOutputByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputByName: Getting output(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, `Session(${this.id}).getOutputByName`, name, 'string');
            const outputs = [];
            for (let outputId in this.outputs) {
                if (name === this.outputs[outputId].name)
                    outputs.push(this.outputs[outputId]);
            }
            return outputs;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.OUTPUT, e, `Session(${this.id}).getOutputByName: Something unexpected happened.`, true);
        }
    }
    getParameterById(id) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterById: Getting parameter with id ${id}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterById`, id, 'string');
            return this.parameters[id];
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Session(${this.id}).getParameterById: Something unexpected happened.`, true);
        }
    }
    getParameterByName(name) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByName: Getting parameter(s) with name ${name}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByName`, name, 'string');
            const parameters = [];
            for (let parameterId in this.parameters) {
                if (name === this.parameters[parameterId].name)
                    parameters.push(this.parameters[parameterId]);
            }
            return parameters;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Session(${this.id}).getParameterByName: Something unexpected happened.`, true);
        }
    }
    getParameterByType(type) {
        try {
            __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByType: Getting parameter(s) with type ${type}.`);
            __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Session(${this.id}).getParameterByType`, type, 'string');
            const parameters = [];
            for (let parameterId in this.parameters) {
                if (type === this.parameters[parameterId].type)
                    parameters.push(this.parameters[parameterId]);
            }
            return parameters;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Session(${this.id}).getParameterByType: Something unexpected happened.`, true);
        }
    }
    goBack() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.canGoBack()) {
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goBack: Cannot go further back.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                const currentParameterSet = __classPrivateFieldGet(this, _Session_parameterHistory, "f").pop();
                const lastParameterSet = __classPrivateFieldGet(this, _Session_parameterHistory, "f")[__classPrivateFieldGet(this, _Session_parameterHistory, "f").length - 1];
                for (const parameterId in lastParameterSet)
                    this.parameters[parameterId].value = lastParameterSet[parameterId].value;
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, true, "f");
                const node = yield this.customize();
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, false, "f");
                __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").push(currentParameterSet);
                return node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).goBack: Something unexpected happened.`, true);
            }
        });
    }
    goForward() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.canGoForward()) {
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).goBack: Cannot go further forward.`);
                    return new viewer_shared_node_tree_1.TreeNode();
                }
                const lastParameterSet = __classPrivateFieldGet(this, _Session_parameterHistoryForward, "f").pop();
                for (const parameterId in lastParameterSet)
                    this.parameters[parameterId].value = lastParameterSet[parameterId].value;
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, true, "f");
                const node = yield this.customize();
                __classPrivateFieldSet(this, _Session_parameterHistoryCall, false, "f");
                __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(lastParameterSet);
                return node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).goForward: Something unexpected happened.`, true);
            }
        });
    }
    init() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").start();
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('init');
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).init: Initializing Session.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('init');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('customize');
                __classPrivateFieldSet(this, _Session_node, yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").init(), "f");
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('customize');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").startSection('finish');
                const parameterSet = {};
                for (let p in __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters) {
                    const param = __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p];
                    if (param.displayname !== undefined || param.order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    switch (true) {
                        case param.type === Parameter_1.PARAMETERTYPE.BOOL || param.type === Parameter_1.PARAMETERTYPE.SBOOL:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.COLOR || param.type === Parameter_1.PARAMETERTYPE.SCOLOR:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.FILE:
                            this.parameters[p] = new FileParameter_1.FileParameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        case param.type === Parameter_1.PARAMETERTYPE.EVEN || param.type === Parameter_1.PARAMETERTYPE.FLOAT || param.type === Parameter_1.PARAMETERTYPE.INT || param.type === Parameter_1.PARAMETERTYPE.ODD || param.type === Parameter_1.PARAMETERTYPE.SINTEGER || param.type === Parameter_1.PARAMETERTYPE.SNUMBER:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                        default:
                            this.parameters[p] = new Parameter_1.Parameter(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").parameters[p]);
                            break;
                    }
                    parameterSet[p] = {
                        value: this.parameters[p].value,
                        valueString: this.parameters[p].stringify()
                    };
                }
                __classPrivateFieldGet(this, _Session_parameterHistory, "f").push(parameterSet);
                for (let e in __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports) {
                    if (__classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[e].displayname !== undefined || __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[e].order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    this.exports[e] = new Export_1.Export(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").exports[e]);
                }
                for (let o in __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs) {
                    if (__classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[o].displayname !== undefined || __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[o].order !== undefined)
                        __classPrivateFieldSet(this, _Session_useSessionSettings, false, "f");
                    this.outputs[o] = new Output_1.Output(this, __classPrivateFieldGet(this, _Session_sessionEngine, "f"), __classPrivateFieldGet(this, _Session_sessionEngine, "f").outputs[o]);
                }
                __classPrivateFieldSet(this, _Session_canUploadGLTF, ((_a = __classPrivateFieldGet(this, _Session_sessionEngine, "f").sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'gltf-upload').length) !== 0, "f");
                if (__classPrivateFieldGet(this, _Session_api, "f").automaticUpdate)
                    __classPrivateFieldGet(this, _Session_sceneTree, "f").addNode(this.node);
                this.node.excludeViewers = __classPrivateFieldGet(this, _Session_excludeViewers, "f");
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIALIZED, { sessionId: this.id });
                const viewerPromises = [];
                const viewerIds = Object.keys(__classPrivateFieldGet(this, _Session_api, "f").viewers);
                for (let i = 0; i < viewerIds.length; i++)
                    viewerPromises.push(new Promise(resolve => { const state = __classPrivateFieldGet(this, _Session_stateEngine, "f").getCustomState(__classPrivateFieldGet(this, _Session_api, "f").viewers[viewerIds[i]].id + '_settings_loaded'); state.resolved === true ? resolve() : state.then(() => resolve()); }));
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").loadSettings(__classPrivateFieldGet(this, _Session_sessionEngine, "f").settingsConfig, this.id, this.primarySession);
                yield new Promise((resolve) => __classPrivateFieldGet(this, _Session_stateEngine, "f").getCustomState(this.id + '_settings_registered').then(() => { resolve(); }));
                if (this.primarySession !== false)
                    yield Promise.all(viewerPromises);
                __classPrivateFieldGet(this, _Session_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_LOADED, { sessionId: this.id });
                __classPrivateFieldGet(this, _Session_api, "f").update();
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).init: Session initialized.`);
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").endSection('finish');
                __classPrivateFieldGet(this, _Session_performanceEvaluator, "f").end();
                return this.node;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).init: Something unexpected happened.`, true);
            }
        });
    }
    saveDefaultParameters() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters: Saving default parameters.`);
                const response = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveDefaultParameters();
                if (response) {
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveDefaultParameters: Saved default parameters.`);
                }
                else {
                    __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError(`Session(${this.id}).saveDefaultParameters: Could not save default parameters.`));
                }
                return response;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).saveDefaultParameters: Something unexpected happened.`, true);
            }
        });
    }
    saveSessionProperties(saveInSettings = true) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Saving session properties.`);
                __classPrivateFieldGet(this, _Session_saveSessionSettings, "f").call(this);
                let properties = {};
                for (let p in this.parameters) {
                    properties[p] = {
                        displayname: this.parameters[p].displayname !== undefined ? this.parameters[p].displayname : '',
                        hidden: this.parameters[p].hidden !== undefined ? this.parameters[p].hidden : false,
                        order: this.parameters[p].order !== undefined ? this.parameters[p].order : 0,
                        tooltip: this.parameters[p].tooltip !== undefined ? this.parameters[p].tooltip : '',
                    };
                }
                const responseP = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveParameterProperties(properties) : true;
                properties = {};
                for (let e in this.exports) {
                    properties[e] = {
                        displayname: this.exports[e].displayname !== undefined ? this.exports[e].displayname : '',
                        hidden: this.exports[e].hidden !== undefined ? this.exports[e].hidden : false,
                        order: this.exports[e].order !== undefined ? this.exports[e].order : 0,
                        tooltip: this.exports[e].tooltip !== undefined ? this.exports[e].tooltip : '',
                    };
                }
                const responseE = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveExportProperties(properties) : true;
                properties = {};
                for (let o in this.outputs) {
                    properties[o] = {
                        displayname: this.outputs[o].displayname !== undefined ? this.outputs[o].displayname : '',
                        hidden: this.outputs[o].hidden !== undefined ? this.outputs[o].hidden : false,
                        order: this.outputs[o].order !== undefined ? this.outputs[o].order : 0,
                        tooltip: this.outputs[o].tooltip !== undefined ? this.outputs[o].tooltip : '',
                    };
                }
                const responseO = Object.values(properties).length !== 0 ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveOutputProperties(properties) : true;
                const response = saveInSettings ? yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveSettings(__classPrivateFieldGet(this, _Session_settingsEngine, "f").convertToTargetVersion()) : true;
                if (response && responseP && responseO && responseE) {
                    __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Saved session properties.`);
                }
                else {
                    __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSessionProperties: Could not save session properties.`);
                }
                return response && responseP && responseO && responseE;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).saveSessionProperties: Something unexpected happened.`, true);
            }
        });
    }
    saveSettings(viewerId) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings: Saving settings.`);
                __classPrivateFieldGet(this, _Session_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings`, viewerId, 'boolean', false);
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitParameters = this.commitParameters;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").general.commitSettings = this.commitSettings;
                yield this.saveSessionProperties(false);
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.build_version = viewer_shared_build_data_1.build_data.build_version;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.build_date = viewer_shared_build_data_1.build_data.build_date;
                __classPrivateFieldGet(this, _Session_settingsEngine, "f").settings.settings_version = '3.0';
                if (Object.values(__classPrivateFieldGet(this, _Session_api, "f").viewers).length !== 0) {
                    let viewer = viewerId ? __classPrivateFieldGet(this, _Session_api, "f").viewers[viewerId] : null;
                    if (!viewer)
                        viewer = Object.values(__classPrivateFieldGet(this, _Session_api, "f").viewers)[0];
                    const renderingEngines = tsyringe_1.container.resolveAll('renderingEngine');
                    let renderingEngine;
                    for (let i = 0; i < renderingEngines.length; i++)
                        if (renderingEngines[i].id === viewer.id)
                            renderingEngine = renderingEngines[i];
                    renderingEngine.saveSettings();
                    const response = yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").saveSettings(__classPrivateFieldGet(this, _Session_settingsEngine, "f").convertToTargetVersion());
                    if (response) {
                        __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).saveSettings: Saved settings.`);
                    }
                    else {
                        __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError(`Session(${this.id}).saveSettings: Could not save settings.`));
                    }
                    return response;
                }
                __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError(`Session(${this.id}).saveSettings: Could not save settings, no viewer initialized.`));
                return false;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).saveSettings: Something unexpected happened.`, true);
            }
        });
    }
    uploadGLTF(responseType = 'gltf') {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.canUploadGLTF === false) {
                    const error = new viewer_shared_services_1.SDError(`Session(${this.id}).uploadGLTF: GLTF upload not available in this session.`);
                    __classPrivateFieldGet(this, _Session_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, error.message);
                    throw error;
                }
                const blob = yield __classPrivateFieldGet(this, _Session_api, "f").convertSceneToGLTF();
                __classPrivateFieldGet(this, _Session_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).uploadGLTF: Uploading GLTF.`);
                const conversion = responseType === 'usdz' ? '?conversion=usdz' : '';
                const uploadReply = (yield __classPrivateFieldGet(this, _Session_sessionEngine, "f").sessionCommunication(((_a = __classPrivateFieldGet(this, _Session_sessionEngine, "f").sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'gltf-upload')[0].href) + conversion, (_b = __classPrivateFieldGet(this, _Session_sessionEngine, "f").sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'gltf-upload')[0].method.toLowerCase(), blob, 'model/gltf-binary')).data;
                __classPrivateFieldGet(this, _Session_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${this.id}).uploadGLTF: Uploaded GLTF.`);
                return uploadReply.gltf.href;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Session_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session(${this.id}).uploadGLTF: Something unexpected happened.`, true);
            }
        });
    }
};
_Session_api = new WeakMap(), _Session_eventEngine = new WeakMap(), _Session_exports = new WeakMap(), _Session_id = new WeakMap(), _Session_inputValidator = new WeakMap(), _Session_logger = new WeakMap(), _Session_modelViewUrl = new WeakMap(), _Session_outputs = new WeakMap(), _Session_parameters = new WeakMap(), _Session_performanceEvaluator = new WeakMap(), _Session_primarySessionRequest = new WeakMap(), _Session_saveSessionSettings = new WeakMap(), _Session_sceneTree = new WeakMap(), _Session_sessionEngine = new WeakMap(), _Session_settingsEngine = new WeakMap(), _Session_stateEngine = new WeakMap(), _Session_ticket = new WeakMap(), _Session_uuidGenerator = new WeakMap(), _Session_automaticUpdate = new WeakMap(), _Session_canUploadGLTF = new WeakMap(), _Session_commitParameters = new WeakMap(), _Session_commitSettings = new WeakMap(), _Session_customizationProcess = new WeakMap(), _Session_excludeViewers = new WeakMap(), _Session_node = new WeakMap(), _Session_parameterHistory = new WeakMap(), _Session_parameterHistoryCall = new WeakMap(), _Session_parameterHistoryForward = new WeakMap(), _Session_primarySession = new WeakMap(), _Session_useSessionSettings = new WeakMap();
Session = __decorate([
    tsyringe_1.injectable(),
    __metadata("design:paramtypes", [Object, Object])
], Session);
exports.Session = Session;
//# sourceMappingURL=Session.js.map