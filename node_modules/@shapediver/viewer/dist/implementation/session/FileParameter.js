"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FileParameter_httpClient, _FileParameter_logger, _FileParameter_session, _FileParameter_sessionEngine, _FileParameter_uuidGenerator;
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileParameter = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const Parameter_1 = require("./Parameter");
class FileParameter extends Parameter_1.Parameter {
    constructor(session, sessionEngine, paramDef) {
        super(session, sessionEngine, paramDef);
        _FileParameter_httpClient.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.HttpClient));
        _FileParameter_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _FileParameter_session.set(this, void 0);
        _FileParameter_sessionEngine.set(this, void 0);
        _FileParameter_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        try {
            __classPrivateFieldSet(this, _FileParameter_session, session, "f");
            __classPrivateFieldSet(this, _FileParameter_sessionEngine, sessionEngine, "f");
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _FileParameter_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Parameter(${this.id}).constructor: Something unexpected happened.`, true);
        }
    }
    upload() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _FileParameter_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Parameter(${this.id}).upload: Uploading FileParameter with value ${this.value}.`);
                if (!this.value)
                    return this.defval;
                if (typeof this.value === 'string' && this.value.length === 36 && __classPrivateFieldGet(this, _FileParameter_uuidGenerator, "f").validate(this.value))
                    return this.value;
                const data = new File([typeof this.value === 'string' ? new Blob([this.value], { type: 'text/plain' }) : this.value], 'upload', { type: this.value.type });
                if (data.size === 0) {
                    const error = new viewer_shared_services_1.SDError(`Parameter(${this.id}).upload: Error uploading FileParameter, file size was 0.`);
                    __classPrivateFieldGet(this, _FileParameter_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, error.message);
                    throw error;
                }
                if (!((_a = this.format) === null || _a === void 0 ? void 0 : _a.includes(data.type))) {
                    const error = new viewer_shared_services_1.SDError(`Parameter(${this.id}).upload: Error uploading FileParameter, type of data (${data.type}) is not a valid type. Has to be ${this.format}.`);
                    __classPrivateFieldGet(this, _FileParameter_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, error.message);
                    throw error;
                }
                __classPrivateFieldGet(this, _FileParameter_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Parameter(${this.id}).upload: Uploading FileParameter.`);
                try {
                    let uploadReply = (yield __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").sessionCommunication((_b = __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'upload')[0].href, (_c = __classPrivateFieldGet(this, _FileParameter_sessionEngine, "f").sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'upload')[0].method.toLowerCase(), { [this.id]: { size: data.size, format: data.type } }, 'application/json')).data;
                    __classPrivateFieldGet(this, _FileParameter_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, `Parameter(${this.id}).upload: Received reply ${JSON.stringify(uploadReply)}.`);
                    yield __classPrivateFieldGet(this, _FileParameter_httpClient, "f").put(uploadReply[this.id].href, { data, headers: { 'Content-Type': data.type }, });
                    return uploadReply[this.id].id;
                }
                catch (e) {
                    if (e.response && e.response.status) {
                        throw __classPrivateFieldGet(this, _FileParameter_logger, "f").httpError(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Parameter(${this.id}).upload: Upload failed.`, e.response.status, true);
                    }
                    else {
                        throw __classPrivateFieldGet(this, _FileParameter_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Parameter(${this.id}).upload: Upload failed.`, true);
                    }
                }
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _FileParameter_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.PARAMETER, e, `Parameter(${this.id}).upload: Something unexpected happened.`, true);
            }
        });
    }
}
exports.FileParameter = FileParameter;
_FileParameter_httpClient = new WeakMap(), _FileParameter_logger = new WeakMap(), _FileParameter_session = new WeakMap(), _FileParameter_sessionEngine = new WeakMap(), _FileParameter_uuidGenerator = new WeakMap();
//# sourceMappingURL=FileParameter.js.map