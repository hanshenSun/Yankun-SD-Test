import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { ISession } from '../../interfaces/session/ISession';
import { IExport } from '../../interfaces/session/IExport';
import { IOutput } from '../../interfaces/session/IOutput';
import { IParameter } from '../../interfaces/session/IParameter';
export declare class Session implements ISession {
    #private;
    constructor(properties: {
        id: string;
        ticket: string;
        modelViewUrl: string;
        bearerToken?: string;
        primarySession?: boolean;
        excludeViewers?: string[];
    }, callbacks: any);
    get automaticUpdate(): boolean;
    set automaticUpdate(value: boolean);
    get authorTicket(): boolean | undefined;
    get bearerToken(): string | undefined;
    set bearerToken(value: string | undefined);
    get canUploadGLTF(): boolean;
    get commitParameters(): boolean;
    set commitParameters(value: boolean);
    get commitSettings(): boolean;
    set commitSettings(value: boolean);
    get exports(): {
        [key: string]: IExport;
    };
    get id(): string;
    get initialized(): boolean;
    get modelViewUrl(): string;
    get node(): TreeNode;
    get outputs(): {
        [key: string]: IOutput;
    };
    get parameters(): {
        [key: string]: IParameter<any>;
    };
    get primarySession(): boolean;
    get primarySessionRequest(): boolean;
    get refreshBearerToken(): () => string;
    set refreshBearerToken(value: () => string);
    get ticket(): string;
    canGoBack(): boolean;
    canGoForward(): boolean;
    customize(): Promise<TreeNode>;
    getExportById(id: string): IExport | null;
    getExportByName(name: string): IExport[];
    getExportByType(type: string): IExport[];
    getOutputById(id: string): IOutput | null;
    getOutputByName(name: string): IOutput[];
    getParameterById(id: string): IParameter<any> | null;
    getParameterByName(name: string): IParameter<any>[];
    getParameterByType(type: string): IParameter<any>[];
    goBack(): Promise<TreeNode>;
    goForward(): Promise<TreeNode>;
    init(): Promise<TreeNode>;
    saveDefaultParameters(): Promise<boolean>;
    saveSessionProperties(saveInSettings?: boolean): Promise<boolean>;
    saveSettings(viewerId?: string): Promise<boolean>;
    uploadGLTF(responseType?: 'gltf' | 'usdz'): Promise<any>;
}
//# sourceMappingURL=Session.d.ts.map