import { Tree } from '@shapediver/viewer.shared.node-tree';
import { IEvent, LOGGINGLEVEL, MAINEVENTTYPE } from '@shapediver/viewer.shared.services';
import { RENDERERTYPE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { VISIBILITYMODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { ShapeDiverResponseBase } from '@shapediver/api.geometry-api-dto-v1';
import { vec3 } from 'gl-matrix';
import { IApi } from '../interfaces/IApi';
import { ISession } from '../interfaces/session/ISession';
import { IViewer } from '../interfaces/viewer/IViewer';
export declare class Api implements IApi {
    #private;
    readonly sceneTree: Tree;
    readonly sessions: {
        [key: string]: ISession;
    };
    readonly viewers: {
        [key: string]: IViewer;
    };
    constructor();
    get automaticUpdate(): boolean;
    set automaticUpdate(value: boolean);
    get autoScaling(): boolean;
    set autoScaling(value: boolean);
    get enableAR(): boolean;
    set enableAR(value: boolean);
    get globalRotation(): vec3;
    set globalRotation(value: vec3);
    get globalScale(): vec3;
    set globalScale(value: vec3);
    get globalTranslation(): vec3;
    set globalTranslation(value: vec3);
    get loggingLevel(): LOGGINGLEVEL;
    set loggingLevel(value: LOGGINGLEVEL);
    get showMessages(): boolean;
    set showMessages(value: boolean);
    addListener(type: string | MAINEVENTTYPE, cb: (event: IEvent) => void): string;
    applySettings(response: ShapeDiverResponseBase, sections?: {
        session: {
            parameter: {
                displayname: boolean;
                order: boolean;
                hidden: boolean;
            };
            export: {
                displayname: boolean;
                order: boolean;
                hidden: boolean;
            };
        };
        viewer: {
            scene: boolean;
            camera: boolean;
            light: boolean;
            environment: boolean;
        };
    }): Promise<void>;
    closeSession(id: string): Promise<boolean>;
    closeViewer(id: string): Promise<boolean>;
    convertSceneToGLTF(): Promise<Blob>;
    createSession(properties: {
        ticket: string;
        modelViewUrl: string;
        bearerToken?: string;
        primarySession?: boolean;
        id?: string;
        excludeViewers?: string[];
    }): Promise<ISession>;
    createViewer(properties?: {
        type?: RENDERERTYPE;
        visibility?: VISIBILITYMODE;
        canvas?: HTMLCanvasElement;
        id?: string;
        logo?: string;
    }): Promise<IViewer>;
    removeListener(id: string): boolean;
    update(): void;
    viewableInAR(): boolean;
    viewInAR(androidOptions?: {
        title?: string;
        resizable?: boolean;
        fallback_url?: string;
    }): Promise<void>;
}
//# sourceMappingURL=Api.d.ts.map