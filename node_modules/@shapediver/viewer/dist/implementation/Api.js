"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _Api_defaultLogo, _Api_eventEngine, _Api_geometryEngine, _Api_inputValidator, _Api_logger, _Api_sessionCallbacks, _Api_settingsEngine, _Api_stateEngine, _Api_systemInfo, _Api_uuidGenerator, _Api_viewerCallbacks, _Api_automaticUpdate;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const tsyringe_1 = require("tsyringe");
const viewer_data_engine_geometry_engine_1 = require("@shapediver/viewer.data-engine.geometry-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_rendering_engine_rendering_engine_2 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const viewer_settings_1 = require("@shapediver/viewer.settings");
const gl_matrix_1 = require("gl-matrix");
const StandardViewer_1 = require("./viewer/StandardViewer");
const Session_1 = require("./session/Session");
const AttributeViewer_1 = require("./viewer/AttributeViewer");
let Api = class Api {
    constructor() {
        _Api_defaultLogo.set(this, 'https://d2tuv7fwq0eipl.cloudfront.net/production/assets/img/icon_logo_white.png');
        _Api_eventEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine));
        _Api_geometryEngine.set(this, tsyringe_1.container.resolve(viewer_data_engine_geometry_engine_1.GeometryEngine));
        _Api_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _Api_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _Api_sessionCallbacks.set(this, {});
        _Api_settingsEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine));
        _Api_stateEngine.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine));
        _Api_systemInfo.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.SystemInfo));
        _Api_uuidGenerator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator));
        _Api_viewerCallbacks.set(this, {});
        this.sceneTree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this.sessions = {};
        this.viewers = {};
        _Api_automaticUpdate.set(this, true);
        try {
            __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySettingsRegistered.then(() => {
                this.showMessages = __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.showMessages;
            });
            console.log(`ShapeDiver-Viewer version: ${viewer_shared_build_data_1.build_data.build_version}`);
            __classPrivateFieldGet(this, _Api_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.SETTINGS.SETTINGS_REGISTERED, (e) => {
                const sessionEvent = e;
                if (sessionEvent.sessionId)
                    if (this.sessions[sessionEvent.sessionId].primarySession)
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySettingsRegistered.resolve(true);
                if (sessionEvent.sessionId)
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(e.sessionId + '_settings_registered').resolve(true);
            });
            __classPrivateFieldGet(this, _Api_eventEngine, "f").addListener(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_INITIALIZED, (e) => {
                const sessionEvent = e;
                if (sessionEvent.sessionId)
                    if (this.sessions[sessionEvent.sessionId].primarySession)
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionLoaded.resolve(true);
            });
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.constructor: Api created.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.constructor: Something unexpected happened.`, true);
        }
    }
    get automaticUpdate() {
        return __classPrivateFieldGet(this, _Api_automaticUpdate, "f");
    }
    set automaticUpdate(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.automaticUpdate: Updating automaticUpdate to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.automaticUpdate', value, 'boolean');
            __classPrivateFieldSet(this, _Api_automaticUpdate, value, "f");
            for (let s in this.sessions)
                __classPrivateFieldGet(this, _Api_automaticUpdate, "f") ? this.sceneTree.addNode(this.sessions[s].node) : this.sceneTree.removeNode(this.sessions[s].node);
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.automaticUpdate: automaticUpdate was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.automaticUpdate: Something unexpected happened.`, true);
        }
    }
    get autoScaling() {
        return __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.autoScaling;
    }
    set autoScaling(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.autoScaling: Updating autoScaling to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.autoScaling', value, 'boolean');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.autoScaling = value;
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.autoScaling: autoScaling was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.autoScaling: Something unexpected happened.`, true);
        }
    }
    get enableAR() {
        return __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.enable;
    }
    set enableAR(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.enableAR: Updating enableAR to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.enableAR', value, 'boolean');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").ar.enable = value;
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.enableAR: enableAR was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.enableAR: Something unexpected happened.`, true);
        }
    }
    get globalRotation() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation.z);
    }
    set globalRotation(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalRotation: Updating globalRotation to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalRotation', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.rotation = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalRotation: globalRotation was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.globalRotation: Something unexpected happened.`, true);
        }
    }
    get globalScale() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale.z);
    }
    set globalScale(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalScale: Updating globalScale to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalScale', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.scale = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalScale: globalScale was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.globalScale: Something unexpected happened.`, true);
        }
    }
    get globalTranslation() {
        return gl_matrix_1.vec3.fromValues(__classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.x, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.y, __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation.z);
    }
    set globalTranslation(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalTranslation: Updating globalTranslation to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.globalTranslation', value, 'vec3');
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.transformation.translation = { x: value[0], y: value[1], z: value[2] };
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.globalTranslation: globalTranslation was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.globalTranslation: Something unexpected happened.`, true);
        }
    }
    get loggingLevel() {
        return __classPrivateFieldGet(this, _Api_logger, "f").loggingLevel;
    }
    set loggingLevel(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.loggingLevel: Updating LoggingLevel to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.loggingLevel', value, 'enum', true, Object.values(viewer_shared_services_1.LOGGINGLEVEL));
            __classPrivateFieldGet(this, _Api_logger, "f").loggingLevel = value;
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.loggingLevel: LoggingLevel was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.loggingLevel: Something unexpected happened.`, true);
        }
    }
    get showMessages() {
        return __classPrivateFieldGet(this, _Api_logger, "f").showMessages;
    }
    set showMessages(value) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.showMessages: Updating ShowMessages to ${value}.`);
            __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, 'Api.showMessages', value, 'boolean');
            __classPrivateFieldGet(this, _Api_logger, "f").showMessages = value;
            __classPrivateFieldGet(this, _Api_settingsEngine, "f").general.showMessages = __classPrivateFieldGet(this, _Api_logger, "f").showMessages;
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.showMessages: ShowMessages was set to: ${value}`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.showMessages: Something unexpected happened.`, true);
        }
    }
    addListener(type, cb) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.addListener: Event Listener was registered for ${type}.`);
            __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.addListener: Event Listener was registered for ${type}.`);
            return __classPrivateFieldGet(this, _Api_eventEngine, "f").addListener(type, cb);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.addListener: Something unexpected happened.`, true);
        }
    }
    applySettings(response, sections = {
        session: {
            parameter: { displayname: true, order: true, hidden: true },
            export: { displayname: true, order: true, hidden: true }
        },
        viewer: { scene: true, camera: true, light: true, environment: true }
    }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!response.config)
                    throw new viewer_shared_services_1.SDError('Api.applySettings: No config object available.');
                try {
                    viewer_settings_1.validate(response.config);
                }
                catch (e) {
                    throw new viewer_shared_services_1.SDError('Api.applySettings: Was not able to validate config object.');
                }
                const settings = viewer_settings_1.convert(response.config, '3.0');
                const exportMappingUid = {};
                if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden)
                    if (response.exports)
                        for (let exportId in response.exports)
                            if (response.exports[exportId].uid !== undefined)
                                exportMappingUid[response.exports[exportId].uid] = exportId;
                const session = Object.values(this.sessions).filter((s) => { return s.primarySession; })[0];
                if (!session)
                    throw new viewer_shared_services_1.SDError('Api.applySettings: No primary session defined.');
                const currentSettings = __classPrivateFieldGet(this, _Api_settingsEngine, "f").settings;
                if (sections.session.parameter.displayname || sections.session.parameter.order || sections.session.parameter.hidden) {
                    for (let p in session.parameters) {
                        if (settings.session[p]) {
                            if (sections.session.parameter.displayname)
                                session.parameters[p].displayname = settings.session[p].displayname;
                            if (sections.session.parameter.order)
                                session.parameters[p].order = settings.session[p].order;
                            if (sections.session.parameter.hidden)
                                session.parameters[p].hidden = settings.session[p].hidden;
                        }
                    }
                }
                if (sections.session.export.displayname || sections.session.export.order || sections.session.export.hidden) {
                    for (let p in session.exports) {
                        let idForSettings = '';
                        if (settings.session[p]) {
                            idForSettings = p;
                        }
                        else {
                            const uid = session.exports[p].uid;
                            if (!uid)
                                continue;
                            if (!exportMappingUid[uid])
                                continue;
                            idForSettings = exportMappingUid[uid];
                        }
                        if (settings.session[idForSettings]) {
                            if (sections.session.parameter.displayname)
                                session.exports[p].displayname = settings.session[idForSettings].displayname;
                            if (sections.session.parameter.order)
                                session.exports[p].order = settings.session[idForSettings].order;
                            if (sections.session.parameter.hidden)
                                session.exports[p].hidden = settings.session[idForSettings].hidden;
                        }
                    }
                }
                if (sections.viewer.camera)
                    currentSettings.camera = settings.camera;
                if (sections.viewer.light)
                    currentSettings.light = settings.light;
                if (sections.viewer.scene) {
                    currentSettings.rendering.shadows = settings.rendering.shadows;
                    currentSettings.rendering.ambientOcclusion = settings.rendering.ambientOcclusion;
                    currentSettings.rendering.ambientOcclusionIntensity = settings.rendering.ambientOcclusionIntensity;
                    currentSettings.environmentGeometry.gridVisibility = settings.environmentGeometry.gridVisibility;
                    currentSettings.environmentGeometry.groundPlaneVisibility = settings.environmentGeometry.groundPlaneVisibility;
                    currentSettings.general.commitParameters = settings.general.commitParameters;
                    currentSettings.general.pointSize = settings.general.pointSize;
                }
                if (sections.viewer.environment) {
                    currentSettings.environment.clearAlpha = settings.environment.clearAlpha;
                    currentSettings.environment.clearColor = settings.environment.clearColor;
                    currentSettings.environment.map = settings.environment.map;
                    currentSettings.environment.mapAsBackground = settings.environment.mapAsBackground;
                }
                const promises = [];
                for (let v in this.viewers) {
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(v + '_settings_loaded').reset();
                    promises.push(new Promise(resolve => {
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(v + '_settings_loaded').then(() => {
                            resolve();
                        });
                    }));
                }
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SETTINGS.SETTINGS_REGISTERED_EXTERNAL, { sessionId: '' });
                return new Promise(resolve => Promise.all(promises).then(() => resolve()));
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.applySettings: Something unexpected happened.`, true);
            }
        });
    }
    closeSession(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.closeSession: Closing session ${id}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Api.closeSession', id, 'string');
                if (!this.sessions[id]) {
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.closeSession: Session with id ${id} was not registered.`);
                    return false;
                }
                const result = yield __classPrivateFieldGet(this, _Api_sessionCallbacks, "f")[id].close();
                if (__classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(id + '_settings_registered'))
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(id + '_settings_registered').reset();
                if (this.sessions[id].primarySession) {
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionLoaded.reset();
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySettingsRegistered.reset();
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").boundingBoxCreated.reset();
                    for (let v in this.viewers)
                        this.viewers[v].reset();
                }
                __classPrivateFieldGet(this, _Api_sessionCallbacks, "f")[id] = undefined;
                delete __classPrivateFieldGet(this, _Api_sessionCallbacks, "f")[id];
                this.sessions[id] = undefined;
                delete this.sessions[id];
                __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${id}): Session closed.`);
                for (let s in this.sessions) {
                    const session = this.sessions[s];
                    if (session.primarySessionRequest) {
                        yield __classPrivateFieldGet(this, _Api_sessionCallbacks, "f")[s].setAsPrimary();
                        __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Session(${s}): Initializing settings.`);
                        break;
                    }
                }
                return result;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Api.closeSession: Something unexpected happened.`, true);
            }
        });
    }
    closeViewer(id) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.closeViewer: Closing viewer ${id}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.closeViewer', id, 'string');
                if (!this.viewers[id]) {
                    __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.closeViewer: Viewer with id ${id} was not registered`);
                    return false;
                }
                if (__classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(id + '_settings_loaded'))
                    __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(id + '_settings_loaded').reset();
                __classPrivateFieldGet(this, _Api_stateEngine, "f").firstViewerShown.reset();
                const result = yield __classPrivateFieldGet(this, _Api_viewerCallbacks, "f")[id].close();
                __classPrivateFieldGet(this, _Api_viewerCallbacks, "f")[id] = undefined;
                delete __classPrivateFieldGet(this, _Api_viewerCallbacks, "f")[id];
                this.viewers[id] = undefined;
                delete this.viewers[id];
                __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Viewer(${id}): Viewer closed.`);
                return result;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, e, `Api.closeViewer: Something unexpected happened.`, true);
            }
        });
    }
    convertSceneToGLTF() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let scalingMatrix;
                if (this.autoScaling) {
                    const min = gl_matrix_1.vec3.clone(this.sceneTree.root.boundingBox.min);
                    const max = gl_matrix_1.vec3.clone(this.sceneTree.root.boundingBox.max);
                    const size = gl_matrix_1.vec3.fromValues(max[0] - min[0], max[1] - min[1], max[2] - min[2]);
                    const maxDimension = Math.max(size[0], Math.max(size[1], size[2]));
                    scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), gl_matrix_1.vec3.fromValues(1.0 / maxDimension, 1.0 / maxDimension, 1.0 / maxDimension));
                }
                else {
                    scalingMatrix = gl_matrix_1.mat4.fromScaling(gl_matrix_1.mat4.create(), this.globalScale);
                }
                const scalingMatrixID = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
                this.sceneTree.root.transformations.push({ id: scalingMatrixID, matrix: scalingMatrix });
                const result = yield __classPrivateFieldGet(this, _Api_geometryEngine, "f").convertSceneToGLTF(this.sceneTree.root);
                for (let i = 0; i < this.sceneTree.root.transformations.length; i++)
                    if (this.sceneTree.root.transformations[i].id === scalingMatrixID)
                        this.sceneTree.root.transformations.splice(i, 1);
                return new Blob([result], { type: 'application/octet-stream' });
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, e, `Api.convertSceneToGLTF: Something unexpected happened.`, true);
            }
        });
    }
    createSession(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession: Creating and initializing session with properties ${JSON.stringify(properties)}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties, 'object');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.ticket, 'string');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.modelViewUrl, 'string');
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.bearerToken, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.primarySession, 'boolean', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.excludeViewers, 'stringArray', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession`, properties.id, 'string', false);
                const sessionId = properties.id || tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
                if (this.sessions[sessionId]) {
                    const error = new viewer_shared_services_1.SDError(`Api.createSession: Session with this id (${sessionId}) already exists.`);
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, error.message);
                    throw error;
                }
                let sessionCallbacks = {};
                const session = new Session_1.Session(Object.assign({}, properties, { id: sessionId }), sessionCallbacks);
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CREATED, { sessionId });
                this.sessions[sessionId] = session;
                __classPrivateFieldGet(this, _Api_sessionCallbacks, "f")[sessionId] = sessionCallbacks;
                yield session.init();
                __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, `Api.createSession: Session(${session.id}) created.`);
                return session;
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Api.createSession: Something unexpected happened.`, true);
            }
        });
    }
    createViewer(properties) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer: Creating and initializing viewer with properties ${JSON.stringify(properties)}.`);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, 'Api.createViewer', properties, 'object', false);
                const prop = Object.assign({}, properties);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.type, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_1.RENDERERTYPE));
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.visibility, 'enum', false, Object.values(viewer_rendering_engine_rendering_engine_2.VISIBILITYMODE));
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.canvas, 'HTMLCanvasElement', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.id, 'string', false);
                __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer`, prop.logo, 'string', false);
                const viewerId = prop.id || tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
                if (this.viewers[viewerId]) {
                    const error = new viewer_shared_services_1.SDError(`Api.createViewer: Viewer with this id (${viewerId}) already exists.`);
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, error.message);
                    throw error;
                }
                let viewerCallbacks = {};
                const type = prop.type || viewer_rendering_engine_rendering_engine_1.RENDERERTYPE.STANDARD;
                let viewer;
                switch (type) {
                    case viewer_rendering_engine_rendering_engine_1.RENDERERTYPE.ATTRIBUTES:
                        viewer = new AttributeViewer_1.AttributeViewer({ id: viewerId, canvas: prop.canvas, visibility: prop.visibility || viewer_rendering_engine_rendering_engine_2.VISIBILITYMODE.SESSION, logo: prop.logo || __classPrivateFieldGet(this, _Api_defaultLogo, "f") }, viewerCallbacks);
                        break;
                    default:
                        viewer = new StandardViewer_1.StandardViewer({ id: viewerId, canvas: prop.canvas, visibility: prop.visibility || viewer_rendering_engine_rendering_engine_2.VISIBILITYMODE.SESSION, logo: prop.logo || __classPrivateFieldGet(this, _Api_defaultLogo, "f") }, viewerCallbacks);
                }
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.VIEWER_CREATED, { viewerId });
                if (prop.visibility === viewer_rendering_engine_rendering_engine_2.VISIBILITYMODE.SESSION && __classPrivateFieldGet(this, _Api_stateEngine, "f").primarySessionLoaded.resolved === true) {
                    yield new Promise(resolve => {
                        __classPrivateFieldGet(this, _Api_stateEngine, "f").getCustomState(viewerId + '_settings_loaded').then(() => resolve());
                    });
                }
                this.viewers[viewerId] = viewer;
                __classPrivateFieldGet(this, _Api_viewerCallbacks, "f")[viewerId] = viewerCallbacks;
                viewer.update();
                __classPrivateFieldGet(this, _Api_eventEngine, "f").emitEvent(viewer_shared_services_1.EVENTTYPE.VIEWER.VIEWER_INITIALIZED, { viewerId });
                __classPrivateFieldGet(this, _Api_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.createViewer: Viewer(${viewer.id}) created.`);
                return this.viewers[viewerId];
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, e, `Api.createViewer: Something unexpected happened.`, true);
            }
        });
    }
    removeListener(id) {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, `Api.removeListener: Removing event listener with id ${id}.`);
            return __classPrivateFieldGet(this, _Api_eventEngine, "f").removeListener(id);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.GENERAL, e, `Api.removeListener: Something unexpected happened.`, true);
        }
    }
    update() {
        try {
            __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `Api.update: Updating all viewers.`);
            for (let v in this.viewers)
                this.viewers[v].update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, e, `Api.update: Something unexpected happened.`, true);
        }
    }
    viewableInAR() {
        try {
            const isIOSSafari = __classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS && __classPrivateFieldGet(this, _Api_systemInfo, "f").isSafari;
            const isAndroidChrome = __classPrivateFieldGet(this, _Api_systemInfo, "f").isAndroid && __classPrivateFieldGet(this, _Api_systemInfo, "f").isChrome;
            if (isIOSSafari || isAndroidChrome)
                return true;
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS)
                throw new viewer_shared_services_1.SDError(`Api.viewableInAR: The AR feature on iOS is only supported in Safari. Please open this page again in Safari.`);
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isSafari)
                throw new viewer_shared_services_1.SDError(`Api.viewableInAR: The AR feature in Safari is only supported on iOS devices. Please open this page again on an iOS device.`);
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isAndroid)
                throw new viewer_shared_services_1.SDError(`Api.viewableInAR: The AR feature on Android is only supported in Chrome. Please open this page again in Chrome.`);
            if (__classPrivateFieldGet(this, _Api_systemInfo, "f").isChrome)
                throw new viewer_shared_services_1.SDError(`Api.viewableInAR: The AR feature in Chrome is only supported on Android devices. Please open this page again on an Android device.`);
            throw new viewer_shared_services_1.SDError(`Api.viewableInAR: The AR feature is only available on Android with Chrome, or on iOS with Safari.`);
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, e, `Api.viewableInAR: Something unexpected happened.`, true);
        }
    }
    viewInAR(androidOptions = { title: '', resizable: true, fallback_url: 'https://shapediver.com/' }) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const isIOSSafari = __classPrivateFieldGet(this, _Api_systemInfo, "f").isIOS && __classPrivateFieldGet(this, _Api_systemInfo, "f").isSafari;
                const isAndroidChrome = __classPrivateFieldGet(this, _Api_systemInfo, "f").isAndroid && __classPrivateFieldGet(this, _Api_systemInfo, "f").isChrome;
                if (!isIOSSafari && !isAndroidChrome)
                    throw new viewer_shared_services_1.SDError('Api.viewInAR: The device or browser is not supported for this functionality, please call "viewableInAR" for more information.');
                let arSession;
                for (let s in this.sessions)
                    if (this.sessions[s].canUploadGLTF)
                        arSession = this.sessions[s];
                if (!arSession) {
                    const error = new viewer_shared_services_1.SDError('Api.viewInAR: None of the sessions that are registered are capable of using the AR feature.');
                    __classPrivateFieldGet(this, _Api_logger, "f").warn(viewer_shared_services_1.LOGGINGTOPIC.AR, error.message);
                    throw error;
                }
                const busyModeID = __classPrivateFieldGet(this, _Api_uuidGenerator, "f").create();
                for (let v in this.viewers)
                    this.viewers[v].registerBusyMode(busyModeID);
                const file = yield arSession.uploadGLTF(isIOSSafari ? 'usdz' : 'gltf');
                if (isAndroidChrome) {
                    __classPrivateFieldGet(this, _Api_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.AR, `Api.viewInAR: Viewing in AR with properties ${JSON.stringify(androidOptions)}.`);
                    __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.AR, 'Api.viewInAR', androidOptions, 'object', false);
                    const prop = Object.assign({}, androidOptions);
                    __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.AR, `Api.viewInAR`, prop.title, 'string', false);
                    __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.AR, `Api.viewInAR`, prop.resizable, 'boolean', false);
                    __classPrivateFieldGet(this, _Api_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.AR, `Api.viewInAR`, prop.fallback_url, 'string', false);
                    const a = document.createElement('a');
                    a.href = `intent://arvr.google.com/scene-viewer/1.0?resizable=${androidOptions.resizable}&title=${androidOptions.title}&file=${file}&mode=ar_only#Intent;scheme=https;package=com.google.ar.core;action=android.intent.action.VIEW;S.browser_fallback_url=${androidOptions.fallback_url};end;`;
                    document.body.appendChild(a);
                    a.click();
                }
                else {
                    const a = document.createElement('a');
                    document.body.appendChild(a);
                    a.href = file;
                    a.rel = 'ar';
                    const img = document.createElement('img');
                    img.src = __classPrivateFieldGet(this, _Api_defaultLogo, "f");
                    a.appendChild(img);
                    a.click();
                }
                for (let v in this.viewers)
                    this.viewers[v].deregisterBusyMode(busyModeID);
            }
            catch (e) {
                if (e instanceof viewer_shared_services_1.SDError)
                    throw e;
                throw __classPrivateFieldGet(this, _Api_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.AR, e, `Api.viewInAR: Something unexpected happened.`, true);
            }
        });
    }
};
_Api_defaultLogo = new WeakMap(), _Api_eventEngine = new WeakMap(), _Api_geometryEngine = new WeakMap(), _Api_inputValidator = new WeakMap(), _Api_logger = new WeakMap(), _Api_sessionCallbacks = new WeakMap(), _Api_settingsEngine = new WeakMap(), _Api_stateEngine = new WeakMap(), _Api_systemInfo = new WeakMap(), _Api_uuidGenerator = new WeakMap(), _Api_viewerCallbacks = new WeakMap(), _Api_automaticUpdate = new WeakMap();
Api = __decorate([
    tsyringe_1.singleton(),
    __metadata("design:paramtypes", [])
], Api);
exports.Api = Api;
//# sourceMappingURL=Api.js.map