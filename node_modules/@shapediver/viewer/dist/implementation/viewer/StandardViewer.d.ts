import { CAMERATYPE } from '@shapediver/viewer.rendering-engine.camera-engine';
import { VISIBILITYMODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { vec3 } from 'gl-matrix';
import { AnimationData } from '@shapediver/viewer.shared.types';
import { ICamera } from '../../interfaces/viewer/camera/ICamera';
import { IOrthographicCamera } from '../../interfaces/viewer/camera/IOrthographicCamera';
import { IPerspectiveCamera } from '../../interfaces/viewer/camera/IPerspectiveCamera';
import { IStandardViewer } from '../../interfaces/viewer/IStandardViewer';
import { ILightScene } from '../../interfaces/viewer/lights/ILightScene';
export declare class StandardViewer implements IStandardViewer {
    #private;
    constructor(properties: {
        id: string;
        canvas?: HTMLCanvasElement;
        visibility: VISIBILITYMODE;
        logo: string;
    }, callbacks: any);
    get ambientOcclusion(): boolean;
    set ambientOcclusion(value: boolean);
    get ambientOcclusionIntensity(): number;
    get animations(): AnimationData[];
    set ambientOcclusionIntensity(value: number);
    get automaticResizing(): boolean;
    set automaticResizing(value: boolean);
    get beautyRenderBlendingDuration(): number;
    set beautyRenderBlendingDuration(value: number);
    get beautyRenderDelay(): number;
    set beautyRenderDelay(value: number);
    get blur(): boolean;
    set blur(value: boolean);
    get blurSceneWhenBusy(): boolean;
    set blurSceneWhenBusy(value: boolean);
    get camera(): ICamera | null;
    get cameras(): {
        [key: string]: ICamera;
    };
    get clearAlpha(): number;
    set clearAlpha(value: number);
    get clearColor(): string | number | vec3;
    set clearColor(value: string | number | vec3);
    get environmentMap(): string | string[];
    set environmentMap(value: string | string[]);
    get environmentMapAsBackground(): boolean;
    set environmentMapAsBackground(value: boolean);
    get environmentMapResolution(): string;
    set environmentMapResolution(value: string);
    get gridVisibility(): boolean;
    set gridVisibility(value: boolean);
    get groundPlaneVisibility(): boolean;
    set groundPlaneVisibility(value: boolean);
    get id(): string;
    get lightScene(): ILightScene | null;
    get lightSceneId(): string;
    set lightSceneId(value: string);
    get lightScenes(): {
        [key: string]: ILightScene;
    };
    get pointSize(): number;
    set pointSize(value: number);
    get renderingSettings(): {
        physicallyCorrectLights: boolean;
        envMapIntensity: number;
        envMapIntensityGroundPlane: number;
        groundPlaneColor: string;
        toneMapping: 0 | 1 | 2 | 3 | 4;
        toneMappingExposure: number;
        textureEncoding: 3000 | 3001 | 3002 | 3003 | 3004 | 3005 | 3006 | 3007;
        outputEncoding: 3000 | 3001 | 3002 | 3003 | 3004 | 3005 | 3006 | 3007;
    };
    set renderingSettings(value: {
        physicallyCorrectLights: boolean;
        envMapIntensity: number;
        envMapIntensityGroundPlane: number;
        groundPlaneColor: string;
        toneMapping: 0 | 1 | 2 | 3 | 4;
        toneMappingExposure: number;
        textureEncoding: 3000 | 3001 | 3002 | 3003 | 3004 | 3005 | 3006 | 3007;
        outputEncoding: 3000 | 3001 | 3002 | 3003 | 3004 | 3005 | 3006 | 3007;
    });
    get shadows(): boolean;
    set shadows(value: boolean);
    get show(): boolean;
    set show(value: boolean);
    get showStatistics(): boolean;
    set showStatistics(value: boolean);
    assignCamera(id: string): void;
    assignLightScene(id: string): boolean;
    createCamera(type: CAMERATYPE, id?: string): ICamera;
    createLightScene(properties?: {
        name?: string;
        standard?: boolean;
    }): ILightScene;
    createOrthographicCamera(id?: string): IOrthographicCamera;
    createPerspectiveCamera(id?: string): IPerspectiveCamera;
    deregisterBusyMode(value: string): boolean;
    getScreenshot(type?: string, quality?: number): string;
    registerBusyMode(value: string): boolean;
    removeCamera(id: string): boolean;
    removeLightScene(id: string): boolean;
    reset(): void;
    resize(width: number, height: number): void;
    update(): void;
}
//# sourceMappingURL=StandardViewer.d.ts.map