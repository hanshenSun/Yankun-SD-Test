import { PerspectiveCameraControls as PerspectiveCameraControlsLogic } from '@shapediver/viewer.rendering-engine.camera-engine';
import { vec3 } from 'gl-matrix';
import { IPerspectiveCameraControls } from '../../../../interfaces/viewer/camera/controls/IPerspectiveCameraControls';
import { IViewer } from '../../../../interfaces/viewer/IViewer';
export declare class PerspectiveCameraControls implements IPerspectiveCameraControls {
    #private;
    constructor(controls: PerspectiveCameraControlsLogic, viewer: IViewer);
    get autoRotationSpeed(): number;
    set autoRotationSpeed(value: number);
    get cubePositionRestriction(): {
        min: vec3;
        max: vec3;
    };
    set cubePositionRestriction(value: {
        min: vec3;
        max: vec3;
    });
    get cubeTargetRestriction(): {
        min: vec3;
        max: vec3;
    };
    set cubeTargetRestriction(value: {
        min: vec3;
        max: vec3;
    });
    get damping(): number;
    set damping(value: number);
    get enableAutoRotation(): boolean;
    set enableAutoRotation(value: boolean);
    get enableKeyPan(): boolean;
    set enableKeyPan(value: boolean);
    get enablePan(): boolean;
    set enablePan(value: boolean);
    get enableRotation(): boolean;
    set enableRotation(value: boolean);
    get enableZoom(): boolean;
    set enableZoom(value: boolean);
    get enabled(): boolean;
    set enabled(value: boolean);
    get input(): {
        keys: {
            up: number;
            down: number;
            left: number;
            right: number;
        };
        mouse: {
            rotate: number;
            zoom: number;
            pan: number;
        };
        touch: {
            rotate: number;
            zoom: number;
            pan: number;
        };
    };
    set input(value: {
        keys: {
            up: number;
            down: number;
            left: number;
            right: number;
        };
        mouse: {
            rotate: number;
            zoom: number;
            pan: number;
        };
        touch: {
            rotate: number;
            zoom: number;
            pan: number;
        };
    });
    get keyPanSpeed(): number;
    set keyPanSpeed(value: number);
    get movementSmoothness(): number;
    set movementSmoothness(value: number);
    get panSpeed(): number;
    set panSpeed(value: number);
    get rotationRestriction(): {
        minPolarAngle: number;
        maxPolarAngle: number;
        minAzimuthAngle: number;
        maxAzimuthAngle: number;
    };
    set rotationRestriction(value: {
        minPolarAngle: number;
        maxPolarAngle: number;
        minAzimuthAngle: number;
        maxAzimuthAngle: number;
    });
    get rotationSpeed(): number;
    set rotationSpeed(value: number);
    get spherePositionRestriction(): {
        center: vec3;
        radius: number;
    };
    set spherePositionRestriction(value: {
        center: vec3;
        radius: number;
    });
    get sphereTargetRestriction(): {
        center: vec3;
        radius: number;
    };
    set sphereTargetRestriction(value: {
        center: vec3;
        radius: number;
    });
    get zoomRestriction(): {
        minDistance: number;
        maxDistance: number;
    };
    set zoomRestriction(value: {
        minDistance: number;
        maxDistance: number;
    });
    get zoomSpeed(): number;
    set zoomSpeed(value: number);
}
//# sourceMappingURL=PerspectiveCameraControls.d.ts.map