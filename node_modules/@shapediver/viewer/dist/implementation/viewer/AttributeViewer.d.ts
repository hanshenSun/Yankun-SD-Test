import { CAMERATYPE } from '@shapediver/viewer.rendering-engine.camera-engine';
import { VISIBILITYMODE } from '@shapediver/viewer.rendering-engine.rendering-engine';
import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { ICamera } from '../../interfaces/viewer/camera/ICamera';
import { IOrthographicCamera } from '../../interfaces/viewer/camera/IOrthographicCamera';
import { IPerspectiveCamera } from '../../interfaces/viewer/camera/IPerspectiveCamera';
import { ILightScene } from '../../interfaces/viewer/lights/ILightScene';
import { SDTFAttributeVisualizationData, SDTFItemData, SDTFOverview } from '@shapediver/viewer.shared.types';
import { IAttributeViewer } from '../../interfaces/viewer/IAttributeViewer';
export declare class AttributeViewer implements IAttributeViewer {
    #private;
    constructor(properties: {
        id: string;
        canvas?: HTMLCanvasElement;
        visibility: VISIBILITYMODE;
        logo: string;
    }, callbacks: any);
    get automaticResizing(): boolean;
    set automaticResizing(value: boolean);
    get blur(): boolean;
    set blur(value: boolean);
    get blurSceneWhenBusy(): boolean;
    set blurSceneWhenBusy(value: boolean);
    get camera(): ICamera | null;
    get cameras(): {
        [key: string]: ICamera;
    };
    get convertSDTFItemToVisualizationData(): ((itemData: SDTFItemData, overview: SDTFOverview, visualizationAttributes: {
        [key: string]: boolean;
    }) => SDTFAttributeVisualizationData) | undefined;
    set convertSDTFItemToVisualizationData(value: ((itemData: SDTFItemData, overview: SDTFOverview, visualizationAttributes: {
        [key: string]: boolean;
    }) => SDTFAttributeVisualizationData) | undefined);
    get id(): string;
    get lightScene(): ILightScene | null;
    get lightSceneId(): string;
    set lightSceneId(value: string);
    get lightScenes(): {
        [key: string]: ILightScene;
    };
    get pointSize(): number;
    set pointSize(value: number);
    get show(): boolean;
    set show(value: boolean);
    get showStatistics(): boolean;
    set showStatistics(value: boolean);
    get visualizationAttributes(): {
        [key: string]: boolean;
    };
    set visualizationAttributes(value: {
        [key: string]: boolean;
    });
    assignCamera(id: string): void;
    assignLightScene(id: string): boolean;
    createCamera(type: CAMERATYPE, id?: string): ICamera;
    createLightScene(properties?: {
        name?: string;
        standard?: boolean;
    }): ILightScene;
    createOrthographicCamera(id?: string): IOrthographicCamera;
    createPerspectiveCamera(id?: string): IPerspectiveCamera;
    createSDTFOverview(node?: TreeNode): SDTFOverview;
    deregisterBusyMode(value: string): boolean;
    getScreenshot(type?: string, quality?: number): string;
    registerBusyMode(value: string): boolean;
    removeCamera(id: string): boolean;
    removeLightScene(id: string): boolean;
    reset(): void;
    resize(width: number, height: number): void;
    update(): void;
}
//# sourceMappingURL=AttributeViewer.d.ts.map