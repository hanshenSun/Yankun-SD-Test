"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _DirectionalLight_inputValidator, _DirectionalLight_light, _DirectionalLight_logger, _DirectionalLight_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectionalLight = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const AbstractLight_1 = require("./AbstractLight");
class DirectionalLight extends AbstractLight_1.AbstractLight {
    constructor(light, viewer) {
        super(light, viewer);
        _DirectionalLight_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _DirectionalLight_light.set(this, void 0);
        _DirectionalLight_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _DirectionalLight_viewer.set(this, void 0);
        __classPrivateFieldSet(this, _DirectionalLight_light, light, "f");
        __classPrivateFieldSet(this, _DirectionalLight_viewer, viewer, "f");
    }
    get castShadow() {
        return __classPrivateFieldGet(this, _DirectionalLight_light, "f").castShadow;
    }
    set castShadow(value) {
        try {
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).castShadow: Updating CastShadow to ${value}.`);
            __classPrivateFieldGet(this, _DirectionalLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).castShadow`, value, 'boolean');
            __classPrivateFieldGet(this, _DirectionalLight_light, "f").castShadow = value;
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).castShadow: castShadow was set to: ${value}`);
            __classPrivateFieldGet(this, _DirectionalLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _DirectionalLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).castShadow: Something unexpected happened.`, true);
        }
    }
    get direction() {
        return __classPrivateFieldGet(this, _DirectionalLight_light, "f").direction;
    }
    set direction(value) {
        try {
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).direction: Updating Direction to ${value}.`);
            __classPrivateFieldGet(this, _DirectionalLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).direction`, value, 'vec3');
            __classPrivateFieldGet(this, _DirectionalLight_light, "f").direction = value;
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).direction: direction was set to: ${value}`);
            __classPrivateFieldGet(this, _DirectionalLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _DirectionalLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).direction: Something unexpected happened.`, true);
        }
    }
    get shadowMapBias() {
        return __classPrivateFieldGet(this, _DirectionalLight_light, "f").shadowMapBias;
    }
    set shadowMapBias(value) {
        try {
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapBias: Updating ShadowMapBias to ${value}.`);
            __classPrivateFieldGet(this, _DirectionalLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapBias`, value, 'number');
            __classPrivateFieldGet(this, _DirectionalLight_light, "f").shadowMapBias = value;
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapBias: shadowMapBias was set to: ${value}`);
            __classPrivateFieldGet(this, _DirectionalLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _DirectionalLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).shadowMapBias: Something unexpected happened.`, true);
        }
    }
    get shadowMapResolution() {
        return __classPrivateFieldGet(this, _DirectionalLight_light, "f").shadowMapResolution;
    }
    set shadowMapResolution(value) {
        try {
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapResolution: Updating ShadowMapResolution to ${value}.`);
            __classPrivateFieldGet(this, _DirectionalLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapResolution`, value, 'number');
            __classPrivateFieldGet(this, _DirectionalLight_light, "f").shadowMapResolution = value;
            __classPrivateFieldGet(this, _DirectionalLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).shadowMapResolution: shadowMapResolution was set to: ${value}`);
            __classPrivateFieldGet(this, _DirectionalLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _DirectionalLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).shadowMapResolution: Something unexpected happened.`, true);
        }
    }
}
exports.DirectionalLight = DirectionalLight;
_DirectionalLight_inputValidator = new WeakMap(), _DirectionalLight_light = new WeakMap(), _DirectionalLight_logger = new WeakMap(), _DirectionalLight_viewer = new WeakMap();
//# sourceMappingURL=DirectionalLight.js.map