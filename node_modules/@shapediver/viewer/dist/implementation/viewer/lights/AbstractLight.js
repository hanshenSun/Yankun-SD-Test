"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AbstractLight_converter, _AbstractLight_inputValidator, _AbstractLight_light, _AbstractLight_logger, _AbstractLight_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractLight = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
class AbstractLight {
    constructor(light, viewer) {
        _AbstractLight_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _AbstractLight_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _AbstractLight_light.set(this, void 0);
        _AbstractLight_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _AbstractLight_viewer.set(this, void 0);
        __classPrivateFieldSet(this, _AbstractLight_light, light, "f");
        __classPrivateFieldSet(this, _AbstractLight_viewer, viewer, "f");
        __classPrivateFieldGet(this, _AbstractLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).constructor: Light api created.`);
    }
    get color() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").color;
    }
    set color(value) {
        try {
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).color: Updating Color to ${value}.`);
            __classPrivateFieldGet(this, _AbstractLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).color`, value, 'color');
            __classPrivateFieldGet(this, _AbstractLight_light, "f").color = __classPrivateFieldGet(this, _AbstractLight_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).color: color was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).color: Something unexpected happened.`, true);
        }
    }
    get id() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").id;
    }
    get intensity() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").intensity;
    }
    set intensity(value) {
        try {
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).intensity: Updating Intensity to ${value}.`);
            __classPrivateFieldGet(this, _AbstractLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).intensity`, value, 'positive');
            __classPrivateFieldGet(this, _AbstractLight_light, "f").intensity = value;
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).intensity: intensity was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).intensity: Something unexpected happened.`, true);
        }
    }
    get name() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").name;
    }
    set name(value) {
        try {
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).name: Updating Name to ${value}.`);
            __classPrivateFieldGet(this, _AbstractLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).name`, value, 'string', false);
            __classPrivateFieldGet(this, _AbstractLight_light, "f").name = value;
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).name: name was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).name: Something unexpected happened.`, true);
        }
    }
    get order() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").order;
    }
    set order(value) {
        try {
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).order: Updating Order to ${value}.`);
            __classPrivateFieldGet(this, _AbstractLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).order`, value, 'number', false);
            __classPrivateFieldGet(this, _AbstractLight_light, "f").order = value;
            __classPrivateFieldGet(this, _AbstractLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).order: order was set to: ${value}`);
            __classPrivateFieldGet(this, _AbstractLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _AbstractLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).order: Something unexpected happened.`, true);
        }
    }
    get type() {
        return __classPrivateFieldGet(this, _AbstractLight_light, "f").type;
    }
}
exports.AbstractLight = AbstractLight;
_AbstractLight_converter = new WeakMap(), _AbstractLight_inputValidator = new WeakMap(), _AbstractLight_light = new WeakMap(), _AbstractLight_logger = new WeakMap(), _AbstractLight_viewer = new WeakMap();
//# sourceMappingURL=AbstractLight.js.map