"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LightScene_converter, _LightScene_inputValidator, _LightScene_lightSceneLogic, _LightScene_lights, _LightScene_logger, _LightScene_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightScene = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const AmbientLight_1 = require("./AmbientLight");
const DirectionalLight_1 = require("./DirectionalLight");
const HemisphereLight_1 = require("./HemisphereLight");
const PointLight_1 = require("./PointLight");
const SpotLight_1 = require("./SpotLight");
class LightScene {
    constructor(lightSceneLogic, viewer) {
        _LightScene_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _LightScene_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _LightScene_lightSceneLogic.set(this, void 0);
        _LightScene_lights.set(this, {});
        _LightScene_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _LightScene_viewer.set(this, void 0);
        __classPrivateFieldSet(this, _LightScene_lightSceneLogic, lightSceneLogic, "f");
        __classPrivateFieldSet(this, _LightScene_viewer, viewer, "f");
        __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `LightScene(${this.id}).constructor: LightScene api created.`);
    }
    get id() {
        return __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").id;
    }
    get lights() {
        const lightLogics = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").lights;
        for (let l in lightLogics) {
            if (__classPrivateFieldGet(this, _LightScene_lights, "f")[l])
                continue;
            switch (lightLogics[l].type) {
                case viewer_rendering_engine_light_engine_1.LIGHTTYPE.AMBIENT:
                    __classPrivateFieldGet(this, _LightScene_lights, "f")[l] = new AmbientLight_1.AmbientLight(lightLogics[l], __classPrivateFieldGet(this, _LightScene_viewer, "f"));
                    break;
                case viewer_rendering_engine_light_engine_1.LIGHTTYPE.DIRECTIONAL:
                    __classPrivateFieldGet(this, _LightScene_lights, "f")[l] = new DirectionalLight_1.DirectionalLight(lightLogics[l], __classPrivateFieldGet(this, _LightScene_viewer, "f"));
                    break;
                case viewer_rendering_engine_light_engine_1.LIGHTTYPE.HEMISPHERE:
                    __classPrivateFieldGet(this, _LightScene_lights, "f")[l] = new HemisphereLight_1.HemisphereLight(lightLogics[l], __classPrivateFieldGet(this, _LightScene_viewer, "f"));
                    break;
                case viewer_rendering_engine_light_engine_1.LIGHTTYPE.POINT:
                    __classPrivateFieldGet(this, _LightScene_lights, "f")[l] = new PointLight_1.PointLight(lightLogics[l], __classPrivateFieldGet(this, _LightScene_viewer, "f"));
                    break;
                case viewer_rendering_engine_light_engine_1.LIGHTTYPE.SPOT:
                    __classPrivateFieldGet(this, _LightScene_lights, "f")[l] = new SpotLight_1.SpotLight(lightLogics[l], __classPrivateFieldGet(this, _LightScene_viewer, "f"));
                    break;
            }
        }
        for (let l in __classPrivateFieldGet(this, _LightScene_lights, "f")) {
            if (!lightLogics[l])
                delete __classPrivateFieldGet(this, _LightScene_lights, "f")[l];
        }
        return __classPrivateFieldGet(this, _LightScene_lights, "f");
    }
    get name() {
        return __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").name;
    }
    set name(value) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `LightScene(${this.id}).name: Updating Name to ${value}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `LightScene(${this.id}).name`, value, 'string', false);
            __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").name = value;
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `LightScene(${this.id}).name: name was set to: ${value}`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `LightScene(${this.id}).name: Something unexpected happened.`, true);
        }
    }
    get node() {
        return __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").node;
    }
    addAmbientLight(properties) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight: Adding light with properties ${properties}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight`, props.color, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight`, props.intensity, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight`, props.name, 'string', false);
            if (props.color !== undefined)
                props.color = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.color);
            const lightLogic = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").addAmbientLight(props);
            const light = this.lights[lightLogic.id];
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addAmbientLight: Ambient light with id ${light.id} created.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return light;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).addAmbientLight: Something unexpected happened.`, true);
        }
    }
    addDirectionalLight(properties) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight: Adding light with properties ${properties}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.color, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.intensity, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.direction, 'vec3', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.castShadow, 'boolean', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.shadowMapResolution, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.shadowMapBias, 'number', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight`, props.name, 'string', false);
            if (props.color !== undefined)
                props.color = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.color);
            const lightLogic = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").addDirectionalLight(props);
            const light = this.lights[lightLogic.id];
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addDirectionalLight: Directional light with id ${light.id} created.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return light;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).addDirectionalLight: Something unexpected happened.`, true);
        }
    }
    addHemisphereLight(properties) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight: Adding light with properties ${properties}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight`, props.color, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight`, props.groundColor, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight`, props.intensity, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight`, props.name, 'string', false);
            if (props.color !== undefined)
                props.color = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.color);
            if (props.groundColor !== undefined)
                props.groundColor = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.groundColor);
            const lightLogic = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").addHemisphereLight(props);
            const light = this.lights[lightLogic.id];
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addHemisphereLight: Hemisphere light with id ${light.id} created.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return light;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).addHemisphereLight: Something unexpected happened.`, true);
        }
    }
    addPointLight(properties) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight: Adding light with properties ${properties}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.color, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.intensity, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.position, 'vec3', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.distance, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.decay, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight`, props.name, 'string', false);
            if (props.color !== undefined)
                props.color = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.color);
            const lightLogic = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").addPointLight(props);
            const light = this.lights[lightLogic.id];
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addPointLight: Point light with id ${light.id} created.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return light;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).addPointLight: Something unexpected happened.`, true);
        }
    }
    addSpotLight(properties) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight: Adding light with properties ${properties}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, properties, 'object', false);
            const props = Object.assign({}, properties);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.color, 'color', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.intensity, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.position, 'vec3', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.target, 'vec3', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.distance, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.decay, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.angle, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.penumbra, 'positive', false);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight`, props.name, 'string', false);
            if (props.color !== undefined)
                props.color = __classPrivateFieldGet(this, _LightScene_converter, "f").toColor(props.color);
            const lightLogic = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").addSpotLight(props);
            const light = this.lights[lightLogic.id];
            __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).addSpotLight: Spot light with id ${light.id} created.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return light;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).addSpotLight: Something unexpected happened.`, true);
        }
    }
    removeLight(id) {
        try {
            __classPrivateFieldGet(this, _LightScene_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLight: Removing Light with id ${id}.`);
            __classPrivateFieldGet(this, _LightScene_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLight`, id, 'string');
            const r = __classPrivateFieldGet(this, _LightScene_lightSceneLogic, "f").removeLight(id);
            if (r)
                __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLight: Light with id ${id} removed.`);
            if (!r)
                __classPrivateFieldGet(this, _LightScene_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Viewer(${this.id}).removeLight: Could not remove light with id ${id}.`);
            __classPrivateFieldGet(this, _LightScene_viewer, "f").update();
            return r;
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _LightScene_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Viewer(${this.id}).removeLight: Something unexpected happened.`, true);
        }
    }
}
exports.LightScene = LightScene;
_LightScene_converter = new WeakMap(), _LightScene_inputValidator = new WeakMap(), _LightScene_lightSceneLogic = new WeakMap(), _LightScene_lights = new WeakMap(), _LightScene_logger = new WeakMap(), _LightScene_viewer = new WeakMap();
//# sourceMappingURL=LightScene.js.map