"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _HemisphereLight_converter, _HemisphereLight_inputValidator, _HemisphereLight_light, _HemisphereLight_logger, _HemisphereLight_viewer;
Object.defineProperty(exports, "__esModule", { value: true });
exports.HemisphereLight = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const AbstractLight_1 = require("./AbstractLight");
class HemisphereLight extends AbstractLight_1.AbstractLight {
    constructor(light, viewer) {
        super(light, viewer);
        _HemisphereLight_converter.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Converter));
        _HemisphereLight_inputValidator.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.InputValidator));
        _HemisphereLight_light.set(this, void 0);
        _HemisphereLight_logger.set(this, tsyringe_1.container.resolve(viewer_shared_services_1.Logger));
        _HemisphereLight_viewer.set(this, void 0);
        __classPrivateFieldSet(this, _HemisphereLight_light, light, "f");
        __classPrivateFieldSet(this, _HemisphereLight_viewer, viewer, "f");
    }
    get groundColor() {
        return __classPrivateFieldGet(this, _HemisphereLight_light, "f").groundColor;
    }
    set groundColor(value) {
        try {
            __classPrivateFieldGet(this, _HemisphereLight_logger, "f").debugLow(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).groundColor: Updating GroundColor to ${value}.`);
            __classPrivateFieldGet(this, _HemisphereLight_inputValidator, "f").validateAndError(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).groundColor`, value, 'color');
            __classPrivateFieldGet(this, _HemisphereLight_light, "f").groundColor = __classPrivateFieldGet(this, _HemisphereLight_converter, "f").toColor(value);
            __classPrivateFieldGet(this, _HemisphereLight_logger, "f").info(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, `Light(${this.id}).groundColor: groundColor was set to: ${value}`);
            __classPrivateFieldGet(this, _HemisphereLight_viewer, "f").update();
        }
        catch (e) {
            if (e instanceof viewer_shared_services_1.SDError)
                throw e;
            throw __classPrivateFieldGet(this, _HemisphereLight_logger, "f").error(viewer_shared_services_1.LOGGINGTOPIC.LIGHT, e, `Light(${this.id}).groundColor: Something unexpected happened.`, true);
        }
    }
}
exports.HemisphereLight = HemisphereLight;
_HemisphereLight_converter = new WeakMap(), _HemisphereLight_inputValidator = new WeakMap(), _HemisphereLight_light = new WeakMap(), _HemisphereLight_logger = new WeakMap(), _HemisphereLight_viewer = new WeakMap();
//# sourceMappingURL=HemisphereLight.js.map