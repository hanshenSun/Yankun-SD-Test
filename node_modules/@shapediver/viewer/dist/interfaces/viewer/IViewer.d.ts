import { CAMERATYPE } from '@shapediver/viewer.rendering-engine.camera-engine';
import { ICamera } from './camera/ICamera';
import { ILightScene } from './lights/ILightScene';
import { IOrthographicCamera } from './camera/IOrthographicCamera';
import { IPerspectiveCamera } from './camera/IPerspectiveCamera';
import { IRenderingEngine } from '@shapediver/viewer.rendering-engine.rendering-engine';
export interface IViewer extends IRenderingEngine {
    readonly camera: ICamera | null;
    readonly cameras: {
        [key: string]: ICamera;
    };
    readonly id: string;
    readonly lightScene: ILightScene | null;
    readonly lightScenes: {
        [key: string]: ILightScene;
    };
    assignCamera(id: string): void;
    assignLightScene(id: string): boolean;
    createCamera(type: CAMERATYPE, id?: string): ICamera;
    createLightScene(properties?: {
        name?: string;
        standard?: boolean;
    }): ILightScene;
    createOrthographicCamera(id?: string): IOrthographicCamera;
    createPerspectiveCamera(id?: string): IPerspectiveCamera;
    deregisterBusyMode(value: string): boolean;
    getScreenshot(type?: string, quality?: number): string;
    registerBusyMode(value: string): boolean;
    removeCamera(id: string): boolean;
    removeLightScene(id: string): boolean;
    reset(): void;
    resize(width: number, height: number): void;
    update(): void;
}
//# sourceMappingURL=IViewer.d.ts.map