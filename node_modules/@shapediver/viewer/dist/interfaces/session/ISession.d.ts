import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { IExport } from './IExport';
import { IOutput } from './IOutput';
import { IParameter } from './IParameter';
export interface ISession {
    readonly authorTicket: boolean | undefined;
    readonly canUploadGLTF: boolean;
    readonly exports: {
        [key: string]: IExport;
    };
    readonly id: string;
    readonly initialized: boolean;
    readonly modelViewUrl: string;
    readonly node: TreeNode;
    readonly outputs: {
        [key: string]: IOutput;
    };
    readonly parameters: {
        [key: string]: IParameter<any>;
    };
    readonly primarySession: boolean;
    readonly primarySessionRequest: boolean;
    readonly ticket: string;
    automaticUpdate: boolean;
    bearerToken: string | undefined;
    commitParameters: boolean;
    commitSettings: boolean;
    refreshBearerToken: () => string;
    canGoBack(): boolean;
    canGoForward(): boolean;
    customize(): Promise<TreeNode>;
    getExportById(id: string): IExport | null;
    getExportByName(name: string): IExport[];
    getExportByType(type: string): IExport[];
    getOutputById(id: string): IOutput | null;
    getOutputByName(name: string): IOutput[];
    getParameterById(id: string): IParameter<any> | null;
    getParameterByName(name: string): IParameter<any>[];
    getParameterByType(type: string): IParameter<any>[];
    goBack(): Promise<TreeNode>;
    goForward(): Promise<TreeNode>;
    init(): Promise<TreeNode>;
    saveDefaultParameters(): Promise<boolean>;
    saveSessionProperties(): Promise<boolean>;
    saveSettings(viewerId?: string): Promise<boolean>;
    uploadGLTF(responseType: 'gltf' | 'usdz'): Promise<string>;
}
//# sourceMappingURL=ISession.d.ts.map