import { AxiosResponse } from 'axios';
import { ShapeDiverResponseBase, ShapeDiverResponseExport, ShapeDiverResponseOutput, ShapeDiverResponseParameter } from '@shapediver/api.geometry-api-dto-v1';
import { SessionTreeNode } from './SessionTreeNode';
import { ISession } from '../interfaces/ISession';
export declare class Session implements ISession {
    private readonly _exports;
    private readonly _httpClient;
    private readonly _id;
    private readonly _logger;
    private readonly _modelViewUrl;
    private readonly _outputLoader;
    private readonly _outputs;
    private readonly _parameters;
    private readonly _parameterValues;
    private readonly _performanceEvaluator;
    private readonly _sessionEngineId;
    private readonly _ticket;
    private _authorTicket?;
    private _bearerToken?;
    private _closed;
    private _headers;
    private _initialized;
    private _refreshBearerToken;
    private _sessionResponse;
    private _settingsConfig;
    constructor(properties: {
        id: string;
        ticket: string;
        modelViewUrl: string;
        buildVersion: string;
        buildDate: string;
        bearerToken?: string;
        primarySession?: boolean;
    });
    get authorTicket(): boolean | undefined;
    set authorTicket(value: boolean | undefined);
    get bearerToken(): string | undefined;
    set bearerToken(value: string | undefined);
    get exports(): {
        [key: string]: ShapeDiverResponseExport;
    };
    get id(): string;
    get initialized(): boolean;
    get modelViewUrl(): string;
    get outputs(): {
        [key: string]: ShapeDiverResponseOutput;
    };
    get parameters(): {
        [key: string]: ShapeDiverResponseParameter;
    };
    get parameterValues(): {
        [key: string]: string;
    };
    set refreshBearerToken(value: () => string);
    get sessionResponse(): ShapeDiverResponseBase;
    get settingsConfig(): any;
    get ticket(): string;
    close(): Promise<boolean>;
    customize(cancelRequest: () => boolean): Promise<SessionTreeNode>;
    init(): Promise<SessionTreeNode>;
    mergeResponses(r1: ShapeDiverResponseBase, r2: ShapeDiverResponseBase, parameters?: {
        [key: string]: ShapeDiverResponseParameter;
    }, outputs?: {
        [key: string]: ShapeDiverResponseOutput;
    }, exports?: {
        [key: string]: ShapeDiverResponseExport;
    }): ShapeDiverResponseBase;
    saveDefaultParameters(): Promise<boolean>;
    saveParameterProperties(parameters: {
        [key: string]: {
            displayname: string;
            hidden: boolean;
            order: number;
            tooltip: string;
        };
    }): Promise<boolean>;
    saveExportProperties(exports: {
        [key: string]: {
            displayname: string;
            hidden: boolean;
            order: number;
            tooltip: string;
        };
    }): Promise<boolean>;
    saveOutputProperties(outputs: {
        [key: string]: {
            displayname: string;
            hidden: boolean;
            order: number;
            tooltip: string;
        };
    }): Promise<boolean>;
    saveSettings(json: any): Promise<boolean>;
    sessionCommunication(href: string, method: string | 'post' | 'get' | 'patch', data: any, contentType?: string): Promise<AxiosResponse<any>>;
    private customizeSession;
    private loadOutputs;
    private timeout;
}
//# sourceMappingURL=Session.d.ts.map