"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Session = void 0;
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const api_geometry_api_dto_v1_1 = require("@shapediver/api.geometry-api-dto-v1");
const OutputDelayException_1 = require("./OutputDelayException");
const OutputLoader_1 = require("./OutputLoader");
const SessionTreeNode_1 = require("./SessionTreeNode");
const SessionData_1 = require("./SessionData");
class Session {
    constructor(properties) {
        this._exports = {};
        this._httpClient = tsyringe_1.container.resolve(viewer_shared_services_1.HttpClient);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._outputs = {};
        this._parameters = {};
        this._parameterValues = {};
        this._performanceEvaluator = tsyringe_1.container.resolve(viewer_shared_services_1.PerformanceEvaluator);
        this._sessionEngineId = tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator).create();
        this._closed = false;
        this._headers = {
            "X-ShapeDiver-Origin": tsyringe_1.container.resolve(viewer_shared_services_1.SystemInfo).origin,
            "X-ShapeDiver-SessionEngineId": this._sessionEngineId,
            "X-ShapeDiver-BuildVersion": '',
            "X-ShapeDiver-BuildDate": ''
        };
        this._initialized = false;
        this._settingsConfig = {};
        this._id = properties.id;
        this._ticket = properties.ticket;
        this._modelViewUrl = properties.modelViewUrl;
        this._bearerToken = properties.bearerToken;
        this._headers['X-ShapeDiver-BuildDate'] = properties.buildDate;
        this._headers['X-ShapeDiver-BuildVersion'] = properties.buildVersion;
        this._outputLoader = new OutputLoader_1.OutputLoader();
    }
    get authorTicket() {
        return this._authorTicket;
    }
    set authorTicket(value) {
        this._authorTicket = value;
    }
    get bearerToken() {
        return this._bearerToken;
    }
    set bearerToken(value) {
        this._bearerToken = value;
    }
    get exports() {
        return this._exports;
    }
    get id() {
        return this._id;
    }
    get initialized() {
        return this._initialized;
    }
    get modelViewUrl() {
        return this._modelViewUrl;
    }
    get outputs() {
        return this._outputs;
    }
    get parameters() {
        return this._parameters;
    }
    get parameterValues() {
        return this._parameterValues;
    }
    set refreshBearerToken(value) {
        this._refreshBearerToken = value;
    }
    get sessionResponse() {
        return this._sessionResponse;
    }
    get settingsConfig() {
        return this._settingsConfig;
    }
    get ticket() {
        return this._ticket;
    }
    close() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            this._closed = true;
            if (this._initialized) {
                try {
                    yield this.sessionCommunication((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'close')[0].href, (_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'close')[0].method, null, 'application/json');
                }
                catch (e) {
                    if (e.response && e.response.status) {
                        this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.close: Session closing failed.`, e.response.status, false);
                    }
                    else {
                        this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.close: Session closing failed.`, false);
                    }
                    return false;
                }
            }
            return true;
        });
    }
    customize(cancelRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.customizeSession(this._parameterValues, cancelRequest);
        });
    }
    init() {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._initialized === true) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.init: Session already initialized.'));
                return this.loadOutputs(this._parameterValues);
            }
            try {
                let sessionResponse;
                try {
                    this._performanceEvaluator.startSection('sessionResponse');
                    sessionResponse = (yield this.sessionCommunication(this._modelViewUrl + "/ticket/" + this._ticket, 'post', null)).data;
                    this._performanceEvaluator.endSection('sessionResponse');
                }
                catch (e) {
                    if (e.response && e.response.status) {
                        this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.init: Session init failed.`, e.response.status, false);
                    }
                    else {
                        this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.init: Session init failed.`, false);
                    }
                    return new SessionTreeNode_1.SessionTreeNode();
                }
                this._settingsConfig = sessionResponse.config;
                this._parameters = {};
                this._outputs = {};
                this._exports = {};
                this._sessionResponse = this.mergeResponses(sessionResponse, sessionResponse, this._parameters, this._outputs, this._exports);
                this._authorTicket = !!(((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'defaultparam')[0]) && ((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'configure')[0]));
                this._initialized = true;
                return this.loadOutputs(this._parameterValues);
            }
            catch (e) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, 'Session.init: Something went wrong at session init.');
                return new SessionTreeNode_1.SessionTreeNode();
            }
        });
    }
    mergeResponses(r1, r2, parameters, outputs, exports) {
        if (!r1)
            r1 = { version: r2.version };
        if (r2.version)
            r1.version = r2.version;
        if (r2.collection)
            r1.collection = r2.collection;
        if (r2.actions) {
            for (let i = 0, len = r2.actions.length; i < len; i++) {
                r1.actions = r1.actions || [];
                if (r1.actions.findIndex((value) => value.name === r2.actions[i].name) === -1)
                    r1.actions.push(r2.actions[i]);
            }
        }
        if (r2.templates) {
            for (let i = 0, len = r2.templates.length; i < len; i++) {
                r1.templates = r1.templates || [];
                if (r1.templates.findIndex((value) => value.name === r2.actions[i].name) === -1)
                    r1.templates.push(r2.templates[i]);
            }
        }
        if (r2.config && !r1.config)
            r1.config = r2.config;
        if (r2.name && !r1.name)
            r1.name = r2.name;
        if (r2.parameters) {
            for (let parameterId in r2.parameters) {
                r1.parameters = r1.parameters || {};
                r1.parameters[parameterId] = r1.parameters[parameterId] || r2.parameters[parameterId];
            }
        }
        if (r2.outputs) {
            for (let outputId in r2.outputs) {
                r1.outputs = r1.outputs || {};
                if ('version' in r2.outputs[outputId] || !(r1.outputs[outputId] && 'version' in r1.outputs[outputId]))
                    r1.outputs[outputId] = r2.outputs[outputId];
            }
        }
        if (r2.exports) {
            for (let exportId in r2.exports) {
                r1.exports = r1.exports || {};
                if ('version' in r2.exports[exportId] || !(r1.exports[exportId] && 'version' in r1.exports[exportId]))
                    r1.exports[exportId] = r2.exports[exportId];
            }
        }
        if (parameters) {
            for (let parameterId in r1.parameters) {
                if (parameters[parameterId])
                    continue;
                parameters[parameterId] = r1.parameters[parameterId];
                parameters[parameterId].id = parameterId;
            }
        }
        if (exports) {
            for (let exportId in r1.exports)
                if (r1.exports[exportId].type === api_geometry_api_dto_v1_1.ShapeDiverResponseExportDefinitionType.EMAIL || r1.exports[exportId].type === api_geometry_api_dto_v1_1.ShapeDiverResponseExportDefinitionType.DOWNLOAD) {
                    exports[exportId] = r1.exports[exportId];
                    exports[exportId].id = exportId;
                }
        }
        if (outputs) {
            for (let outputId in r1.outputs) {
                outputs[outputId] = r1.outputs[outputId];
                outputs[outputId].id = outputId;
            }
        }
        return r1;
    }
    saveDefaultParameters() {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'defaultparam')[0])) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.saveDefaultParameters: Session has to be in edit mode to be able to save the settings.'));
                return false;
            }
            try {
                yield this.sessionCommunication((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'defaultparam')[0].href, (_c = this._sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'defaultparam')[0].method, this._parameterValues, 'application/json');
                return true;
            }
            catch (e) {
                if (e.response && e.response.status) {
                    this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveDefaultParameters: Saving of default parameters failed.`, e.response.status, false);
                }
                else {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveDefaultParameters: Saving of default parameters failed.`, false);
                }
                return false;
            }
        });
    }
    saveParameterProperties(parameters) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'parameter-definition')[0])) {
                this._logger.warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Session.saveParameterProperties: Session does not have the required action.');
                return false;
            }
            try {
                yield this.sessionCommunication((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'parameter-definition')[0].href, (_c = this._sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'parameter-definition')[0].method, parameters, 'application/json');
                return true;
            }
            catch (e) {
                if (e.response && e.response.status) {
                    this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveParameterProperties: Saving of parameter properties failed.`, e.response.status, false);
                }
                else {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveParameterProperties: Saving of parameter properties failed.`, false);
                }
                return false;
            }
        });
    }
    saveExportProperties(exports) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'export-definition')[0])) {
                this._logger.warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Session.saveExportProperties: Session does not have the required action.');
                return false;
            }
            try {
                yield this.sessionCommunication((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'export-definition')[0].href, (_c = this._sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'export-definition')[0].method, exports, 'application/json');
                return true;
            }
            catch (e) {
                if (e.response && e.response.status) {
                    this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveExportProperties: Saving of export properties failed.`, e.response.status, false);
                }
                else {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveExportProperties: Saving of export properties failed.`, false);
                }
                return false;
            }
        });
    }
    saveOutputProperties(outputs) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'output-definition')[0])) {
                this._logger.warn(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Session.saveOutputProperties: Session does not have the required action.');
                return false;
            }
            try {
                yield this.sessionCommunication((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'output-definition')[0].href, (_c = this._sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'output-definition')[0].method, outputs, 'application/json');
                return true;
            }
            catch (e) {
                if (e.response && e.response.status) {
                    this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveOutputProperties: Saving of output properties failed.`, e.response.status, false);
                }
                else {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveOutputProperties: Saving of output properties failed.`, false);
                }
                return false;
            }
        });
    }
    saveSettings(json) {
        var _a, _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'configure')[0])) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.saveSettings: Session has to be in edit mode to be able to save the settings.'));
                return false;
            }
            try {
                yield this.sessionCommunication((_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'configure')[0].href, (_c = this._sessionResponse.actions) === null || _c === void 0 ? void 0 : _c.filter(v => v.name === 'configure')[0].method, json, 'application/json');
                return true;
            }
            catch (e) {
                if (e.response && e.response.status) {
                    this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveSettings: Saving of settings failed.`, e.response.status, false);
                }
                else {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.saveSettings: Saving of settings failed.`, false);
                }
                return false;
            }
        });
    }
    sessionCommunication(href, method, data, contentType) {
        return __awaiter(this, void 0, void 0, function* () {
            let headers = this._bearerToken ? Object.assign({ "Authorization": this._bearerToken }, this._headers) : this._headers;
            if (contentType)
                headers = Object.assign({ "Content-Type": contentType }, this._headers);
            method = method.toLowerCase();
            if (method !== 'post' && method !== 'get' && method !== 'patch')
                throw this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session: Method ' + method + ' not recognized.'));
            try {
                return yield this._httpClient[method](href, { data, headers });
            }
            catch (e) {
                if (e.response && e.response.status && e.response.status === 403 && e.response.data && (e.response.data.error === 'SdJwtValidationError' || e.response.data.error === 'SdErrorUnauthorized')) {
                    if (!this._refreshBearerToken) {
                        this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.sessionCommunication: Session request failed. Bearer Token invalid, please try to supply a valid token or assign the "refreshBearerToken" callback.'));
                        throw e;
                    }
                    else {
                        const bearerToken = this.bearerToken;
                        const newToken = this._refreshBearerToken();
                        if (bearerToken === newToken) {
                            this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.sessionCommunication: Session request failed. Bearer Token invalid, callback "refreshBearerToken" supplied the same token.'));
                            throw e;
                        }
                        else {
                            this.bearerToken = newToken;
                            return this.sessionCommunication(href, method, data, contentType);
                        }
                    }
                }
                throw e;
            }
        });
    }
    customizeSession(parameters, cancelRequest) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (this._initialized === false) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, new viewer_shared_services_1.SDError('Session.customizeSession: Session not initialized.'));
                return new SessionTreeNode_1.SessionTreeNode();
            }
            try {
                let responseCustomize;
                try {
                    this._performanceEvaluator.startSection('sessionResponse');
                    responseCustomize = (yield this.sessionCommunication((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'customize')[0].href, 'post', parameters, 'application/json')).data;
                    this._performanceEvaluator.endSection('sessionResponse');
                    if (cancelRequest())
                        return new SessionTreeNode_1.SessionTreeNode();
                }
                catch (e) {
                    if (e.response && e.response.status) {
                        if (e.response && e.response.status && e.response.status === 410 && !this._closed) {
                            this._logger.info(viewer_shared_services_1.LOGGINGTOPIC.SESSION, 'Session.customizeSession: Session customization failed. Session expired. Re-initializing session.');
                            this._initialized = false;
                            yield this.init();
                            if (cancelRequest())
                                return new SessionTreeNode_1.SessionTreeNode();
                            return this.customizeSession(parameters, cancelRequest);
                        }
                    }
                    if (e.response && e.response.status) {
                        this._logger.httpError(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.customizeSession: Session customization failed.`, e.response.status, false);
                    }
                    else {
                        this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, `Session.customizeSession: Session customization failed.`, false);
                    }
                    return new SessionTreeNode_1.SessionTreeNode();
                }
                this._sessionResponse = this.mergeResponses(this._sessionResponse, responseCustomize, this._parameters, this._outputs, this._exports);
                return this.loadOutputs(parameters, cancelRequest);
            }
            catch (e) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.SESSION, e, 'Session.customizeSession: Something went wrong at session customization.');
                return new SessionTreeNode_1.SessionTreeNode();
            }
        });
    }
    loadOutputs(parameters, cancelRequest = () => false) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const o = Object.assign({}, this._outputs);
            try {
                const node = yield this._outputLoader.loadOutputs(this._sessionResponse, o);
                node.data.push(new SessionData_1.SessionData(this._sessionResponse));
                return node;
            }
            catch (e) {
                if (e instanceof OutputDelayException_1.OutputDelayException)
                    yield this.timeout(e.delay);
                if (cancelRequest())
                    return new SessionTreeNode_1.SessionTreeNode();
                let outputMapping = {};
                for (let output in o)
                    outputMapping[output] = o[output].version;
                let responseCache = (yield this.sessionCommunication((_a = this._sessionResponse.actions) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === 'cache')[0].href, (_b = this._sessionResponse.actions) === null || _b === void 0 ? void 0 : _b.filter(v => v.name === 'cache')[0].method.toLowerCase(), outputMapping, 'application/json')).data;
                if (cancelRequest())
                    return new SessionTreeNode_1.SessionTreeNode();
                this._sessionResponse = this.mergeResponses(this._sessionResponse, responseCache, this._parameters, this._outputs, this._exports);
                return yield this.loadOutputs(parameters, cancelRequest);
            }
        });
    }
    timeout(ms) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise(resolve => setTimeout(resolve, ms));
        });
    }
}
exports.Session = Session;
//# sourceMappingURL=Session.js.map