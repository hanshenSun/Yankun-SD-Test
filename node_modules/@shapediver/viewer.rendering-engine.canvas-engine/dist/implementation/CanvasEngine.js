"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CanvasEngine = void 0;
const tsyringe_1 = require("tsyringe");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const Canvas_1 = require("./Canvas");
let CanvasEngine = class CanvasEngine {
    constructor() {
        this._canvasDictionary = {};
        this._uuidGenerator = tsyringe_1.container.resolve(viewer_shared_services_1.UuidGenerator);
    }
    createCanvasObject(canvasDefinition, storageId) {
        storageId = storageId !== undefined && this._uuidGenerator.validate(storageId) ? storageId : this._uuidGenerator.create();
        if (canvasDefinition instanceof HTMLCanvasElement) {
            const canvasElement = canvasDefinition;
            if (!canvasElement.id)
                canvasElement.id = this._uuidGenerator.create();
            this._canvasDictionary[storageId] = new Canvas_1.Canvas(canvasElement.id, canvasDefinition, canvasElement);
            return storageId;
        }
        if (canvasDefinition) {
            const id = canvasDefinition;
            const canvasElement = document.getElementById(id);
            for (let canvasId in this._canvasDictionary)
                if (this._canvasDictionary[canvasId].id === id)
                    return canvasId;
            if (canvasElement instanceof HTMLCanvasElement) {
                this._canvasDictionary[storageId] = new Canvas_1.Canvas(id, canvasDefinition, canvasElement);
                return storageId;
            }
            else if (!canvasElement) {
                this._canvasDictionary[storageId] = new Canvas_1.Canvas(id, canvasDefinition);
                return storageId;
            }
        }
        this._canvasDictionary[storageId] = new Canvas_1.Canvas(storageId, canvasDefinition);
        return storageId;
    }
    getCanvas(storageId) {
        return this._canvasDictionary[storageId];
    }
};
CanvasEngine = __decorate([
    tsyringe_1.singleton()
], CanvasEngine);
exports.CanvasEngine = CanvasEngine;
//# sourceMappingURL=CanvasEngine.js.map