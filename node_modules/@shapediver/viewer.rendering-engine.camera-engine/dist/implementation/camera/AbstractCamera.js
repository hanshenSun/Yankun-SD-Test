"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AbstractCamera = void 0;
const detectIt = __importStar(require("detect-it"));
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
class AbstractCamera {
    constructor(_viewerId, _id, _canvas, _type) {
        this._viewerId = _viewerId;
        this._id = _id;
        this._canvas = _canvas;
        this._type = _type;
        this._autoAdjust = false;
        this._cameraMovementDuration = 800;
        this._defaultPosition = gl_matrix_1.vec3.create();
        this._defaultTarget = gl_matrix_1.vec3.create();
        this._enableCameraControls = true;
        this._far = 1000;
        this._near = 1;
        this._revertAtMouseUp = false;
        this._revertAtMouseUpDuration = 800;
        this._zoomExtentsFactor = 1;
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._settingsEngine = tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine);
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._boundingBox = new viewer_shared_math_1.Box();
        this._position = gl_matrix_1.vec3.create();
        this._target = gl_matrix_1.vec3.create();
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SESSION.SESSION_CUSTOMIZED, (e) => {
            const viewerEvent = e;
            if (viewerEvent.viewerId === this._viewerId)
                if (this._autoAdjust === true)
                    this.zoomTo();
        });
        const revert = () => {
            if (this._revertAtMouseUp === true)
                this.reset({ duration: this._revertAtMouseUpDuration });
        };
        this._canvas.addEventListener("mouseup", () => revert(), detectIt.supportsPassiveEvents ? { capture: false, passive: true } : false);
        this._canvas.addEventListener("mouseout", () => revert(), detectIt.supportsPassiveEvents ? { capture: false, passive: true } : false);
        this._canvas.addEventListener("touchend", () => revert(), detectIt.supportsPassiveEvents ? { capture: false, passive: true } : false);
        let zoomResizeTimeout;
        let mouseWheelEvent = /Firefox/i.test(navigator.userAgent) ? "DOMMouseScroll" : "mousewheel";
        this._canvas.addEventListener(mouseWheelEvent, () => {
            clearTimeout(zoomResizeTimeout);
            zoomResizeTimeout = setTimeout(revert, 300);
        }, detectIt.supportsPassiveEvents ? { capture: false, passive: true } : false);
    }
    get autoAdjust() {
        return this._autoAdjust;
    }
    set autoAdjust(value) {
        this._autoAdjust = value;
    }
    set boundingBox(value) {
        this._boundingBox = value;
    }
    get cameraMovementDuration() {
        return this._cameraMovementDuration;
    }
    set cameraMovementDuration(value) {
        this._cameraMovementDuration = value;
    }
    get controls() {
        return this._controls;
    }
    get defaultPosition() {
        return this._defaultPosition;
    }
    set defaultPosition(value) {
        this._defaultPosition = value;
    }
    get defaultTarget() {
        return this._defaultTarget;
    }
    set defaultTarget(value) {
        this._defaultTarget = value;
    }
    get enableCameraControls() {
        return this._enableCameraControls;
    }
    set enableCameraControls(value) {
        this._enableCameraControls = value;
    }
    get far() {
        return this._far;
    }
    set far(value) {
        this._far = value;
    }
    get id() {
        return this._id;
    }
    get near() {
        return this._near;
    }
    set near(value) {
        this._near = value;
    }
    get order() {
        return this._order;
    }
    set order(value) {
        this._order = value;
    }
    get position() {
        return this._position;
    }
    set position(value) {
        this._position = value;
        this._controls.position = value;
    }
    get revertAtMouseUp() {
        return this._revertAtMouseUp;
    }
    set revertAtMouseUp(value) {
        this._revertAtMouseUp = value;
    }
    get revertAtMouseUpDuration() {
        return this._revertAtMouseUpDuration;
    }
    set revertAtMouseUpDuration(value) {
        this._revertAtMouseUpDuration = value;
    }
    get target() {
        return this._target;
    }
    set target(value) {
        this._target = value;
        this._controls.target = value;
    }
    get type() {
        return this._type;
    }
    get zoomExtentsFactor() {
        return this._zoomExtentsFactor;
    }
    set zoomExtentsFactor(value) {
        this._zoomExtentsFactor = value;
    }
    animate(path, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (path.length === 0)
                return Promise.resolve(false);
            if (!this._controls.isWithinRestrictions(path[path.length - 1].position, path[path.length - 1].target))
                return Promise.resolve(false);
            if (!options)
                options = {};
            options.duration = options.duration >= 0 ? options.duration : this.cameraMovementDuration;
            const res = yield this._controls.animate(path, options);
            if (res) {
                this._position = this._controls.position;
                this._target = this._controls.target;
            }
            return res;
        });
    }
    reset(options) {
        if ((this.defaultPosition[0] === 0 && this.defaultPosition[1] === 0 && this.defaultPosition[2] === 0) && (this.defaultTarget[0] === 0 && this.defaultTarget[1] === 0 && this.defaultTarget[2] === 0)) {
            return this.zoomTo(undefined, options);
        }
        else {
            return this.set(gl_matrix_1.vec3.clone(this.defaultPosition), gl_matrix_1.vec3.clone(this.defaultTarget), options);
        }
    }
    set(position, target, options) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._controls.isWithinRestrictions(position, target))
                return Promise.resolve(false);
            if (!options)
                options = {};
            options.duration = options.duration >= 0 ? options.duration : this.cameraMovementDuration;
            const res = yield this._controls.animate([
                { position: gl_matrix_1.vec3.clone(this.position), target: gl_matrix_1.vec3.clone(this.target) },
                { position, target }
            ], options);
            if (res) {
                this._position = this._controls.position;
                this._target = this._controls.target;
            }
            return res;
        });
    }
    update(time) {
        const { position, target } = this._controls.update(time);
        this.position = gl_matrix_1.vec3.clone(position);
        this.target = gl_matrix_1.vec3.clone(target);
        return { position, target };
    }
    zoomTo(zoomTarget, options) {
        const { position, target } = this.getZoomPositionAndTarget(zoomTarget);
        return this.set(position, target, options);
    }
}
exports.AbstractCamera = AbstractCamera;
//# sourceMappingURL=AbstractCamera.js.map