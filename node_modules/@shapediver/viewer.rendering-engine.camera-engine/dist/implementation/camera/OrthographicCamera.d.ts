import { vec2, vec3 } from 'gl-matrix';
import { Box } from '@shapediver/viewer.shared.math';
import { AbstractCamera } from './AbstractCamera';
import { ORTHOGRAPHIC_CAMERA_DIRECTION } from '../../interfaces/camera/IOrthographicCamera';
export declare class OrthographicCamera extends AbstractCamera {
    private readonly _converter;
    private _bottom;
    private _left;
    private _right;
    private _top;
    private _up;
    private _direction;
    constructor(viewerId: string, id: string, canvas: HTMLCanvasElement);
    get bottom(): number;
    set bottom(value: number);
    get direction(): ORTHOGRAPHIC_CAMERA_DIRECTION;
    set direction(value: ORTHOGRAPHIC_CAMERA_DIRECTION);
    get left(): number;
    set left(value: number);
    get right(): number;
    set right(value: number);
    get top(): number;
    set top(value: number);
    get up(): vec3;
    set up(value: vec3);
    applySettings(): void;
    getZoomPositionAndTarget(zoomTarget?: Box): {
        position: vec3;
        target: vec3;
    };
    project(pos: vec3): vec2;
}
//# sourceMappingURL=OrthographicCamera.d.ts.map