"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OrthographicCameraControls = void 0;
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const __1 = require("../..");
const AbstractCameraControls_1 = require("./AbstractCameraControls");
const CameraControlsEventDistribution_1 = require("./orthographic/CameraControlsEventDistribution");
const CameraControlsLogic_1 = require("./orthographic/CameraControlsLogic");
class OrthographicCameraControls extends AbstractCameraControls_1.AbstractCameraControls {
    constructor(viewerId, camera, canvas, enabled) {
        super(viewerId, camera, canvas, enabled, __1.CAMERATYPE.ORTHOGRAPHIC);
        this._damping = 0.1;
        this._enableKeyPan = false;
        this._enablePan = true;
        this._enableZoom = true;
        this._input = { keys: { up: 38, down: 40, left: 37, right: 39 }, mouse: { rotate: 0, zoom: 1, pan: 2 }, touch: { rotate: 1, zoom: 2, pan: 3 }, };
        this._keyPanSpeed = 0.5;
        this._movementSmoothness = 0.5;
        this._panSpeed = 0.5;
        this._zoomSpeed = 0.5;
        this._settingsEngine = tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine);
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._cameraLogic = new CameraControlsLogic_1.CameraControlsLogic(this);
        this._cameraControlsEventDistribution = new CameraControlsEventDistribution_1.CameraControlsEventDistribution(this, this._cameraLogic);
    }
    applySettings() {
        const cameraSetting = this._settingsEngine.camera.cameras[this.camera.id];
        if (!cameraSetting)
            return;
        const controlsSettings = cameraSetting.controls;
        this.damping = controlsSettings.damping;
        this.enableKeyPan = controlsSettings.enableKeyPan;
        this.enablePan = controlsSettings.enablePan;
        this.enableZoom = controlsSettings.enableZoom;
        this.input = controlsSettings.input;
        this.keyPanSpeed = controlsSettings.keyPanSpeed;
        this.movementSmoothness = controlsSettings.movementSmoothness;
        this.panSpeed = controlsSettings.panSpeed;
        this.zoomSpeed = controlsSettings.zoomSpeed;
    }
    get damping() {
        return this._damping;
    }
    set damping(value) {
        this._damping = value;
    }
    get enableKeyPan() {
        return this._enableKeyPan;
    }
    set enableKeyPan(value) {
        this._enableKeyPan = value;
    }
    get enablePan() {
        return this._enablePan;
    }
    set enablePan(value) {
        this._enablePan = value;
    }
    get enableZoom() {
        return this._enableZoom;
    }
    set enableZoom(value) {
        this._enableZoom = value;
    }
    get input() {
        return this._input;
    }
    set input(value) {
        this._input = value;
    }
    get keyPanSpeed() {
        return this._keyPanSpeed;
    }
    set keyPanSpeed(value) {
        this._keyPanSpeed = value;
    }
    get movementSmoothness() {
        return this._movementSmoothness;
    }
    set movementSmoothness(value) {
        this._movementSmoothness = value;
    }
    get panSpeed() {
        return this._panSpeed;
    }
    set panSpeed(value) {
        this._panSpeed = value;
    }
    get zoomSpeed() {
        return this._zoomSpeed;
    }
    set zoomSpeed(value) {
        this._zoomSpeed = value;
    }
}
exports.OrthographicCameraControls = OrthographicCameraControls;
//# sourceMappingURL=OrthographicCameraControls.js.map