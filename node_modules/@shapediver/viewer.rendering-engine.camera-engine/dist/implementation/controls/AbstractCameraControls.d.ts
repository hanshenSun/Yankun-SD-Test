import { mat4, vec3 } from 'gl-matrix';
import { CAMERATYPE } from '../../interfaces/ICameraEngine';
import { ICamera } from '../../interfaces/camera/ICamera';
import { ICameraControlsUsage } from '../../interfaces/controls/ICameraControlsUsage';
import { ICameraControlsEventDistribution } from '../../interfaces/controls/ICameraControlsEventDistribution';
import { ICameraControlsLogic } from '../../interfaces/controls/ICameraControlsLogic';
export declare class AbstractCameraControls implements ICameraControlsUsage {
    private readonly _viewerId;
    private _camera;
    private _canvas;
    private _enabled;
    private readonly _cameraInterpolationManager;
    private readonly _eventEngine;
    private _manualInteraction;
    private _manualInteractionTransformations;
    private _moving;
    private _movingDuration;
    private _nonmanualInteraction;
    private _nonmanualInteractionTransformations;
    private _position;
    private _target;
    protected _cameraControlsEventDistribution: ICameraControlsEventDistribution;
    protected _cameraLogic: ICameraControlsLogic;
    constructor(_viewerId: string, _camera: ICamera, _canvas: HTMLCanvasElement, _enabled: boolean, type: CAMERATYPE);
    get cameraControlsEventDistribution(): ICameraControlsEventDistribution;
    get canvas(): HTMLCanvasElement;
    set canvas(value: HTMLCanvasElement);
    get enabled(): boolean;
    set enabled(value: boolean);
    get camera(): ICamera;
    set camera(value: ICamera);
    get position(): vec3;
    set position(value: vec3);
    get target(): vec3;
    set target(value: vec3);
    animate(path: {
        position: vec3;
        target: vec3;
    }[], options: {
        easing?: string | Function | undefined;
        duration?: number | undefined;
        default?: boolean | undefined;
        coordinates?: string | undefined;
        interpolation?: string | Function | undefined;
    }): Promise<boolean>;
    applyPositionVector(vector: vec3, manualInteraction?: boolean | undefined): void;
    applyTargetVector(vector: vec3, manualInteraction?: boolean | undefined): void;
    applyPositionMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void;
    applyTargetMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void;
    applyUpMatrix(matrix: mat4, manualInteraction?: boolean | undefined): void;
    getPositionWithManualUpdates(): vec3;
    getTargetWithManualUpdates(): vec3;
    getPositionWithUpdates(): vec3;
    getTargetWithUpdates(): vec3;
    isMoving(): boolean;
    isWithinRestrictions(position: vec3, target: vec3): boolean;
    reset(): void;
    update(time: number): {
        position: vec3;
        target: vec3;
    };
    private getPosition;
    private getTarget;
}
//# sourceMappingURL=AbstractCameraControls.d.ts.map