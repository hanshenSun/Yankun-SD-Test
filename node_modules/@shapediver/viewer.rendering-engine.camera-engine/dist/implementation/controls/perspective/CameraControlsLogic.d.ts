import { vec3 } from 'gl-matrix';
import { PerspectiveCameraControls } from '../PerspectiveCameraControls';
import { ICameraControlsLogic } from '../../../interfaces/controls/ICameraControlsLogic';
export declare class CameraControlsLogic implements ICameraControlsLogic {
    private readonly _controls;
    private _adjustedSettings;
    private _damping;
    private _dollyDelta;
    private _dollyEnd;
    private _dollyStart;
    private _panDelta;
    private _panEnd;
    private _panStart;
    private _quat;
    private _quatInverse;
    private _rotateDelta;
    private _rotateEnd;
    private _rotateStart;
    private _settingsAdjustments;
    private _touchAdjustments;
    constructor(_controls: PerspectiveCameraControls);
    isWithinRestrictions(position: vec3, target: vec3): boolean;
    pan(x: number, y: number, active: boolean, touch: boolean): void;
    reset(): void;
    restrict(position: vec3, target: vec3): {
        position: vec3;
        target: vec3;
    };
    rotate(x: number, y: number, active: boolean, touch: boolean): void;
    update(time: number, manualInteraction: boolean): void;
    zoom(x: number, y: number, active: boolean, touch: boolean): void;
    private panDeltaToOffset;
    private rotationSphericalToOffset;
    private zoomDistanceToOffset;
}
//# sourceMappingURL=CameraControlsLogic.d.ts.map