"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraMultipleInterpolation = void 0;
const gl_matrix_1 = require("gl-matrix");
class CameraMultipleInterpolation {
    constructor(_camera, _cameraControls, _path, _interpolationFunction) {
        this._camera = _camera;
        this._cameraControls = _cameraControls;
        this._path = _path;
        this._interpolationFunction = _interpolationFunction;
        this.end = {
            position: { x: [], y: [], z: [] },
            target: { x: [], y: [], z: [] }
        };
        for (let i = 0; i < this._path.length; i++) {
            this.end.position.x.push(this._path[i].position[0]);
            this.end.position.y.push(this._path[i].position[1]);
            this.end.position.z.push(this._path[i].position[2]);
            this.end.target.x.push(this._path[i].target[0]);
            this.end.target.y.push(this._path[i].target[1]);
            this.end.target.z.push(this._path[i].target[2]);
        }
    }
    onComplete(value) {
        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._path[this._path.length - 1].position[0], this._path[this._path.length - 1].position[1], this._path[this._path.length - 1].position[2]), this._cameraControls.getPositionWithUpdates());
        this._cameraControls.applyPositionVector(positionOffset);
        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), gl_matrix_1.vec3.fromValues(this._path[this._path.length - 1].target[0], this._path[this._path.length - 1].target[1], this._path[this._path.length - 1].target[2]), this._cameraControls.getTargetWithUpdates());
        this._cameraControls.applyTargetVector(targetOffset);
    }
    onStop(value) {
    }
    onUpdate(value) {
        let p = gl_matrix_1.vec3.fromValues(this._interpolationFunction(this.end.position.x, value.delta), this._interpolationFunction(this.end.position.y, value.delta), this._interpolationFunction(this.end.position.z, value.delta));
        let positionOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), p, this._cameraControls.getPositionWithUpdates());
        this._cameraControls.applyPositionVector(positionOffset);
        let t = gl_matrix_1.vec3.fromValues(this._interpolationFunction(this.end.target.x, value.delta), this._interpolationFunction(this.end.target.y, value.delta), this._interpolationFunction(this.end.target.z, value.delta));
        let targetOffset = gl_matrix_1.vec3.subtract(gl_matrix_1.vec3.create(), t, this._cameraControls.getTargetWithUpdates());
        this._cameraControls.applyTargetVector(targetOffset);
    }
}
exports.CameraMultipleInterpolation = CameraMultipleInterpolation;
//# sourceMappingURL=CameraMultipleInterpolation.js.map