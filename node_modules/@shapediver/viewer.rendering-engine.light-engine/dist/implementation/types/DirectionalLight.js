"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DirectionalLight = void 0;
const gl_matrix_1 = require("gl-matrix");
const ILight_1 = require("../../interface/ILight");
const AbstractLight_1 = require("../AbstractLight");
class DirectionalLight extends AbstractLight_1.AbstractLight {
    constructor(properties) {
        super({
            color: properties.color || '#ffffff',
            intensity: properties.intensity !== undefined ? properties.intensity : 0.5,
            type: ILight_1.LIGHTTYPE.DIRECTIONAL,
            name: properties.name,
            order: properties.order,
            id: properties.id
        });
        this._castShadow = false;
        this._direction = gl_matrix_1.vec3.fromValues(-1, 0, 1);
        this._shadowMapBias = -0.003;
        this._shadowMapResolution = 1024;
        if (properties.direction)
            this._direction = properties.direction;
        if (properties.castShadow)
            this._castShadow = properties.castShadow;
        if (properties.shadowMapResolution)
            this._shadowMapResolution = properties.shadowMapResolution;
        if (properties.shadowMapBias)
            this._shadowMapBias = properties.shadowMapBias;
    }
    get castShadow() {
        return this._castShadow;
    }
    set castShadow(value) {
        this._castShadow = value;
        this.updateVersion();
    }
    get direction() {
        return this._direction;
    }
    set direction(value) {
        this._direction = value;
        this.updateVersion();
    }
    get shadowMapBias() {
        return this._shadowMapBias;
    }
    set shadowMapBias(value) {
        this._shadowMapBias = value;
        this.updateVersion();
    }
    get shadowMapResolution() {
        return this._shadowMapResolution;
    }
    set shadowMapResolution(value) {
        this._shadowMapResolution = value;
        this.updateVersion();
    }
    clone() {
        return new DirectionalLight({
            color: this.color,
            intensity: this.intensity,
            direction: this.direction,
            castShadow: this.castShadow,
            shadowMapResolution: this.shadowMapResolution,
            shadowMapBias: this.shadowMapBias,
            name: this.name,
            order: this.order
        });
    }
}
exports.DirectionalLight = DirectionalLight;
//# sourceMappingURL=DirectionalLight.js.map