"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightScene = void 0;
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const AmbientLight_1 = require("./types/AmbientLight");
const DirectionalLight_1 = require("./types/DirectionalLight");
const HemisphereLight_1 = require("./types/HemisphereLight");
const PointLight_1 = require("./types/PointLight");
const SpotLight_1 = require("./types/SpotLight");
class LightScene {
    constructor(properties) {
        this._lights = {};
        this._id = properties.id;
        this._name = properties.name;
        this._node = new viewer_shared_node_tree_1.TreeNode(properties.name || properties.id);
    }
    get id() {
        return this._id;
    }
    get lights() {
        return this._lights;
    }
    get name() {
        return this._name;
    }
    set name(value) {
        this._name = value;
    }
    get node() {
        return this._node;
    }
    addAmbientLight(properties) {
        const light = new AmbientLight_1.AmbientLight(properties);
        this.addLight(light);
        return light;
    }
    addDirectionalLight(properties) {
        const light = new DirectionalLight_1.DirectionalLight(properties);
        this.addLight(light);
        return light;
    }
    addHemisphereLight(properties) {
        const light = new HemisphereLight_1.HemisphereLight(properties);
        this.addLight(light);
        return light;
    }
    addLight(light) {
        const node = new viewer_shared_node_tree_1.TreeNode(light.id);
        node.data.push(light);
        this._node.addChild(node);
        this._lights[light.id] = light;
        this._node.updateVersion();
    }
    addPointLight(properties) {
        const light = new PointLight_1.PointLight(properties);
        this.addLight(light);
        return light;
    }
    addSpotLight(properties) {
        const light = new SpotLight_1.SpotLight(properties);
        this.addLight(light);
        return light;
    }
    removeLight(id) {
        if (!this._lights[id])
            return false;
        for (let i = 0; i < this._node.children.length; i++) {
            const node = this._node.children[i];
            if (node && node.name === id) {
                this._node.removeChild(node);
                break;
            }
        }
        delete this._lights[id];
        this._node.updateVersion();
        return true;
    }
}
exports.LightScene = LightScene;
//# sourceMappingURL=LightScene.js.map