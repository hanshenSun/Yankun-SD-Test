"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validate = void 0;
const joi_1 = __importDefault(require("joi"));
const orbitControlsSchema = joi_1.default.object({
    autoRotationSpeed: joi_1.default.number(),
    damping: joi_1.default.number().min(0),
    enableAutoRotation: joi_1.default.boolean(),
    enableKeyPan: joi_1.default.boolean(),
    enablePan: joi_1.default.boolean(),
    enableRotation: joi_1.default.boolean(),
    enableZoom: joi_1.default.boolean(),
    input: { keys: { up: joi_1.default.number(), down: joi_1.default.number(), left: joi_1.default.number(), right: joi_1.default.number() }, mouse: { rotate: joi_1.default.number(), zoom: joi_1.default.number(), pan: joi_1.default.number() }, touch: { rotate: joi_1.default.number(), zoom: joi_1.default.number(), pan: joi_1.default.number() }, },
    keyPanSpeed: joi_1.default.number().min(0).max(1),
    movementSmoothness: joi_1.default.number().min(0).max(1),
    restrictions: {
        position: {
            cube: { min: { x: joi_1.default.number().allow(-Infinity), y: joi_1.default.number().allow(-Infinity), z: joi_1.default.number().allow(-Infinity) }, max: { x: joi_1.default.number().allow(Infinity), y: joi_1.default.number().allow(Infinity), z: joi_1.default.number().allow(Infinity) } },
            sphere: { center: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() }, radius: joi_1.default.number().allow(Infinity) },
        },
        target: {
            cube: { min: { x: joi_1.default.number().allow(-Infinity), y: joi_1.default.number().allow(-Infinity), z: joi_1.default.number().allow(-Infinity) }, max: { x: joi_1.default.number().allow(Infinity), y: joi_1.default.number().allow(Infinity), z: joi_1.default.number().allow(Infinity) } },
            sphere: { center: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() }, radius: joi_1.default.number().allow(Infinity) },
        },
        rotation: { minPolarAngle: joi_1.default.number(), maxPolarAngle: joi_1.default.number(), minAzimuthAngle: joi_1.default.number().allow(-Infinity), maxAzimuthAngle: joi_1.default.number().allow(Infinity) },
        zoom: { minDistance: joi_1.default.number(), maxDistance: joi_1.default.number().allow(Infinity) },
    },
    rotationSpeed: joi_1.default.number().min(0).max(1),
    panSpeed: joi_1.default.number().min(0).max(1),
    zoomSpeed: joi_1.default.number().min(0).max(1),
});
const orthographicControlsSchema = joi_1.default.object({
    damping: joi_1.default.number().min(0).max(1),
    enableKeyPan: joi_1.default.boolean(),
    enablePan: joi_1.default.boolean(),
    enableZoom: joi_1.default.boolean(),
    input: { keys: { up: joi_1.default.number(), down: joi_1.default.number(), left: joi_1.default.number(), right: joi_1.default.number() }, mouse: { rotate: joi_1.default.number(), zoom: joi_1.default.number(), pan: joi_1.default.number() }, touch: { rotate: joi_1.default.number(), zoom: joi_1.default.number(), pan: joi_1.default.number() }, },
    keyPanSpeed: joi_1.default.number().min(0).max(1),
    movementSmoothness: joi_1.default.number().min(0).max(1),
    panSpeed: joi_1.default.number().min(0).max(1),
    zoomSpeed: joi_1.default.number().min(0).max(1),
});
const orthographicCameraSchema = joi_1.default.object({
    name: joi_1.default.string().optional(),
    type: joi_1.default.string(),
    autoAdjust: joi_1.default.boolean(),
    cameraMovementDuration: joi_1.default.number().min(0),
    controls: orthographicControlsSchema,
    enableCameraControls: joi_1.default.boolean(),
    position: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    revertAtMouseUp: joi_1.default.boolean(),
    revertAtMouseUpDuration: joi_1.default.number().min(0),
    target: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    zoomExtentsFactor: joi_1.default.number().positive(),
});
const perspectiveCameraSchema = joi_1.default.object({
    name: joi_1.default.string().optional(),
    type: joi_1.default.string(),
    autoAdjust: joi_1.default.boolean(),
    cameraMovementDuration: joi_1.default.number().min(0),
    controls: orbitControlsSchema,
    enableCameraControls: joi_1.default.boolean(),
    fov: joi_1.default.number().positive(),
    position: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    revertAtMouseUp: joi_1.default.boolean(),
    revertAtMouseUpDuration: joi_1.default.number().min(0),
    target: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    zoomExtentsFactor: joi_1.default.number().positive(),
});
const cameraSchema = joi_1.default.object().pattern(/^/, [perspectiveCameraSchema, orthographicCameraSchema]);
const ambientLightSchema = joi_1.default.object({
    color: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
    intensity: joi_1.default.number().min(0)
});
const directionalLightSchema = joi_1.default.object({
    color: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
    intensity: joi_1.default.number().min(0),
    direction: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    castShadow: joi_1.default.boolean(),
    shadowMapResolution: joi_1.default.number().optional(),
    shadowMapBias: joi_1.default.number().optional()
});
const hemisphereLightSchema = joi_1.default.object({
    skyColor: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
    intensity: joi_1.default.number().min(0),
    groundColor: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
});
const pointLightSchema = joi_1.default.object({
    color: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
    intensity: joi_1.default.number().min(0),
    position: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    distance: joi_1.default.number().min(0),
    decay: joi_1.default.number().min(0),
});
const spotLightSchema = joi_1.default.object({
    color: joi_1.default.alternatives([joi_1.default.number(), joi_1.default.string()]),
    intensity: joi_1.default.number().min(0),
    position: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    target: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
    distance: joi_1.default.number().min(0),
    decay: joi_1.default.number().min(0),
    angle: joi_1.default.number().min(0),
    penumbra: joi_1.default.number().min(0),
});
const lightSchema = joi_1.default.object().pattern(/^/, [
    joi_1.default.object({
        name: joi_1.default.string().optional(),
        lights: joi_1.default.object().pattern(/^/, [
            joi_1.default.object({
                name: joi_1.default.string().optional(),
                type: joi_1.default.string(),
                order: joi_1.default.number().optional(),
                properties: joi_1.default.alternatives([ambientLightSchema, directionalLightSchema, hemisphereLightSchema, pointLightSchema, spotLightSchema])
            })
        ])
    })
]);
const schema = joi_1.default.object({
    build_date: joi_1.default.string().allow('').optional(),
    build_version: joi_1.default.string().allow('').optional(),
    settings_version: joi_1.default.string(),
    ar: joi_1.default.object({
        enable: joi_1.default.boolean(),
        autoScaling: joi_1.default.boolean(),
    }).optional(),
    camera: {
        cameraId: joi_1.default.string().allow(''),
        cameras: cameraSchema
    },
    environment: {
        clearAlpha: joi_1.default.number().min(0).max(1),
        clearColor: joi_1.default.string(),
        map: joi_1.default.alternatives([joi_1.default.string().allow(''), joi_1.default.array().items(joi_1.default.string())]),
        mapAsBackground: joi_1.default.boolean(),
        mapResolution: joi_1.default.string()
    },
    environmentGeometry: {
        gridVisibility: joi_1.default.boolean(),
        groundPlaneVisibility: joi_1.default.boolean(),
    },
    general: {
        transformation: {
            scale: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
            translation: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() },
            rotation: { x: joi_1.default.number(), y: joi_1.default.number(), z: joi_1.default.number() }
        },
        blurWhenBusy: joi_1.default.boolean(),
        commitSettings: joi_1.default.boolean(),
        commitParameters: joi_1.default.boolean(),
        pointSize: joi_1.default.number().min(0),
        showMessages: joi_1.default.boolean(),
    },
    light: {
        lightSceneId: joi_1.default.string().allow(''),
        lightScenes: lightSchema,
    },
    rendering: {
        ambientOcclusion: joi_1.default.boolean(),
        ambientOcclusionIntensity: joi_1.default.number().positive().max(1),
        beautyRenderDelay: joi_1.default.number().min(0),
        beautyRenderBlendingDuration: joi_1.default.number().min(0),
        shadows: joi_1.default.boolean(),
    },
    session: joi_1.default.object().pattern(/^/, [
        joi_1.default.object({
            order: joi_1.default.number(),
            displayname: joi_1.default.string().allow(''),
            hidden: joi_1.default.boolean()
        })
    ]),
}).options({ presence: 'required' });
const validate = (s) => {
    const result = joi_1.default.attempt(s, schema);
    s = result.value;
};
exports.validate = validate;
//# sourceMappingURL=Validator.js.map