export namespace DepthLimitedBlurShader {
    namespace defines {
        const KERNEL_RADIUS: number;
        const DEPTH_PACKING: number;
        const PERSPECTIVE_CAMERA: number;
    }
    namespace uniforms {
        namespace tDiffuse {
            const value: null;
        }
        namespace size {
            const value_1: Vector2;
            export { value_1 as value };
        }
        namespace sampleUvOffsets {
            const value_2: Vector2[];
            export { value_2 as value };
        }
        namespace sampleWeights {
            const value_3: number[];
            export { value_3 as value };
        }
        namespace tDepth {
            const value_4: null;
            export { value_4 as value };
        }
        namespace cameraNear {
            const value_5: number;
            export { value_5 as value };
        }
        namespace cameraFar {
            const value_6: number;
            export { value_6 as value };
        }
        namespace depthCutoff {
            const value_7: number;
            export { value_7 as value };
        }
    }
    const vertexShader: string;
    const fragmentShader: string;
}
export namespace BlurShaderUtils {
    function createSampleWeights(kernelRadius: any, stdDev: any): number[];
    function createSampleOffsets(kernelRadius: any, uvIncrement: any): any[];
    function configure(material: any, kernelRadius: any, stdDev: any, uvIncrement: any): void;
}
import { Vector2 } from "three/src/math/Vector2";
//# sourceMappingURL=DepthLimitedBlurShader.d.ts.map