"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FullScreenQuad = exports.Pass = exports.EffectComposer = void 0;
const three_1 = require("three");
const CopyShader_js_1 = require("../shaders/CopyShader.js");
const ShaderPass_js_1 = require("../postprocessing/ShaderPass.js");
const MaskPass_js_1 = require("../postprocessing/MaskPass.js");
const MaskPass_js_2 = require("../postprocessing/MaskPass.js");
class EffectComposer {
    constructor(renderer, renderTarget) {
        this.renderer = renderer;
        if (renderTarget === undefined) {
            const parameters = {
                minFilter: three_1.LinearFilter,
                magFilter: three_1.LinearFilter,
                format: three_1.RGBAFormat
            };
            const size = renderer.getSize(new three_1.Vector2());
            this._pixelRatio = renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget = new three_1.WebGLRenderTarget(this._width * this._pixelRatio, this._height * this._pixelRatio, parameters);
            renderTarget.texture.name = 'EffectComposer.rt1';
        }
        else {
            this._pixelRatio = 1;
            this._width = renderTarget.width;
            this._height = renderTarget.height;
        }
        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();
        this.renderTarget2.texture.name = 'EffectComposer.rt2';
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
        this.renderToScreen = true;
        this.passes = [];
        if (CopyShader_js_1.CopyShader === undefined) {
            console.error('THREE.EffectComposer relies on CopyShader');
        }
        if (ShaderPass_js_1.ShaderPass === undefined) {
            console.error('THREE.EffectComposer relies on ShaderPass');
        }
        this.copyPass = new ShaderPass_js_1.ShaderPass(CopyShader_js_1.CopyShader);
        this.clock = new three_1.Clock();
    }
    swapBuffers() {
        const tmp = this.readBuffer;
        this.readBuffer = this.writeBuffer;
        this.writeBuffer = tmp;
    }
    addPass(pass) {
        this.passes.push(pass);
        pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    insertPass(pass, index) {
        this.passes.splice(index, 0, pass);
        pass.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
    }
    removePass(pass) {
        const index = this.passes.indexOf(pass);
        if (index !== -1) {
            this.passes.splice(index, 1);
        }
    }
    isLastEnabledPass(passIndex) {
        for (let i = passIndex + 1; i < this.passes.length; i++) {
            if (this.passes[i].enabled) {
                return false;
            }
        }
        return true;
    }
    render(deltaTime) {
        if (deltaTime === undefined) {
            deltaTime = this.clock.getDelta();
        }
        const currentRenderTarget = this.renderer.getRenderTarget();
        let maskActive = false;
        for (let i = 0, il = this.passes.length; i < il; i++) {
            const pass = this.passes[i];
            if (pass.enabled === false)
                continue;
            pass.renderToScreen = (this.renderToScreen && this.isLastEnabledPass(i));
            pass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive);
            if (pass.needsSwap) {
                if (maskActive) {
                    const context = this.renderer.getContext();
                    const stencil = this.renderer.state.buffers.stencil;
                    stencil.setFunc(context.NOTEQUAL, 1, 0xffffffff);
                    this.copyPass.render(this.renderer, this.writeBuffer, this.readBuffer, deltaTime);
                    stencil.setFunc(context.EQUAL, 1, 0xffffffff);
                }
                this.swapBuffers();
            }
            if (MaskPass_js_1.MaskPass !== undefined) {
                if (pass instanceof MaskPass_js_1.MaskPass) {
                    maskActive = true;
                }
                else if (pass instanceof MaskPass_js_2.ClearMaskPass) {
                    maskActive = false;
                }
            }
        }
        this.renderer.setRenderTarget(currentRenderTarget);
    }
    reset(renderTarget) {
        if (renderTarget === undefined) {
            const size = this.renderer.getSize(new three_1.Vector2());
            this._pixelRatio = this.renderer.getPixelRatio();
            this._width = size.width;
            this._height = size.height;
            renderTarget = this.renderTarget1.clone();
            renderTarget.setSize(this._width * this._pixelRatio, this._height * this._pixelRatio);
        }
        this.renderTarget1.dispose();
        this.renderTarget2.dispose();
        this.renderTarget1 = renderTarget;
        this.renderTarget2 = renderTarget.clone();
        this.writeBuffer = this.renderTarget1;
        this.readBuffer = this.renderTarget2;
    }
    setSize(width, height) {
        this._width = width;
        this._height = height;
        const effectiveWidth = this._width * this._pixelRatio;
        const effectiveHeight = this._height * this._pixelRatio;
        this.renderTarget1.setSize(effectiveWidth, effectiveHeight);
        this.renderTarget2.setSize(effectiveWidth, effectiveHeight);
        for (let i = 0; i < this.passes.length; i++) {
            this.passes[i].setSize(effectiveWidth, effectiveHeight);
        }
    }
    setPixelRatio(pixelRatio) {
        this._pixelRatio = pixelRatio;
        this.setSize(this._width, this._height);
    }
}
exports.EffectComposer = EffectComposer;
class Pass {
    constructor() {
        this.enabled = true;
        this.needsSwap = true;
        this.clear = false;
        this.renderToScreen = false;
    }
    setSize() { }
    render() {
        console.error('THREE.Pass: .render() must be implemented in derived pass.');
    }
}
exports.Pass = Pass;
const _camera = new three_1.OrthographicCamera(-1, 1, 1, -1, 0, 1);
const _geometry = new three_1.BufferGeometry();
_geometry.setAttribute('position', new three_1.Float32BufferAttribute([-1, 3, 0, -1, -1, 0, 3, -1, 0], 3));
_geometry.setAttribute('uv', new three_1.Float32BufferAttribute([0, 2, 0, 0, 2, 0], 2));
class FullScreenQuad {
    constructor(material) {
        this._mesh = new three_1.Mesh(_geometry, material);
    }
    dispose() {
        this._mesh.geometry.dispose();
    }
    render(renderer) {
        renderer.render(this._mesh, _camera);
    }
    get material() {
        return this._mesh.material;
    }
    set material(value) {
        this._mesh.material = value;
    }
}
exports.FullScreenQuad = FullScreenQuad;
//# sourceMappingURL=EffectComposer.js.map