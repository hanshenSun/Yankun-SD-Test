"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentGeometryManager = void 0;
const THREE = __importStar(require("three"));
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const gl_matrix_1 = require("gl-matrix");
const viewer_shared_math_1 = require("@shapediver/viewer.shared.math");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const SDObject_1 = require("../types/SDObject");
const tsyringe_1 = require("tsyringe");
class EnvironmentGeometryManager {
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._initialized = false;
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SCENE.SCENE_BOUNDING_BOX_CHANGE, (e) => {
            var _a, _b;
            const viewerEvent = e;
            if (viewerEvent.viewerId !== this._renderingEngine.id)
                return;
            const bb = new viewer_shared_math_1.Box((_a = viewerEvent.boundingBox) === null || _a === void 0 ? void 0 : _a.min, (_b = viewerEvent.boundingBox) === null || _b === void 0 ? void 0 : _b.max);
            if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())
                return;
            if (!this._initialized) {
                this.changeSceneExtents(bb);
            }
            else {
                let eps = 0.005;
                let bs = bb.boundingSphere;
                if (this._grid)
                    this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
                if (this._groundPlane)
                    this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
            }
        });
    }
    get grid() {
        return this._grid;
    }
    get groundPlane() {
        return this._groundPlane;
    }
    assignGroundPlaneColor(color) {
        this._groundPlane.material.color = new THREE.Color(color);
        this._groundPlane.material.needsUpdate = true;
    }
    assignGroundPlaneEnvironmentIntensity(intensity) {
        this._groundPlane.material.envMapIntensity = intensity;
        this._groundPlane.material.needsUpdate = true;
    }
    changeSceneExtents(bb) {
        if (((bb.min[0] === 0 && bb.min[1] === 0 && bb.min[2] === 0) && (bb.max[0] === 0 && bb.max[1] === 0 && bb.max[2] === 0)) || bb.isEmpty())
            return;
        this._initialized = true;
        let sceneExtents = gl_matrix_1.vec3.distance(bb.min, bb.max);
        let divisions = 0.1;
        let gridExtents = 1.0;
        if (sceneExtents > 1) {
            let tmp = Math.floor(sceneExtents).toString();
            let temp = Math.pow(10, tmp.length - 1);
            gridExtents = Math.max(Math.ceil(sceneExtents / temp) * temp, 1);
            temp = temp / 10;
            divisions = gridExtents / temp;
        }
        else if (sceneExtents !== 0) {
            let zeros = 1 - Math.floor(Math.log(sceneExtents) / Math.log(10)) - 2;
            let r = sceneExtents.toFixed(zeros + 1);
            let firstDigit = parseInt(r.substr(r.length - 1)) + 1;
            let gridExtentsS = '0.';
            for (let i = 0; i < zeros; ++i)
                gridExtentsS = gridExtentsS + '0';
            gridExtents = parseFloat(gridExtentsS + firstDigit);
            divisions = firstDigit * 10;
        }
        this._gridObject.remove(this._grid);
        this._grid = new THREE.GridHelper(2 * gridExtents, divisions);
        this._grid.material.opacity = 0.15;
        this._grid.material.transparent = true;
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = this._renderingEngine.gridVisibility;
        this._gridObject.add(this._grid);
        this._groundPlane.geometry = new THREE.PlaneGeometry(2 * gridExtents, 2 * gridExtents, 2, 2);
        let eps = 0.005;
        let bs = bb.boundingSphere;
        this._grid.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
        this._groundPlane.position.set(bs.center[0], bs.center[1], bb.min[2] - eps);
    }
    init() {
        this._environmentGeometryObject = new SDObject_1.SDObject('environmentGeometry', '');
        this._renderingEngine.sceneTreeManager.scene.add(this._environmentGeometryObject);
        this._gridObject = new SDObject_1.SDObject('grid', '');
        this._grid = new THREE.GridHelper();
        this._grid.material.opacity = 0.15;
        this._grid.material.transparent = true;
        this._grid.rotateX(Math.PI / 2);
        this._grid.visible = this._renderingEngine.gridVisibility;
        this._gridObject.add(this._grid);
        this._gridObject.userData.ambientOcclusion = false;
        this._environmentGeometryObject.add(this._gridObject);
        this._groundPlaneObject = new SDObject_1.SDObject('grid', '');
        let mat = new viewer_shared_types_1.MaterialData();
        mat.color = '#d3d3d3';
        mat.side = viewer_shared_types_1.MATERIAL_SIDE.FRONT;
        mat.roughness = 1;
        mat.metalness = 0;
        this._groundPlane = new THREE.Mesh(new THREE.PlaneGeometry(), this._renderingEngine.materialLoader.load(mat));
        this._groundPlane.receiveShadow = true;
        this._groundPlane.visible = this._renderingEngine.groundPlaneVisibility;
        this._groundPlaneObject.add(this._groundPlane);
        this._groundPlaneObject.userData.ambientOcclusion = false;
        this._environmentGeometryObject.add(this._groundPlaneObject);
        let eps = 0.005;
        this._grid.position.set(0, 0, -eps);
        this._groundPlane.position.set(0, 0, -eps);
    }
}
exports.EnvironmentGeometryManager = EnvironmentGeometryManager;
//# sourceMappingURL=EnvironmentGeometryManager.js.map