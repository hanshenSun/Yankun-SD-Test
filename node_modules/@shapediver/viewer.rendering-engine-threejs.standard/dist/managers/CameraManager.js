"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CameraManager = void 0;
const THREE = __importStar(require("three"));
const gl_matrix_1 = require("gl-matrix");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
class CameraManager {
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        this._orthographicCameraThree = new THREE.OrthographicCamera(1, 1, 1, 1, 1, 1);
        this._perspectiveCameraThree = new THREE.PerspectiveCamera(1, 1, 1, 1);
    }
    updateCamera(time, aspect) {
        var _a;
        if (((_a = this._renderingEngine.cameraEngine.camera) === null || _a === void 0 ? void 0 : _a.type) === 'perspective')
            this._renderingEngine.cameraEngine.camera.aspect = aspect;
        return this._renderingEngine.cameraEngine.camera.update(time);
    }
    adjustCamera(position, target, aspect) {
        let cameraThree;
        if (this._renderingEngine.cameraEngine.camera.type === viewer_rendering_engine_camera_engine_1.CAMERATYPE.ORTHOGRAPHIC) {
            const camera = this._renderingEngine.cameraEngine.camera;
            const distance = gl_matrix_1.vec3.distance(position, target) / 2;
            this._orthographicCameraThree.up.set(camera.up[0], camera.up[1], camera.up[2]);
            this._orthographicCameraThree.left = camera.left = -distance * aspect;
            this._orthographicCameraThree.bottom = camera.bottom = -distance;
            this._orthographicCameraThree.right = camera.right = distance * aspect;
            this._orthographicCameraThree.top = camera.top = distance;
            this._orthographicCameraThree.near = camera.near = 0.01;
            this._orthographicCameraThree.far = camera.far = 100 * distance;
            this._orthographicCameraThree.position.set(position[0], position[1], position[2]);
            this._orthographicCameraThree.lookAt(target[0], target[1], target[2]);
            this._orthographicCameraThree.updateProjectionMatrix();
            cameraThree = this._orthographicCameraThree;
        }
        else {
            const camera = this._renderingEngine.cameraEngine.camera;
            this._perspectiveCameraThree.up.set(0, 0, 1);
            const fov = this._renderingEngine.cameraEngine.camera.fov;
            const bs = this._renderingEngine.sceneTreeManager.boundingBox.boundingSphere;
            const radius = bs.radius > 0 ? bs.radius : 2;
            this._perspectiveCameraThree.fov = camera.fov = fov;
            this._perspectiveCameraThree.aspect = camera.aspect = aspect;
            this._perspectiveCameraThree.far = camera.far = fov < 10 ? fov * 100.0 * 100 * radius : 100 * radius;
            this._perspectiveCameraThree.near = camera.near = fov < 10 ? fov * 100.0 * 0.01 * radius : 0.01 * radius;
            this._perspectiveCameraThree.position.set(position[0], position[1], position[2]);
            this._perspectiveCameraThree.lookAt(target[0], target[1], target[2]);
            this._perspectiveCameraThree.updateProjectionMatrix();
            cameraThree = this._perspectiveCameraThree;
        }
        return cameraThree;
    }
    init() {
        this._orthographicCameraThree.up.set(0, 1, 0);
    }
}
exports.CameraManager = CameraManager;
//# sourceMappingURL=CameraManager.js.map