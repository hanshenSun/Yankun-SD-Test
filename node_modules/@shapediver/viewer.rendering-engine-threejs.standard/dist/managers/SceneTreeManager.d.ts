import * as THREE from 'three';
import { ITreeNodeData, TreeNode } from '@shapediver/viewer.shared.node-tree';
import { Box } from '@shapediver/viewer.shared.math';
import { LightEngine } from '@shapediver/viewer.rendering-engine.light-engine';
import { SDObject } from '../types/SDObject';
import { RenderingEngine } from '../RenderingEngine';
import { IManager } from '../interfaces/IManager';
export declare class SceneTreeManager implements IManager {
    private readonly _renderingEngine;
    private readonly _eventEngine;
    private readonly _scene;
    private readonly _stateEngine;
    private readonly _tree;
    private _boundingBox;
    private _mainNode;
    constructor(_renderingEngine: RenderingEngine);
    get boundingBox(): Box;
    get scene(): THREE.Scene;
    convertData(data: ITreeNodeData, obj: SDObject): Box;
    init(): void;
    isEmpty(): boolean;
    updateSceneTree(root: TreeNode, lightEngine: LightEngine): void;
    updateNodeTransformations(node?: TreeNode, obj?: SDObject): void;
    private updateNode;
}
//# sourceMappingURL=SceneTreeManager.d.ts.map