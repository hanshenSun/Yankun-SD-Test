"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LightLoader = void 0;
const THREE = __importStar(require("three"));
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const gl_matrix_1 = require("gl-matrix");
const SDObject_1 = require("../types/SDObject");
class LightLoader {
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        this._shadowMapCount = 0;
        this._forceDisabledShadows = false;
    }
    init() { }
    load(light, parent, scene, boundingBox) {
        let converted = new SDObject_1.SDObject(light.id, light.version);
        if (light instanceof viewer_rendering_engine_light_engine_1.AmbientLight) {
            const threeLight = converted.children[0] instanceof THREE.AmbientLight ? converted.children[0] : new THREE.AmbientLight();
            if (converted.children.length === 0)
                converted.add(threeLight);
            threeLight.color = new THREE.Color(light.color);
            threeLight.intensity = light.intensity;
        }
        if (light instanceof viewer_rendering_engine_light_engine_1.DirectionalLight) {
            const threeLight = converted.children[0] instanceof THREE.DirectionalLight ? converted.children[0] : new THREE.DirectionalLight();
            if (converted.children.length === 0)
                converted.add(threeLight);
            scene.add(threeLight.target);
            threeLight.color = new THREE.Color(light.color);
            threeLight.intensity = light.intensity;
            const bs = boundingBox.boundingSphere;
            threeLight.position.set(bs.center[0] + light.direction[0] * bs.radius * 2.35, bs.center[1] + light.direction[1] * bs.radius * 2.35, bs.center[2] + light.direction[2] * bs.radius * 2.35);
            threeLight.target.position.set(bs.center[0], bs.center[1], bs.center[2]);
            if (light.castShadow === true && this.forceDisabledShadows === false) {
                threeLight.castShadow = true;
                threeLight.shadow.camera.up.set(0, 0, 1);
                threeLight.shadow.camera.far = 8 * bs.radius;
                threeLight.shadow.camera.right = 1.5 * bs.radius;
                threeLight.shadow.camera.left = -1.5 * bs.radius;
                threeLight.shadow.camera.top = 1.5 * bs.radius;
                threeLight.shadow.camera.bottom = -1.5 * bs.radius;
                threeLight.shadow.mapSize.width = light.shadowMapResolution;
                threeLight.shadow.mapSize.height = light.shadowMapResolution;
                threeLight.shadow.bias = light.shadowMapBias;
                threeLight.shadow.camera.updateProjectionMatrix();
                this._shadowMapCount++;
            }
            else {
                threeLight.castShadow = false;
            }
        }
        if (light instanceof viewer_rendering_engine_light_engine_1.HemisphereLight) {
            const threeLight = converted.children[0] instanceof THREE.HemisphereLight ? converted.children[0] : new THREE.HemisphereLight();
            if (converted.children.length === 0)
                converted.add(threeLight);
            threeLight.color = new THREE.Color(light.color);
            threeLight.intensity = light.intensity;
            threeLight.groundColor = new THREE.Color(light.groundColor);
        }
        if (light instanceof viewer_rendering_engine_light_engine_1.PointLight) {
            const threeLight = converted.children[0] instanceof THREE.PointLight ? converted.children[0] : new THREE.PointLight();
            if (converted.children.length === 0)
                converted.add(threeLight);
            threeLight.color = new THREE.Color(light.color);
            threeLight.intensity = light.intensity;
            threeLight.distance = light.distance;
            threeLight.decay = light.decay;
            threeLight.position.set(light.position[0], light.position[1], light.position[2]);
        }
        if (light instanceof viewer_rendering_engine_light_engine_1.SpotLight) {
            const threeLight = converted.children[0] instanceof THREE.SpotLight ? converted.children[0] :
                new THREE.SpotLight(new THREE.Color(light.color), light.intensity, gl_matrix_1.vec3.distance(light.position, light.target), light.angle, light.penumbra, light.decay);
            if (converted.children.length === 0)
                converted.add(threeLight);
            scene.add(threeLight.target);
            threeLight.position.set(light.position[0], light.position[1], light.position[2]);
            threeLight.target.position.set(light.target[0], light.target[1], light.target[2]);
        }
        parent.add(converted);
    }
    get shadowMapCount() {
        return this._shadowMapCount;
    }
    set shadowMapCount(value) {
        this._shadowMapCount = value;
    }
    get forceDisabledShadows() {
        return this._forceDisabledShadows;
    }
    set forceDisabledShadows(value) {
        this._forceDisabledShadows = value;
    }
}
exports.LightLoader = LightLoader;
//# sourceMappingURL=LightLoader.js.map