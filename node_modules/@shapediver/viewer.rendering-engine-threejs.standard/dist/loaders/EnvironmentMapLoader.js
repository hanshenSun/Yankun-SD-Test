"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnvironmentMapLoader = exports.ENVIRONMENTMAP = exports.ENVIRONMENTMAP_CUBE = void 0;
const THREE = __importStar(require("three"));
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const tsyringe_1 = require("tsyringe");
const RGBELoader_1 = require("../three/loaders/RGBELoader");
var ENVIRONMENTMAP_CUBE;
(function (ENVIRONMENTMAP_CUBE) {
    ENVIRONMENTMAP_CUBE["DEFAULT"] = "default";
    ENVIRONMENTMAP_CUBE["DEFAULT_BW"] = "default_bw";
    ENVIRONMENTMAP_CUBE["BLURRED_LIGHTS"] = "blurred_lights";
    ENVIRONMENTMAP_CUBE["GEORGENTOR"] = "georgentor";
    ENVIRONMENTMAP_CUBE["GEORGENTOR_BLUR"] = "georgentor_blur";
    ENVIRONMENTMAP_CUBE["GEORGENTOR_BLUE_BLUR"] = "georgentor_blue_blur";
    ENVIRONMENTMAP_CUBE["GEORGENTOR_BW_BLUR"] = "georgentor_bw_blur";
    ENVIRONMENTMAP_CUBE["LEVELSETS"] = "levelsets";
    ENVIRONMENTMAP_CUBE["LYTHWOOD_FIELD"] = "lythwood_field";
    ENVIRONMENTMAP_CUBE["MOUNTAINS"] = "mountains";
    ENVIRONMENTMAP_CUBE["OCEAN"] = "ocean";
    ENVIRONMENTMAP_CUBE["PIAZZA_SAN_MARCO"] = "piazza_san_marco";
    ENVIRONMENTMAP_CUBE["RESIDENTIAL_GARDEN"] = "residential_garden";
    ENVIRONMENTMAP_CUBE["ROOM_ABSTRACT_1"] = "room_abstract_1";
    ENVIRONMENTMAP_CUBE["SKY"] = "sky";
    ENVIRONMENTMAP_CUBE["STORAGE_ROOM"] = "storage_room";
    ENVIRONMENTMAP_CUBE["STORM"] = "storm";
    ENVIRONMENTMAP_CUBE["SUBWAY_ENTRANCE"] = "subway_entrance";
    ENVIRONMENTMAP_CUBE["SUBWAY_ENTRANCE_BW_BLUR"] = "subway_entrance_bw_blur";
    ENVIRONMENTMAP_CUBE["WHITE"] = "white";
    ENVIRONMENTMAP_CUBE["YOKOHAMA"] = "yokohama";
})(ENVIRONMENTMAP_CUBE = exports.ENVIRONMENTMAP_CUBE || (exports.ENVIRONMENTMAP_CUBE = {}));
var ENVIRONMENTMAP;
(function (ENVIRONMENTMAP) {
    ENVIRONMENTMAP["ANNIVERSARY_LOUNGE"] = "anniversary_lounge";
    ENVIRONMENTMAP["BALLROOM"] = "ballroom";
    ENVIRONMENTMAP["CANNON_EXTERIOR"] = "cannon_exterior";
    ENVIRONMENTMAP["CAPE_HILL"] = "cape_hill";
    ENVIRONMENTMAP["CHRISTMAS_PHOTO_STUDIO"] = "christmas_photo_studio";
    ENVIRONMENTMAP["CIRCUS_MAXIMUS"] = "circus_maximus";
    ENVIRONMENTMAP["COLORFUL_STUDIO"] = "colorful_studio";
    ENVIRONMENTMAP["COMBINATION_ROOM"] = "combination_room";
    ENVIRONMENTMAP["GREEN_POINT_PARK"] = "green_point_park";
    ENVIRONMENTMAP["HILLTOP_CONSTRUCTION"] = "hilltop_construction";
    ENVIRONMENTMAP["LARGE_CORRIDOR"] = "large_corridor";
    ENVIRONMENTMAP["LYTHWOOD_LOUNGE"] = "lythwood_lounge";
    ENVIRONMENTMAP["NEUTRAL"] = "neutral";
    ENVIRONMENTMAP["OBERER_KUHBERG"] = "oberer_kuhberg";
    ENVIRONMENTMAP["OLD_HALL"] = "old_hall";
    ENVIRONMENTMAP["PAUL_LOBE_HAUS"] = "paul_lobe_haus";
    ENVIRONMENTMAP["PHOTO_STUDIO"] = "photo_studio";
    ENVIRONMENTMAP["PHOTO_STUDIO_BROADWAY_HALL"] = "photo_studio_broadway_hall";
    ENVIRONMENTMAP["SNOWY_FIELD"] = "snowy_field";
    ENVIRONMENTMAP["STUDIO_SMALL"] = "studio_small";
    ENVIRONMENTMAP["SUNFLOWERS"] = "sunflowers";
    ENVIRONMENTMAP["TABLE_MOUNTAIN"] = "table_mountain";
    ENVIRONMENTMAP["WIDE_STREET"] = "wide_street";
})(ENVIRONMENTMAP = exports.ENVIRONMENTMAP || (exports.ENVIRONMENTMAP = {}));
class EnvironmentMapLoader {
    constructor(_renderingEngine) {
        this._renderingEngine = _renderingEngine;
        this._oldSettings = {
            physicallyCorrectLights: false,
            envMapIntensity: 1,
            envMapIntensityGroundPlane: 1,
            groundPlaneColor: '#D3D3D3',
            toneMapping: 0,
            toneMappingExposure: 1,
            textureEncoding: 3000,
            outputEncoding: 3000,
        };
        this._newSettings = {
            physicallyCorrectLights: true,
            envMapIntensity: 1,
            envMapIntensityGroundPlane: 0.5,
            groundPlaneColor: '#D3D3D3',
            toneMapping: 0,
            toneMappingExposure: 1,
            textureEncoding: 3001,
            outputEncoding: 3001,
        };
        this._environmentMapFilenames = ['px', 'nx', 'pz', 'nz', 'py', 'ny'];
        this._environmentMapHDR = [];
        this._environmentMapNamesHDR = Object.values(ENVIRONMENTMAP).filter(value => typeof value === 'string');
        this._environmentMapNamesHDRKhronos = ['cannon_exterior', 'colorful_studio', 'neutral', 'wide_street'];
        this._environmentMapNamesJPG = ['default', 'default_bw', 'blurred_lights', 'georgentor', 'georgentor_blur', 'georgentor_blue_blur', 'georgentor_bw_blur', 'levelsets', 'lythwood_field', 'mountains', 'ocean', 'piazza_san_marco', 'residential_garden', 'room_abstract_1', 'sky', 'storage_room', 'storm', 'subway_entrance', 'subway_entrance_bw_blur', 'white', 'yokohama'];
        this._environmentMaps = {};
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._environmentMapName = 'none';
        this._environmentMapNameInternal = 'none';
    }
    get environmentMap() {
        return this._environmentMaps[this._environmentMapName];
    }
    init() {
        this._environmentMaps['none'] = null;
        this._pmremGenerator = new THREE.PMREMGenerator(this._renderingEngine.renderer);
        this._pmremGenerator.compileEquirectangularShader();
    }
    load(name) {
        return __awaiter(this, void 0, void 0, function* () {
            const name_original = name;
            if (name === 'none') {
                this._environmentMapNameInternal = name;
                this.assignEnvironmentMap(name);
                return true;
            }
            ;
            let name_internal, name_caching, url;
            if (!Array.isArray(name) && (name.startsWith('["https') && name.endsWith('"]')))
                try {
                    name = JSON.parse(name);
                }
                catch (e) {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, new viewer_shared_services_1.SDError('EnvironmentMapLoader.load: Was not able to load environment map.'));
                }
            if (!Array.isArray(name)) {
                name_internal = name.toLowerCase().replace(/ /g, '_');
                name_caching = name_internal + this._renderingEngine.environmentMapResolution;
            }
            else {
                if (name.length !== 6) {
                    this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, new viewer_shared_services_1.SDError('EnvironmentMapLoader.load: Was not able to load environment map, exactly 6 files are needed in the array.'));
                    this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.ENVIRONMENTMAP.ENVIRONMENTMAP_LOADED, { viewerId: this._renderingEngine.id, environmentMapId: this._environmentMapNameInternal });
                    return false;
                }
                name_internal = JSON.stringify(name, null, 0);
                name_caching = name_internal;
            }
            this._environmentMapNameInternal = name_internal;
            for (let environmentMap in this._environmentMaps)
                if (environmentMap === name_caching) {
                    this.assignEnvironmentMap(environmentMap);
                    return true;
                }
            try {
                if (!Array.isArray(name)) {
                    url = [];
                    let i;
                    if (this._environmentMapNamesHDR.indexOf(name_internal) >= 0) {
                        let url_hdr = 'https://viewer.shapediver.com/v3/envmaps/1k/' + name_internal + '_1k.hdr';
                        if (this._environmentMapNamesHDRKhronos.indexOf(name_internal) >= 0)
                            url_hdr = 'https://viewer.shapediver.com/v3/envmaps/khronos/' + name_internal + '.hdr';
                        this._environmentMapHDR.push(url_hdr);
                        yield this.loadEnvironmentMap(url_hdr, []);
                        return Promise.resolve(true);
                    }
                    else if (this._environmentMapNamesJPG.indexOf(name_internal) >= 0) {
                        for (i = 0; i < this._environmentMapFilenames.length; i++)
                            url.push('https://viewer.shapediver.com/v2/envmaps/' + this._renderingEngine.environmentMapResolution + '/' + name_internal + '/' + this._environmentMapFilenames[i] + '.jpg');
                    }
                    else if (name.startsWith('https://') || name.startsWith('http://')) {
                        if (name.endsWith('.hdr')) {
                            this._environmentMapHDR.push(name);
                            yield this.loadEnvironmentMap(name, []);
                            return Promise.resolve(true);
                        }
                        else {
                            if (!name.endsWith('/'))
                                name += '/';
                            for (i = 0; i < this._environmentMapFilenames.length; i++)
                                url.push(name + this._environmentMapFilenames[i] + '.jpg');
                        }
                    }
                    else {
                        this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, new viewer_shared_services_1.SDError('EnvironmentMapLoader.load: Was not able to load environment map, format not supported.'));
                        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.ENVIRONMENTMAP.ENVIRONMENTMAP_LOADED, { viewerId: this._renderingEngine.id, environmentMapId: this._environmentMapNameInternal });
                        return false;
                    }
                }
                else {
                    url = name;
                }
                yield this.loadEnvironmentMap(name_caching, url);
                return Promise.resolve(true);
            }
            catch (error) {
                this._logger.error(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, new viewer_shared_services_1.SDError('EnvironmentMapLoader.load: Was not able to load environment map.'));
                this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.ENVIRONMENTMAP.ENVIRONMENTMAP_LOADED, { viewerId: this._renderingEngine.id, environmentMapId: this._environmentMapNameInternal });
                return Promise.resolve(false);
            }
        });
    }
    assignEnvironmentMap(name) {
        if (name in this._environmentMaps === false)
            return;
        if (this._environmentMapHDR.includes(name)) {
            this._renderingEngine.renderingSettings = this._newSettings;
        }
        else {
            this._renderingEngine.renderingSettings = this._oldSettings;
        }
        this._environmentMapName = name;
        this._renderingEngine.materialLoader.assignEnvironmentMap(this._environmentMaps[name]);
        this._eventEngine.emitEvent(viewer_shared_services_1.EVENTTYPE.ENVIRONMENTMAP.ENVIRONMENTMAP_LOADED, { viewerId: this._renderingEngine.id, environmentMapId: this._environmentMapNameInternal });
    }
    loadEnvironmentMap(name, url) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                if (name.endsWith('.hdr')) {
                    new RGBELoader_1.RGBELoader().setDataType(THREE.UnsignedByteType).load(name, (texture) => {
                        const map = this._pmremGenerator.fromEquirectangular(texture).texture;
                        this._pmremGenerator.dispose();
                        this._environmentMaps[name] = map;
                        this.assignEnvironmentMap(name);
                        resolve();
                    }, () => { }, (error) => reject(error));
                }
                else {
                    new THREE.CubeTextureLoader().load(url, (map) => {
                        map.format = THREE.RGBFormat;
                        map.mapping = THREE.CubeReflectionMapping;
                        this._environmentMaps[name] = map;
                        this.assignEnvironmentMap(name);
                        resolve();
                    }, () => { }, (error) => reject(error));
                }
            });
        });
    }
}
exports.EnvironmentMapLoader = EnvironmentMapLoader;
//# sourceMappingURL=EnvironmentMapLoader.js.map