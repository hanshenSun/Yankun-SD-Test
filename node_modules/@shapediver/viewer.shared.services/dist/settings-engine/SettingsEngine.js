"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SettingsEngine = void 0;
const viewer_settings_1 = require("@shapediver/viewer.settings");
const tsyringe_1 = require("tsyringe");
const EventEngine_1 = require("../event-engine/EventEngine");
const EventTypes_1 = require("../event-engine/EventTypes");
const StateEngine_1 = require("../state-engine/StateEngine");
let SettingsEngine = class SettingsEngine {
    constructor() {
        this._settings = viewer_settings_1.DefaultsV3();
        this._eventEngine = tsyringe_1.container.resolve(EventEngine_1.EventEngine);
        this._stateEngine = tsyringe_1.container.resolve(StateEngine_1.StateEngine);
        this._sessionSettings = ['commitParameters', 'commitSettings', 'controlNames', 'controlOrder', 'parametersHidden'];
        this._version = '3.0';
    }
    get settings() {
        return this._settings;
    }
    get ar() {
        return this._settings.ar;
    }
    get camera() {
        return this._settings.camera;
    }
    get environment() {
        return this._settings.environment;
    }
    get environmentGeometry() {
        return this._settings.environmentGeometry;
    }
    get general() {
        return this._settings.general;
    }
    get light() {
        return this._settings.light;
    }
    get rendering() {
        return this._settings.rendering;
    }
    get session() {
        return this._settings.session;
    }
    set session(value) {
        this._settings.session = value;
    }
    convertToTargetVersion() {
        return viewer_settings_1.convert(this._settings, this._version);
    }
    loadSettings(json, sessionId, loadAsPrimary = false) {
        try {
            viewer_settings_1.validate(json, '3.0');
            this._version = '3.0';
        }
        catch (e) { }
        try {
            viewer_settings_1.validate(json, '2.0');
            this._version = '2.0';
        }
        catch (e) { }
        try {
            viewer_settings_1.validate(json, '1.0');
            this._version = '1.0';
        }
        catch (e) { }
        this._settings = viewer_settings_1.convert(json, '3.0');
        this._eventEngine.emitEvent(EventTypes_1.EVENTTYPE.SETTINGS.SETTINGS_REGISTERED, { sessionId });
    }
    flatten() {
        const flattenObject = (ob) => {
            const toReturn = {};
            for (let i in ob) {
                if (!ob.hasOwnProperty(i))
                    continue;
                if ((typeof ob[i]) == 'object') {
                    const flatObject = flattenObject(ob[i]);
                    for (var x in flatObject) {
                        if (!flatObject.hasOwnProperty(x))
                            continue;
                        toReturn[i + '.' + x] = flatObject[x];
                    }
                }
                else {
                    toReturn[i] = ob[i];
                }
            }
            return toReturn;
        };
        return flattenObject(this.settings);
    }
    reset() {
        this._settings = viewer_settings_1.DefaultsV3();
        this._eventEngine.emitEvent(EventTypes_1.EVENTTYPE.SETTINGS.SETTINGS_REGISTERED, { sessionId: '' });
    }
};
SettingsEngine = __decorate([
    tsyringe_1.singleton()
], SettingsEngine);
exports.SettingsEngine = SettingsEngine;
//# sourceMappingURL=SettingsEngine.js.map