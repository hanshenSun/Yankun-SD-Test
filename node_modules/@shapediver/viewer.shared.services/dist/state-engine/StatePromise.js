"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StatePromise = void 0;
class StatePromise {
    constructor() {
        this._resolved = false;
        this._callbacks = [];
        this._promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
        this._promise.finally(() => {
            this._resolved = true;
        });
    }
    get resolved() {
        return this._resolved;
    }
    get resolve() {
        return this._resolve;
    }
    get reject() {
        return this._reject;
    }
    then(callback) {
        return __awaiter(this, void 0, void 0, function* () {
            this._callbacks.push(callback);
            this.resolved === true ? callback() : this._promise.then(callback);
        });
    }
    reset() {
        this._resolved = false;
        this._promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
        this._promise.finally(() => {
            this._resolved = true;
        });
        const callbackCopy = [...this._callbacks];
        this._callbacks = [];
        for (let i = 0; i < callbackCopy.length; i++)
            this.then(callbackCopy[i]);
    }
}
exports.StatePromise = StatePromise;
//# sourceMappingURL=StatePromise.js.map