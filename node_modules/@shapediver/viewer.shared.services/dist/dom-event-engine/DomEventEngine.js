"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DomEventEngine = void 0;
const tsyringe_1 = require("tsyringe");
const UuidGenerator_1 = require("../uuid-generator/UuidGenerator");
class DomEventEngine {
    constructor(_viewerId, canvas) {
        this._viewerId = _viewerId;
        this._uuidGenerator = tsyringe_1.container.resolve(UuidGenerator_1.UuidGenerator);
        this._domEventListeners = {};
        this._currentMousePosition = { x: 0, y: 0 };
        this._canvas = canvas;
        this.addEventListeners();
    }
    addDomEventListener(listener) {
        const id = this._uuidGenerator.create();
        this._domEventListeners[id] = listener;
        return id;
    }
    removeDomEventListener(id) {
        if (this._domEventListeners[id])
            delete this._domEventListeners[id];
    }
    removeAllDomEventListener() {
        for (let id in this._domEventListeners)
            delete this._domEventListeners[id];
    }
    dispose() {
        this.removeEventListeners();
    }
    addEventListeners() {
        this._canvas.addEventListener("mousewheel", this.onMouseWheel.bind(this));
        this._canvas.addEventListener("MozMousePixelScroll", this.onMouseWheel.bind(this));
        this._canvas.addEventListener("mousedown", this.onMouseDown.bind(this), { passive: false });
        this._canvas.addEventListener("mousemove", this.onMouseMove.bind(this), { passive: false });
        this._canvas.addEventListener("mouseup", this.onMouseUp.bind(this), { passive: false });
        this._canvas.addEventListener("mouseout", this.onMouseUp.bind(this), { passive: false });
        this._canvas.addEventListener("touchstart", this.onTouchStart.bind(this), { passive: false });
        this._canvas.addEventListener("touchmove", this.onTouchMove.bind(this), { passive: false });
        this._canvas.addEventListener("touchend", this.onTouchEnd.bind(this), { passive: false });
        window.addEventListener("keydown", this.onKeyDown.bind(this), { passive: false });
        window.addEventListener("mousemove", this.onKeyDownMousePositionHelper.bind(this), { passive: false });
        this._canvas.addEventListener("contextmenu", this.onContextMenu.bind(this), { passive: false });
    }
    onContextMenu(event) {
        event.preventDefault();
    }
    onKeyDown(event) {
        if (this._canvas === document.elementFromPoint(this._currentMousePosition.x, this._currentMousePosition.y))
            Object.values(this._domEventListeners).forEach(e => e.onKeyDown(event));
    }
    onKeyDownMousePositionHelper(event) {
        this._currentMousePosition = { x: event.pageX, y: event.pageY };
    }
    onMouseDown(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseDown(event));
    }
    onMouseMove(event) {
        event.preventDefault();
        Object.values(this._domEventListeners).forEach(e => e.onMouseMove(event));
    }
    onMouseUp(event) {
        Object.values(this._domEventListeners).forEach(e => e.onMouseUp(event));
    }
    onMouseWheel(event) {
        event.preventDefault();
        event.stopPropagation();
        Object.values(this._domEventListeners).forEach(e => e.onMouseWheel(event));
    }
    onTouchEnd(event) {
        Object.values(this._domEventListeners).forEach(e => e.onTouchEnd(event));
    }
    onTouchMove(event) {
        Object.values(this._domEventListeners).forEach(e => e.onTouchMove(event));
    }
    onTouchStart(event) {
        Object.values(this._domEventListeners).forEach(e => e.onTouchStart(event));
    }
    removeEventListeners() {
        this._canvas.removeEventListener("mousewheel", this.onMouseWheel.bind(this), false);
        this._canvas.removeEventListener("MozMousePixelScroll", this.onMouseWheel.bind(this), false);
        this._canvas.removeEventListener("mousedown", this.onMouseDown.bind(this), false);
        this._canvas.removeEventListener("mousemove", this.onMouseMove.bind(this), false);
        this._canvas.removeEventListener("mouseup", this.onMouseUp.bind(this), false);
        this._canvas.removeEventListener("mouseout", this.onMouseUp.bind(this), false);
        this._canvas.removeEventListener("touchstart", this.onTouchStart.bind(this), false);
        this._canvas.removeEventListener("touchmove", this.onTouchMove.bind(this), false);
        this._canvas.removeEventListener("touchend", this.onTouchEnd.bind(this), false);
        window.removeEventListener("keydown", this.onKeyDown.bind(this), false);
        window.removeEventListener("mousemove", this.onKeyDownMousePositionHelper.bind(this), false);
        this._canvas.removeEventListener("contextmenu", this.onContextMenu.bind(this), false);
    }
}
exports.DomEventEngine = DomEventEngine;
//# sourceMappingURL=DomEventEngine.js.map