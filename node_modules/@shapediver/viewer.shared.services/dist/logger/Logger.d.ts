export declare enum LOGGINGLEVEL {
    NONE = "none",
    ERROR = "error",
    FATAL = "fatal",
    WARN = "warn",
    INFO = "info",
    DEBUG = "debug",
    DEBUG_HIGH = "debug.high",
    DEBUG_MEDIUM = "debug.medium",
    DEBUG_LOW = "debug.low"
}
export declare enum LOGGINGTOPIC {
    AR = "ar",
    GENERAL = "general",
    EXPORT = "export",
    PARAMETER = "parameter",
    OUTPUT = "output",
    SESSION = "session",
    VIEWER = "viewer",
    CAMERA = "camera",
    LIGHT = "light",
    CAMERACONTROL = "cameracontrol",
    DATAPROCESSING = "dataprocessing",
    SDTF = "sdtf",
    THREE = "three"
}
export declare class Logger {
    private _loggingLevel;
    private _showMessages;
    private _breadCrumbs;
    private _breadCrumbCounter;
    private _uuidGenerator;
    private _userId;
    constructor();
    get loggingLevel(): LOGGINGLEVEL;
    set loggingLevel(value: LOGGINGLEVEL);
    get showMessages(): boolean;
    set showMessages(value: boolean);
    private canLog;
    private sentryError;
    private sentryBreadcrumb;
    debug(topic: LOGGINGTOPIC, msg: string): void;
    debugHigh(topic: LOGGINGTOPIC, msg: string): void;
    debugLow(topic: LOGGINGTOPIC, msg: string): void;
    debugMedium(topic: LOGGINGTOPIC, msg: string): void;
    error(topic: LOGGINGTOPIC, error: Error, msg?: string, throwError?: boolean, notifySentry?: boolean): void;
    httpError(topic: LOGGINGTOPIC, error: Error, msg: string, httpError: number, throwError?: boolean): void;
    fatal(topic: LOGGINGTOPIC, msg: string, error: Error, throwError?: boolean): void;
    info(topic: LOGGINGTOPIC, msg: string): void;
    warn(topic: LOGGINGTOPIC, msg: string): void;
    private httpErrorHelper;
    private messageConstruction;
}
//# sourceMappingURL=Logger.d.ts.map