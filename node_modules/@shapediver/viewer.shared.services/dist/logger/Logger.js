"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LOGGINGTOPIC = exports.LOGGINGLEVEL = void 0;
const Sentry = __importStar(require("@sentry/browser"));
const tsyringe_1 = require("tsyringe");
const tracing_1 = require("@sentry/tracing");
const viewer_shared_build_data_1 = require("@shapediver/viewer.shared.build-data");
const UuidGenerator_1 = require("../uuid-generator/UuidGenerator");
const SDError_1 = require("./SDError");
var LOGGINGLEVEL;
(function (LOGGINGLEVEL) {
    LOGGINGLEVEL["NONE"] = "none";
    LOGGINGLEVEL["ERROR"] = "error";
    LOGGINGLEVEL["FATAL"] = "fatal";
    LOGGINGLEVEL["WARN"] = "warn";
    LOGGINGLEVEL["INFO"] = "info";
    LOGGINGLEVEL["DEBUG"] = "debug";
    LOGGINGLEVEL["DEBUG_HIGH"] = "debug.high";
    LOGGINGLEVEL["DEBUG_MEDIUM"] = "debug.medium";
    LOGGINGLEVEL["DEBUG_LOW"] = "debug.low";
})(LOGGINGLEVEL = exports.LOGGINGLEVEL || (exports.LOGGINGLEVEL = {}));
var LOGGINGTOPIC;
(function (LOGGINGTOPIC) {
    LOGGINGTOPIC["AR"] = "ar";
    LOGGINGTOPIC["GENERAL"] = "general";
    LOGGINGTOPIC["EXPORT"] = "export";
    LOGGINGTOPIC["PARAMETER"] = "parameter";
    LOGGINGTOPIC["OUTPUT"] = "output";
    LOGGINGTOPIC["SESSION"] = "session";
    LOGGINGTOPIC["VIEWER"] = "viewer";
    LOGGINGTOPIC["CAMERA"] = "camera";
    LOGGINGTOPIC["LIGHT"] = "light";
    LOGGINGTOPIC["CAMERACONTROL"] = "cameracontrol";
    LOGGINGTOPIC["DATAPROCESSING"] = "dataprocessing";
    LOGGINGTOPIC["SDTF"] = "sdtf";
    LOGGINGTOPIC["THREE"] = "three";
})(LOGGINGTOPIC = exports.LOGGINGTOPIC || (exports.LOGGINGTOPIC = {}));
let Logger = class Logger {
    constructor() {
        this._loggingLevel = LOGGINGLEVEL.WARN;
        this._showMessages = true;
        this._breadCrumbs = [];
        this._breadCrumbCounter = 0;
        this._uuidGenerator = tsyringe_1.container.resolve(UuidGenerator_1.UuidGenerator);
        this._userId = this._uuidGenerator.create();
        const oldConsoleDebug = console.debug;
        console.debug = (...data) => {
            if (data && Array.isArray(data) && typeof data[0] === 'string' && data[0].startsWith('THREE'))
                return;
            oldConsoleDebug(...data);
        };
        const oldConsoleInfo = console.info;
        console.info = (...data) => {
            if (data && Array.isArray(data) && typeof data[0] === 'string' && data[0].startsWith('THREE'))
                return;
            oldConsoleInfo(...data);
        };
        const oldConsoleLog = console.log;
        console.log = (...data) => {
            if (data && Array.isArray(data) && typeof data[0] === 'string' && data[0].startsWith('THREE'))
                return;
            oldConsoleLog(...data);
        };
        const oldConsoleWarn = console.warn;
        console.warn = (...data) => {
            if (data && Array.isArray(data) && typeof data[0] === 'string' && data[0].startsWith('THREE'))
                return;
            oldConsoleWarn(...data);
        };
        const oldConsoleError = console.error;
        console.error = (...data) => {
            if (data && Array.isArray(data) && typeof data[0] === 'string' && data[0].startsWith('THREE')) {
                this.error(LOGGINGTOPIC.THREE, new SDError_1.SDError(data[0]), data[0]);
                return;
            }
            ;
            oldConsoleError(...data);
        };
        Sentry.init({
            dsn: "https://0510990697b04b9da3ad07868e94e378@o363881.ingest.sentry.io/5828729",
            integrations: [
                new tracing_1.Integrations.BrowserTracing(),
                new Sentry.Integrations.Breadcrumbs({
                    console: false,
                    dom: false,
                    fetch: false,
                    history: false,
                    sentry: false,
                    xhr: false,
                })
            ],
            defaultIntegrations: false,
            environment: 'local',
            release: viewer_shared_build_data_1.build_data.build_version,
            maxBreadcrumbs: 100,
            beforeBreadcrumb: (breadcrumb, hint) => {
                this._breadCrumbCounter++;
                return breadcrumb;
            },
            beforeSend: (event, hint) => {
                if (event.level === Sentry.Severity.Debug)
                    event.fingerprint ? event.fingerprint.push(this._userId + '') : event.fingerprint = [this._userId + ''];
                return event;
            },
            tracesSampleRate: 1.0
        });
        Sentry.setUser({
            id: this._userId
        });
    }
    get loggingLevel() {
        return this._loggingLevel;
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
    }
    get showMessages() {
        return this._showMessages;
    }
    set showMessages(value) {
        this._showMessages = value;
    }
    canLog(loggingLevel) {
        switch (this.loggingLevel) {
            case LOGGINGLEVEL.ERROR:
                if (loggingLevel === LOGGINGLEVEL.FATAL)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.FATAL:
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.WARN:
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.INFO:
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_HIGH:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_MEDIUM:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_LOW:
            case LOGGINGLEVEL.DEBUG:
            default:
                return true;
        }
    }
    sentryError(topic, error, msg) {
        var _a;
        this.sentryBreadcrumb(topic, msg || error.message, Sentry.Severity.Error);
        const breadcrumbCounter = this._breadCrumbCounter > 100 ? 100 : this._breadCrumbCounter;
        for (let i = breadcrumbCounter; i < this._breadCrumbs.length + breadcrumbCounter; i++) {
            if (i % 100 === 0 && i !== 0) {
                Sentry.setTag('topic', topic);
                Sentry.setUser({ id: this._userId });
                Sentry.captureMessage('Breadcrumb Issue ' + (i / 100 - 1) + ' (' + this._userId + ')', Sentry.Severity.Debug);
                (_a = Sentry.getCurrentHub().getScope()) === null || _a === void 0 ? void 0 : _a.clear();
            }
            Sentry.addBreadcrumb(this._breadCrumbs[i - breadcrumbCounter]);
        }
        Sentry.setTag('topic', topic);
        Sentry.setUser({ id: this._userId });
        Sentry.captureException(error);
    }
    sentryBreadcrumb(topic, msg, level) {
        this._breadCrumbs.push({
            category: topic,
            message: msg,
            level: Sentry.Severity.Debug,
            timestamp: Math.floor(new Date().getTime() / 1000)
        });
    }
    debug(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Debug);
        if (this.canLog(LOGGINGLEVEL.DEBUG) && this.showMessages === true)
            console.debug('(DEBUG) ' + this.messageConstruction(msg));
    }
    debugHigh(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Debug);
        if (this.canLog(LOGGINGLEVEL.DEBUG_HIGH) && this.showMessages === true)
            console.debug('(DEBUG_HIGH) ' + this.messageConstruction(msg));
    }
    debugLow(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Debug);
        if (this.canLog(LOGGINGLEVEL.DEBUG_LOW) && this.showMessages === true)
            console.debug('(DEBUG_LOW) ' + this.messageConstruction(msg));
    }
    debugMedium(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Debug);
        if (this.canLog(LOGGINGLEVEL.DEBUG_MEDIUM) && this.showMessages === true)
            console.debug('(DEBUG_MEDIUM) ' + this.messageConstruction(msg));
    }
    error(topic, error, msg, throwError = false, notifySentry = true) {
        this.sentryBreadcrumb(topic, msg || error.message, Sentry.Severity.Error);
        if (notifySentry)
            this.sentryError(topic, error, msg);
        if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true)
            console.error('(ERROR) ' + this.messageConstruction(msg || error.message));
        if (throwError)
            throw error;
    }
    httpError(topic, error, msg, httpError, throwError = false) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Error);
        this.httpErrorHelper(topic, msg, error, httpError, throwError, false);
    }
    fatal(topic, msg, error, throwError = false) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Fatal);
        this.sentryError(topic, error, msg);
        if (this.canLog(LOGGINGLEVEL.FATAL) && this.showMessages === true)
            console.error('(FATAL) ' + this.messageConstruction(msg));
        if (throwError)
            throw error;
    }
    info(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Info);
        if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
            console.info('(INFO) ' + this.messageConstruction(msg));
    }
    warn(topic, msg) {
        this.sentryBreadcrumb(topic, msg, Sentry.Severity.Warning);
        if (this.canLog(LOGGINGLEVEL.WARN) && this.showMessages === true)
            console.warn('(WARN) ' + this.messageConstruction(msg));
    }
    httpErrorHelper(topic, msg, error, httpError, throwError = false, notifySentry = false) {
        if (httpError.toString()[0] === '1') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 100:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Continue. ' + error.message);
                        break;
                    case 101:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Switching Protocols. ' + error.message);
                        break;
                    case 102:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Processing. ' + error.message);
                        break;
                    case 103:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Early Hints. ' + error.message);
                        break;
                    default:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Informational Response. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '2') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 200:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': OK. ' + error.message);
                        break;
                    case 201:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Created. ' + error.message);
                        break;
                    case 202:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Accepted. ' + error.message);
                        break;
                    case 203:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Non-Authoritative Information. ' + error.message);
                        break;
                    case 204:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': No Content. ' + error.message);
                        break;
                    case 205:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Reset Content. ' + error.message);
                        break;
                    case 206:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Partial Content. ' + error.message);
                        break;
                    case 207:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Multi-Status. ' + error.message);
                        break;
                    case 208:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Already Reported. ' + error.message);
                        break;
                    case 226:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': IM Used. ' + error.message);
                        break;
                    default:
                        this.info(topic, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Success Message. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '3') {
            if (this.canLog(LOGGINGLEVEL.WARN) && this.showMessages === true)
                switch (httpError) {
                    case 300:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Multiple Choices. ' + error.message);
                        break;
                    case 301:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Moved Permanently. ' + error.message);
                        break;
                    case 302:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Found (Previously "Moved temporarily"). ' + error.message);
                        break;
                    case 303:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': See Other. ' + error.message);
                        break;
                    case 304:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Not Modified. ' + error.message);
                        break;
                    case 305:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Use Proxy. ' + error.message);
                        break;
                    case 306:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Switch Proxy. ' + error.message);
                        break;
                    case 307:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Temporary Redirect. ' + error.message);
                        break;
                    case 308:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Permanent Redirect. ' + error.message);
                        break;
                    default:
                        this.warn(topic, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Redirection Error. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '4') {
            if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true)
                switch (httpError) {
                    case 400:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Bad Request. ' + error.message, throwError, notifySentry);
                        break;
                    case 401:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unauthorized. ' + error.message, throwError, notifySentry);
                        break;
                    case 402:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Payment Required. ' + error.message, throwError, notifySentry);
                        break;
                    case 403:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Forbidden. ' + error.message, throwError, notifySentry);
                        break;
                    case 404:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Not Found. ' + error.message, throwError, notifySentry);
                        break;
                    case 405:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Method Not Allowed. ' + error.message, throwError, notifySentry);
                        break;
                    case 406:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Not Acceptable. ' + error.message, throwError, notifySentry);
                        break;
                    case 407:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Proxy Authentication Required. ' + error.message, throwError, notifySentry);
                        break;
                    case 408:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Request Timeout. ' + error.message, throwError, notifySentry);
                        break;
                    case 409:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Conflict. ' + error.message, throwError, notifySentry);
                        break;
                    case 410:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Gone. ' + error.message, throwError, notifySentry);
                        break;
                    case 411:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Length Required. ' + error.message, throwError, notifySentry);
                        break;
                    case 412:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Precondition Failed. ' + error.message, throwError, notifySentry);
                        break;
                    case 413:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Payload Too Large. ' + error.message, throwError, notifySentry);
                        break;
                    case 414:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': URI Too Long. ' + error.message, throwError, notifySentry);
                        break;
                    case 415:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unsupported Media Type. ' + error.message, throwError, notifySentry);
                        break;
                    case 416:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Range Not Satisfiable. ' + error.message, throwError, notifySentry);
                        break;
                    case 417:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Expectation Failed. ' + error.message, throwError, notifySentry);
                        break;
                    case 421:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Misdirected Request. ' + error.message, throwError, notifySentry);
                        break;
                    case 422:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unprocessable Entity. ' + error.message, throwError, notifySentry);
                        break;
                    case 423:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Locked. ' + error.message, throwError, notifySentry);
                        break;
                    case 424:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Failed Dependency. ' + error.message, throwError, notifySentry);
                        break;
                    case 425:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Too Early. ' + error.message, throwError, notifySentry);
                        break;
                    case 426:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Upgrade Required. ' + error.message, throwError, notifySentry);
                        break;
                    case 428:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Precondition Required. ' + error.message, throwError, notifySentry);
                        break;
                    case 429:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Too Many Requests. ' + error.message, throwError, notifySentry);
                        break;
                    case 431:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Request Header Fields Too Large. ' + error.message, throwError, notifySentry);
                        break;
                    case 451:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unavailable For Legal Reasons. ' + error.message, throwError, notifySentry);
                        break;
                    case 418:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': I\'m a teapot. ' + error.message, throwError, notifySentry);
                        break;
                    case 420:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Policy Not Fulfilled. ' + error.message, throwError, notifySentry);
                        break;
                    case 444:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': No Response. ' + error.message, throwError, notifySentry);
                        break;
                    case 449:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': The request should be retried after doing the appropriate action. ' + error.message, throwError, notifySentry);
                        break;
                    case 499:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Client Closed Request. ' + error.message, throwError, notifySentry);
                        break;
                    default:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Client Error. ' + error.message, throwError, notifySentry);
                }
        }
        else if (httpError.toString()[0] === '5') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 500:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Internal Server Error. ' + error.message, throwError, notifySentry);
                        break;
                    case 501:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Not Implemented. ' + error.message, throwError, notifySentry);
                        break;
                    case 502:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Bad Gateway. ' + error.message, throwError, notifySentry);
                        break;
                    case 503:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Service Unavailable. ' + error.message, throwError, notifySentry);
                        break;
                    case 504:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Gateway Timeout. ' + error.message, throwError, notifySentry);
                        break;
                    case 505:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': HTTP Version Not Supported. ' + error.message, throwError, notifySentry);
                        break;
                    case 506:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Variant Also Negotiates. ' + error.message, throwError, notifySentry);
                        break;
                    case 507:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Insufficient Storage. ' + error.message, throwError, notifySentry);
                        break;
                    case 508:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Loop Detected. ' + error.message, throwError, notifySentry);
                        break;
                    case 510:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Not Extended. ' + error.message, throwError, notifySentry);
                        break;
                    case 511:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Network Authentication Required. ' + error.message, throwError, notifySentry);
                        break;
                    default:
                        this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Server Error. ' + error.message, throwError, notifySentry);
                }
        }
        else {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                this.error(topic, error, msg + '\n' + 'Http-Code ' + httpError + ': Unknown Error Code. ' + error.message, throwError, notifySentry);
        }
    }
    messageConstruction(msg) {
        return new Date().toISOString() + ': ' + msg;
    }
};
Logger = __decorate([
    tsyringe_1.singleton(),
    __metadata("design:paramtypes", [])
], Logger);
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map