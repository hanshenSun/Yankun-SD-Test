import * as THREE from 'three';
import { MaterialData, SDTFAttributeVisualizationData } from '@shapediver/viewer.shared.types';
import { RenderingEngine } from '../RenderingEngine';
import { ILoader } from '../interfaces/ILoader';
export declare class MaterialLoader implements ILoader {
    private readonly _renderingEngine;
    private readonly _defaultColor;
    private readonly _converter;
    private _materialCache;
    private _blending;
    private _envMap;
    private _envMapIntensity;
    private _height;
    private _lightSizeUV;
    private _pointSize;
    private _textureEncoding;
    private _maxMapCount;
    constructor(_renderingEngine: RenderingEngine);
    assignEnvironmentMap(e: THREE.CubeTexture | THREE.Texture | null): void;
    assignEnvironmentMapIntensity(e: number): void;
    assignPointSize(p: number): void;
    assignTextureEncoding(e: THREE.TextureEncoding): void;
    emptyMaterialCache(): void;
    removeFromMaterialCache(id: string): void;
    init(): void;
    load(visualizationData: SDTFAttributeVisualizationData, materialProperties?: MaterialData, materialSettings?: {
        mode?: number;
        useVertexTangents?: boolean;
        useVertexColors?: boolean;
        useFlatShading?: boolean;
        useMorphTargets?: boolean;
        useMorphNormals?: boolean;
    }): THREE.Material;
    updateMaterials(): void;
    updateSoftShadow(lightSizeUV: number, blending: number): void;
    private createTexture;
    get maxMapCount(): number;
    set maxMapCount(value: number);
}
//# sourceMappingURL=MaterialLoader.d.ts.map