export class EffectComposer {
    constructor(renderer: any, renderTarget: any);
    renderer: any;
    _pixelRatio: any;
    _width: any;
    _height: any;
    renderTarget1: any;
    renderTarget2: any;
    writeBuffer: any;
    readBuffer: any;
    renderToScreen: boolean;
    passes: any[];
    copyPass: ShaderPass;
    clock: Clock;
    swapBuffers(): void;
    addPass(pass: any): void;
    insertPass(pass: any, index: any): void;
    removePass(pass: any): void;
    isLastEnabledPass(passIndex: any): boolean;
    render(deltaTime: any): void;
    reset(renderTarget: any): void;
    setSize(width: any, height: any): void;
    setPixelRatio(pixelRatio: any): void;
}
export class Pass {
    enabled: boolean;
    needsSwap: boolean;
    clear: boolean;
    renderToScreen: boolean;
    setSize(): void;
    render(): void;
}
export class FullScreenQuad {
    constructor(material: any);
    _mesh: Mesh<BufferGeometry, any>;
    dispose(): void;
    render(renderer: any): void;
    set material(arg: any);
    get material(): any;
}
import { ShaderPass } from "../postprocessing/ShaderPass.js";
import { Clock } from "three/src/core/Clock";
import { BufferGeometry } from "three/src/core/BufferGeometry";
import { Mesh } from "three/src/objects/Mesh";
//# sourceMappingURL=EffectComposer.d.ts.map