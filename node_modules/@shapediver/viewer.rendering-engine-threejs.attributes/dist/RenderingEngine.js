"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RenderingEngine = void 0;
const THREE = __importStar(require("three"));
const tsyringe_1 = require("tsyringe");
const viewer_rendering_engine_camera_engine_1 = require("@shapediver/viewer.rendering-engine.camera-engine");
const viewer_rendering_engine_canvas_engine_1 = require("@shapediver/viewer.rendering-engine.canvas-engine");
const viewer_shared_node_tree_1 = require("@shapediver/viewer.shared.node-tree");
const viewer_rendering_engine_light_engine_1 = require("@shapediver/viewer.rendering-engine.light-engine");
const viewer_rendering_engine_rendering_engine_1 = require("@shapediver/viewer.rendering-engine.rendering-engine");
const viewer_shared_services_1 = require("@shapediver/viewer.shared.services");
const viewer_shared_types_1 = require("@shapediver/viewer.shared.types");
const SceneTreeManager_1 = require("./managers/SceneTreeManager");
const RenderingManager_1 = require("./managers/RenderingManager");
const MaterialLoader_1 = require("./loaders/MaterialLoader");
const GeometryLoader_1 = require("./loaders/GeometryLoader");
const LightLoader_1 = require("./loaders/LightLoader");
const SceneTracingManager_1 = require("./managers/SceneTracingManager");
const CameraManager_1 = require("./managers/CameraManager");
class RenderingEngine {
    constructor(properties) {
        this._converter = tsyringe_1.container.resolve(viewer_shared_services_1.Converter);
        this._logger = tsyringe_1.container.resolve(viewer_shared_services_1.Logger);
        this._canvasEngine = tsyringe_1.container.resolve(viewer_rendering_engine_canvas_engine_1.CanvasEngine);
        this._eventEngine = tsyringe_1.container.resolve(viewer_shared_services_1.EventEngine);
        this._settingsEngine = tsyringe_1.container.resolve(viewer_shared_services_1.SettingsEngine);
        this._stateEngine = tsyringe_1.container.resolve(viewer_shared_services_1.StateEngine);
        this._tree = tsyringe_1.container.resolve(viewer_shared_node_tree_1.Tree);
        this._automaticResizing = true;
        this._blur = false;
        this._blurSceneWhenBusy = true;
        this._busy = false;
        this._lightScene = 'standard';
        this._pointSize = 1.0;
        this._show = false;
        this._showStatistics = false;
        this._closed = false;
        this._visualizationAttributes = {};
        THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);
        this._id = properties.id;
        this._visibility = properties.visibility;
        this._logo = properties.logo;
        this._canvas = this._canvasEngine.getCanvas(this._canvasEngine.createCanvasObject(properties.canvas));
        this._domEventEngine = new viewer_shared_services_1.DomEventEngine(this._id, this.canvas.canvasElement);
        this._cameraEngine = new viewer_rendering_engine_camera_engine_1.CameraEngine(this._id, this.canvas, this._domEventEngine);
        this._lightEngine = new viewer_rendering_engine_light_engine_1.LightEngine(this._id);
        this._cameraManager = new CameraManager_1.CameraManager(this);
        this._sceneTracingManager = new SceneTracingManager_1.SceneTracingManager(this);
        this._sceneTreeManager = new SceneTreeManager_1.SceneTreeManager(this);
        this._renderingManager = new RenderingManager_1.RenderingManager(this);
        this._materialLoader = new MaterialLoader_1.MaterialLoader(this);
        this._geometryLoader = new GeometryLoader_1.GeometryLoader(this);
        this._lightLoader = new LightLoader_1.LightLoader(this);
        this._renderer = this.renderingManager.createRenderer(this._canvas.canvasElement);
        this._logoDivElement = this.renderingManager.addLogo(this._canvas.canvasElement, this._logo);
        this._cameraManager.init();
        this._sceneTracingManager.init();
        this._sceneTreeManager.init();
        this._renderingManager.init();
        this._materialLoader.init();
        this._geometryLoader.init();
        this._lightLoader.init();
        this._renderingManager.start();
        this._stateEngine.createCustomState(this.id + '_settings_loaded');
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.INSTANT)
            this.show = true;
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION) {
            this._stateEngine.primarySessionLoaded.then(() => {
                if (this._closed)
                    return;
                this._stateEngine.getCustomState(this.id + '_settings_loaded').then(() => {
                    if (this._closed)
                        return;
                    this.show = true;
                });
            });
        }
        if (this._stateEngine.primarySettingsRegistered.resolved) {
            if (this._closed)
                return;
            this.applySettings();
        }
        else {
            this._stateEngine.primarySettingsRegistered.then(() => {
                if (this._closed)
                    return;
                this.applySettings();
            });
        }
        this._eventEngine.addListener(viewer_shared_services_1.EVENTTYPE.SETTINGS.SETTINGS_REGISTERED_EXTERNAL, (e) => {
            if (this._closed)
                return;
            this.applySettings();
        });
    }
    get automaticResizing() {
        return this._automaticResizing;
    }
    set automaticResizing(value) {
        this._automaticResizing = value;
    }
    get blur() {
        return this._blur;
    }
    set blur(value) {
        this._blur = value;
    }
    get blurSceneWhenBusy() {
        return this._blurSceneWhenBusy;
    }
    set blurSceneWhenBusy(value) {
        this._blurSceneWhenBusy = value;
    }
    get busy() {
        return this._busy;
    }
    set busy(value) {
        this._busy = value;
    }
    get cameraEngine() {
        return this._cameraEngine;
    }
    get cameraManager() {
        return this._cameraManager;
    }
    get canvas() {
        return this._canvas;
    }
    get canvasEngine() {
        return this._canvasEngine;
    }
    get convertSDTFItemToVisualizationData() {
        return this._convertSDTFItemToVisualizationData;
    }
    set convertSDTFItemToVisualizationData(value) {
        this._convertSDTFItemToVisualizationData = value;
    }
    get closed() {
        return this._closed;
    }
    get domEventEngine() {
        return this._domEventEngine;
    }
    get eventEngine() {
        return this._eventEngine;
    }
    get geometryLoader() {
        return this._geometryLoader;
    }
    get id() {
        return this._id;
    }
    get lightEngine() {
        return this._lightEngine;
    }
    get lightSceneId() {
        return this._lightEngine.lightScene.id;
    }
    get lightLoader() {
        return this._lightLoader;
    }
    get lightScene() {
        return this._lightScene;
    }
    set lightScene(value) {
        this._lightScene = value;
    }
    get logoDivElement() {
        return this._logoDivElement;
    }
    get materialLoader() {
        return this._materialLoader;
    }
    get minimalRendering() {
        return this.renderingManager.minimalRendering;
    }
    get pointSize() {
        return this._pointSize;
    }
    set pointSize(value) {
        this._pointSize = value;
        this.materialLoader.assignPointSize(value);
    }
    get renderer() {
        return this._renderer;
    }
    get renderingManager() {
        return this._renderingManager;
    }
    get scene() {
        return this._sceneTreeManager.scene;
    }
    get sceneTracingManager() {
        return this._sceneTracingManager;
    }
    get sceneTreeManager() {
        return this._sceneTreeManager;
    }
    get settingsEngine() {
        return this._settingsEngine;
    }
    get show() {
        return this._show;
    }
    set show(value) {
        this._show = value;
    }
    get showStatistics() {
        return this._showStatistics;
    }
    set showStatistics(value) {
        this._showStatistics = value;
    }
    get stateEngine() {
        return this._stateEngine;
    }
    get usingSwiftShader() {
        return this.renderingManager.usingSwiftShader;
    }
    get visualizationAttributes() {
        return this._visualizationAttributes;
    }
    set visualizationAttributes(value) {
        const overview = this.createSDTFOverview();
        for (let key in overview) {
            if (value[key]) {
                this._visualizationAttributes[key] = value[key];
            }
            else {
                this._visualizationAttributes[key] = false;
                this._logger.info(viewer_shared_services_1.LOGGINGTOPIC.VIEWER, `VisualizationAttributes does not have Attribute ${key}. Visualization set to false.`);
            }
        }
        for (let key in this._visualizationAttributes) {
            if (!overview[key])
                delete this._visualizationAttributes[key];
        }
    }
    createSDTFOverview(node = this._tree.root) {
        const out = new viewer_shared_types_1.SDTFAttributeOverview({});
        for (let i = 0, len = node.data.length; i < len; i++)
            if (node.data[i] instanceof viewer_shared_types_1.SDTFAttributeOverview)
                out.merge(node.data[i]);
        for (let i = 0, len = node.children.length; i < len; i++)
            out.merge(new viewer_shared_types_1.SDTFAttributeOverview(this.createSDTFOverview(node.children[i])));
        return out.overview;
    }
    close() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            this._closed = true;
            (_a = this._canvas.canvasElement.parentElement) === null || _a === void 0 ? void 0 : _a.removeChild(this._logoDivElement);
            this._canvas.reset();
            this._domEventEngine.removeAllDomEventListener();
            this._domEventEngine.dispose();
            return true;
        });
    }
    getScreenshot(type, encoderOptions) {
        return this._renderingManager.getScreenshot(type, encoderOptions);
    }
    reset() {
        if (this._visibility === viewer_rendering_engine_rendering_engine_1.VISIBILITYMODE.SESSION)
            this.show = false;
        this._stateEngine.getCustomState(this.id + '_settings_loaded').reset();
    }
    resize(width, height) {
        this._renderingManager.resize(width, height);
        this._renderingManager.render();
    }
    saveSettings() {
    }
    update() {
        this._sceneTreeManager.updateSceneTree(this._tree.root, this._lightEngine);
        this._renderingManager.updateShadowMap();
        this._renderingManager.render();
    }
    applySettings() {
        this.blurSceneWhenBusy = this._settingsEngine.general.blurWhenBusy;
        this.lightScene = this._settingsEngine.light.lightSceneId;
        this.pointSize = this._settingsEngine.general.pointSize;
        this.lightEngine.applySettings();
        this.cameraEngine.applySettings();
        this._stateEngine.getCustomState(this.id + '_settings_loaded').resolve(true);
        this.update();
    }
}
exports.RenderingEngine = RenderingEngine;
//# sourceMappingURL=RenderingEngine.js.map