"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PerformanceEvaluator = void 0;
const tsyringe_1 = require("tsyringe");
let PerformanceEvaluator = class PerformanceEvaluator {
    constructor() {
        this._eval = {};
    }
    start(id, time) {
        this._eval[id] = {
            start: time || new Date().getTime(),
            pauses: []
        };
    }
    pause(id) {
        if (!this._eval[id])
            return;
        if (this._eval[id].end)
            return;
        if (this._eval[id].pauses.length === 0) {
            this._eval[id].pauses.push({
                pause: new Date().getTime()
            });
        }
        else if (this._eval[id].pauses[this._eval[id].pauses.length - 1].continue) {
            this._eval[id].pauses.push({
                pause: new Date().getTime()
            });
        }
    }
    continue(id) {
        if (!this._eval[id])
            return;
        if (this._eval[id].pauses.length === 0)
            return;
        if (this._eval[id].end)
            return;
        const pause = this._eval[id].pauses[this._eval[id].pauses.length - 1];
        if (!pause.continue) {
            pause.continue = new Date().getTime();
            pause.duration = pause.continue - pause.pause;
        }
    }
    end(id) {
        if (!this._eval[id])
            return;
        if (this._eval[id].end)
            return;
        this._eval[id].end = new Date().getTime();
        let pauseDuration = 0;
        for (let i = 0; i < this._eval[id].pauses.length; i++) {
            pauseDuration += this._eval[id].pauses[i].duration ? this._eval[id].pauses[i].duration : this._eval[id].end - this._eval[id].pauses[i].pause;
        }
        this._eval[id].duration = this._eval[id].end - this._eval[id].start - pauseDuration;
    }
    getEvaluation(id) {
        return this._eval[id];
    }
    getEvaluationToString(id) {
        const e = this._eval[id];
        return `Performance Evaluation for ${id}: ${e.duration}ms\n`;
    }
};
PerformanceEvaluator = __decorate([
    tsyringe_1.singleton()
], PerformanceEvaluator);
exports.PerformanceEvaluator = PerformanceEvaluator;
//# sourceMappingURL=PerformanceEvaluator.js.map