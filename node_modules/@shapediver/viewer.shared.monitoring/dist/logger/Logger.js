"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Logger = exports.LOGGINGLEVEL = void 0;
const tsyringe_1 = require("tsyringe");
var LOGGINGLEVEL;
(function (LOGGINGLEVEL) {
    LOGGINGLEVEL["NONE"] = "none";
    LOGGINGLEVEL["ERROR"] = "error";
    LOGGINGLEVEL["FATAL"] = "fatal";
    LOGGINGLEVEL["WARN"] = "warn";
    LOGGINGLEVEL["INFO"] = "info";
    LOGGINGLEVEL["DEBUG"] = "debug";
    LOGGINGLEVEL["DEBUG_HIGH"] = "debug.high";
    LOGGINGLEVEL["DEBUG_MEDIUM"] = "debug.medium";
    LOGGINGLEVEL["DEBUG_LOW"] = "debug.low";
})(LOGGINGLEVEL = exports.LOGGINGLEVEL || (exports.LOGGINGLEVEL = {}));
let Logger = class Logger {
    constructor() {
        this._loggingLevel = LOGGINGLEVEL.NONE;
        this._showMessages = true;
        this._updateCBs = [];
    }
    get loggingLevel() {
        return this._loggingLevel;
    }
    set loggingLevel(value) {
        this._loggingLevel = value;
        this._updateCBs.forEach(v => v());
    }
    get showMessages() {
        return this._showMessages;
    }
    set showMessages(value) {
        this._showMessages = value;
        this._updateCBs.forEach(v => v());
    }
    canLog(loggingLevel) {
        switch (this.loggingLevel) {
            case LOGGINGLEVEL.ERROR:
                if (loggingLevel === LOGGINGLEVEL.FATAL)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.FATAL:
                if (loggingLevel === LOGGINGLEVEL.WARN)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.WARN:
                if (loggingLevel === LOGGINGLEVEL.INFO)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.INFO:
                if (loggingLevel === LOGGINGLEVEL.DEBUG)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_HIGH)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_HIGH:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_MEDIUM)
                    return false;
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_MEDIUM:
                if (loggingLevel === LOGGINGLEVEL.DEBUG_LOW)
                    return false;
            case LOGGINGLEVEL.DEBUG_LOW:
            case LOGGINGLEVEL.DEBUG:
            default:
                return true;
        }
    }
    debug(msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG) && this.showMessages === true)
            console.debug('(DEBUG) ' + this.messageConstruction(msg));
    }
    debugHigh(msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_HIGH) && this.showMessages === true)
            console.debug('(DEBUG_HIGH) ' + this.messageConstruction(msg));
    }
    debugLow(msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_LOW) && this.showMessages === true)
            console.debug('(DEBUG_LOW) ' + this.messageConstruction(msg));
    }
    debugMedium(msg) {
        if (this.canLog(LOGGINGLEVEL.DEBUG_MEDIUM) && this.showMessages === true)
            console.debug('(DEBUG_MEDIUM) ' + this.messageConstruction(msg));
    }
    errorMessage(msg, throwError = true) {
        if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true) {
            console.error('(ERROR) ' + this.messageConstruction(msg));
            if (throwError)
                throw new Error(msg);
        }
    }
    error(msg, error, throwError = false) {
        if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true) {
            console.error('(ERROR) ' + this.messageConstruction(msg));
            if (throwError)
                throw error;
        }
    }
    httpError(msg, error, httpError, throwError = false) {
        this.httpErrorHelper(msg, error, httpError, throwError);
    }
    fatal(msg) {
        if (this.canLog(LOGGINGLEVEL.FATAL) && this.showMessages === true)
            console.error('(FATAL) ' + this.messageConstruction(msg));
    }
    info(msg) {
        if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
            console.info('(INFO) ' + this.messageConstruction(msg));
    }
    warn(msg) {
        if (this.canLog(LOGGINGLEVEL.WARN) && this.showMessages === true)
            console.warn('(WARN) ' + this.messageConstruction(msg));
    }
    httpErrorHelper(msg, error, httpError, throwError = false) {
        if (httpError.toString()[0] === '1') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 100:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Continue. ' + error.message);
                        break;
                    case 101:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Switching Protocols. ' + error.message);
                        break;
                    case 102:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Processing. ' + error.message);
                        break;
                    case 103:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Early Hints. ' + error.message);
                        break;
                    default:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Informational Response. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '2') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 200:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': OK. ' + error.message);
                        break;
                    case 201:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Created. ' + error.message);
                        break;
                    case 202:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Accepted. ' + error.message);
                        break;
                    case 203:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Non-Authoritative Information. ' + error.message);
                        break;
                    case 204:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': No Content. ' + error.message);
                        break;
                    case 205:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Reset Content. ' + error.message);
                        break;
                    case 206:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Partial Content. ' + error.message);
                        break;
                    case 207:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Multi-Status. ' + error.message);
                        break;
                    case 208:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Already Reported. ' + error.message);
                        break;
                    case 226:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': IM Used. ' + error.message);
                        break;
                    default:
                        this.info(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Success Message. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '3') {
            if (this.canLog(LOGGINGLEVEL.WARN) && this.showMessages === true)
                switch (httpError) {
                    case 300:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Multiple Choices. ' + error.message);
                        break;
                    case 301:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Moved Permanently. ' + error.message);
                        break;
                    case 302:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Found (Previously "Moved temporarily"). ' + error.message);
                        break;
                    case 303:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': See Other. ' + error.message);
                        break;
                    case 304:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Not Modified. ' + error.message);
                        break;
                    case 305:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Use Proxy. ' + error.message);
                        break;
                    case 306:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Switch Proxy. ' + error.message);
                        break;
                    case 307:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Temporary Redirect. ' + error.message);
                        break;
                    case 308:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Permanent Redirect. ' + error.message);
                        break;
                    default:
                        this.warn(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Redirection Error. ' + error.message);
                }
        }
        else if (httpError.toString()[0] === '4') {
            if (this.canLog(LOGGINGLEVEL.ERROR) && this.showMessages === true)
                switch (httpError) {
                    case 400:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Bad Request. ' + error.message, error, throwError);
                        break;
                    case 401:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unauthorized. ' + error.message, error, throwError);
                        break;
                    case 402:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Payment Required. ' + error.message, error, throwError);
                        break;
                    case 403:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Forbidden. ' + error.message, error, throwError);
                        break;
                    case 404:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Not Found. ' + error.message, error, throwError);
                        break;
                    case 405:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Method Not Allowed. ' + error.message, error, throwError);
                        break;
                    case 406:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Not Acceptable. ' + error.message, error, throwError);
                        break;
                    case 407:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Proxy Authentication Required. ' + error.message, error, throwError);
                        break;
                    case 408:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Request Timeout. ' + error.message, error, throwError);
                        break;
                    case 409:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Conflict. ' + error.message, error, throwError);
                        break;
                    case 410:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Gone. ' + error.message, error, throwError);
                        break;
                    case 411:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Length Required. ' + error.message, error, throwError);
                        break;
                    case 412:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Precondition Failed. ' + error.message, error, throwError);
                        break;
                    case 413:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Payload Too Large. ' + error.message, error, throwError);
                        break;
                    case 414:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': URI Too Long. ' + error.message, error, throwError);
                        break;
                    case 415:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unsupported Media Type. ' + error.message, error, throwError);
                        break;
                    case 416:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Range Not Satisfiable. ' + error.message, error, throwError);
                        break;
                    case 417:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Expectation Failed. ' + error.message, error, throwError);
                        break;
                    case 421:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Misdirected Request. ' + error.message, error, throwError);
                        break;
                    case 422:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unprocessable Entity. ' + error.message, error, throwError);
                        break;
                    case 423:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Locked. ' + error.message, error, throwError);
                        break;
                    case 424:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Failed Dependency. ' + error.message, error, throwError);
                        break;
                    case 425:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Too Early. ' + error.message, error, throwError);
                        break;
                    case 426:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Upgrade Required. ' + error.message, error, throwError);
                        break;
                    case 428:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Precondition Required. ' + error.message, error, throwError);
                        break;
                    case 429:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Too Many Requests. ' + error.message, error, throwError);
                        break;
                    case 431:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Request Header Fields Too Large. ' + error.message, error, throwError);
                        break;
                    case 451:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unavailable For Legal Reasons. ' + error.message, error, throwError);
                        break;
                    case 418:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': I\'m a teapot. ' + error.message, error, throwError);
                        break;
                    case 420:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Policy Not Fulfilled. ' + error.message, error, throwError);
                        break;
                    case 444:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': No Response. ' + error.message, error, throwError);
                        break;
                    case 449:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': The request should be retried after doing the appropriate action. ' + error.message, error, throwError);
                        break;
                    case 499:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Client Closed Request. ' + error.message, error, throwError);
                        break;
                    default:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Client Error. ' + error.message, error, throwError);
                }
        }
        else if (httpError.toString()[0] === '5') {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                switch (httpError) {
                    case 500:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Internal Server Error. ' + error.message, error, throwError);
                        break;
                    case 501:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Not Implemented. ' + error.message, error, throwError);
                        break;
                    case 502:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Bad Gateway. ' + error.message, error, throwError);
                        break;
                    case 503:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Service Unavailable. ' + error.message, error, throwError);
                        break;
                    case 504:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Gateway Timeout. ' + error.message, error, throwError);
                        break;
                    case 505:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': HTTP Version Not Supported. ' + error.message, error, throwError);
                        break;
                    case 506:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Variant Also Negotiates. ' + error.message, error, throwError);
                        break;
                    case 507:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Insufficient Storage. ' + error.message, error, throwError);
                        break;
                    case 508:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Loop Detected. ' + error.message, error, throwError);
                        break;
                    case 510:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Not Extended. ' + error.message, error, throwError);
                        break;
                    case 511:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Network Authentication Required. ' + error.message, error, throwError);
                        break;
                    default:
                        this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Server Error. ' + error.message, error, throwError);
                }
        }
        else {
            if (this.canLog(LOGGINGLEVEL.INFO) && this.showMessages === true)
                this.error(msg + '\n' + 'Http-Code ' + httpError + ': Unknown Error Code. ' + error.message, error, throwError);
        }
    }
    messageConstruction(msg) {
        return new Date().toISOString() + ': ' + msg;
    }
    addUpdateCB(value) {
        this._updateCBs.push(value);
    }
};
Logger = __decorate([
    tsyringe_1.singleton(),
    __metadata("design:paramtypes", [])
], Logger);
exports.Logger = Logger;
//# sourceMappingURL=Logger.js.map