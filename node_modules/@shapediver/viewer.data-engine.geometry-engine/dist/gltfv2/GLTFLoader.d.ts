import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types';
export declare enum GLTF_EXTENSIONS {
    KHR_BINARY_GLTF = "KHR_binary_glTF",
    KHR_MATERIALS_PBRSPECULARGLOSSINESS = "KHR_materials_pbrSpecularGlossiness",
    KHR_MATERIALS_UNLIT = "KHR_materials_unlit"
}
export declare class GLTFLoader {
    private readonly BINARY_EXTENSION_HEADER_LENGTH;
    private readonly _httpClient;
    private readonly _imageLoader;
    private readonly _uuidGenerator;
    private readonly _logger;
    private readonly _globalTransformation;
    private readonly _converter;
    private readonly _performanceEvaluator;
    private _baseUri;
    private _body;
    private _content;
    private _loaded;
    private _nodes;
    load(content: IGLTF_v2, gltfBinary?: ArrayBuffer, gltfHeader?: {
        magic: string;
        version: number;
        length: number;
        contentLength: number;
        contentFormat: number;
    }, baseUri?: string): Promise<TreeNode>;
    loadWithUrl(url?: string | undefined): Promise<TreeNode>;
    private loadAccessor;
    private loadBuffer;
    private loadBufferView;
    private loadMap;
    private loadMaterial;
    private loadMesh;
    private loadNode;
    private loadPrimitive;
    private validateVersionAndExtensions;
    private loadScene;
    private loadAnimation;
}
//# sourceMappingURL=GLTFLoader.d.ts.map