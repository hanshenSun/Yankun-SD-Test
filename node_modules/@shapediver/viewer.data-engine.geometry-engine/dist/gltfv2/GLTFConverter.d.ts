import { TreeNode } from '@shapediver/viewer.shared.node-tree';
import { IGLTF_v2 } from '@shapediver/viewer.data-engine.shared-types';
export declare enum GLTF_EXTENSIONS {
    KHR_BINARY_GLTF = "KHR_binary_glTF",
    KHR_MATERIALS_PBRSPECULARGLOSSINESS = "KHR_materials_pbrSpecularGlossiness",
    KHR_MATERIALS_UNLIT = "KHR_materials_unlit"
}
export declare class GLTFConverter {
    private readonly BINARY_EXTENSION_HEADER_LENGTH;
    private readonly _converter;
    private readonly _globalTransformation;
    private readonly _globalTransformationInverse;
    private readonly _httpClient;
    private readonly _imageLoader;
    private readonly _logger;
    private readonly _uuidGenerator;
    private _baseUri;
    private _body;
    private _buffers;
    private _byteOffset;
    private _content;
    private _extensionsRequired;
    private _extensionsUsed;
    private _imageCache;
    private _loaded;
    private _promises;
    convert(node: TreeNode): Promise<IGLTF_v2 | string | ArrayBuffer | null>;
    private convertAccessor;
    private convertBuffer;
    private convertBufferView;
    private convertBufferViewImage;
    private convertImage;
    private convertMaterial;
    private convertMesh;
    private convertNode;
    private convertPrimitive;
    private convertTexture;
    private getComponentType;
    private getMinMax;
    private getPaddedArrayBuffer;
    private getType;
    private stringToArrayBuffer;
}
//# sourceMappingURL=GLTFConverter.d.ts.map