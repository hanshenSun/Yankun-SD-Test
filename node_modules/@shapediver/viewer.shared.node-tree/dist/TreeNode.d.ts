import { mat4 } from 'gl-matrix';
import { Box } from '@shapediver/viewer.shared.math';
import { ITreeNodeData } from './interfaces/ITreeNodeData';
export interface ITransformation {
    id: string;
    matrix: mat4;
}
export declare class TreeNode {
    #private;
    constructor(name?: string, parent?: TreeNode | null, data?: ITreeNodeData[], transformations?: ITransformation[]);
    get boundingBox(): Box;
    set boundingBox(value: Box);
    get children(): TreeNode[];
    get data(): ITreeNodeData[];
    get excludeViewers(): string[];
    set excludeViewers(value: string[]);
    get id(): string;
    set id(value: string);
    get name(): string;
    get nodeMatrix(): mat4;
    get nodeMatrixSDTF(): mat4;
    get parent(): TreeNode | null;
    set parent(value: TreeNode | null);
    get transformations(): ITransformation[];
    set transformations(value: ITransformation[]);
    get version(): string;
    get visible(): boolean;
    set visible(value: boolean);
    get worldMatrix(): mat4;
    addChild(child: TreeNode): boolean;
    clone(): TreeNode;
    cloneInstance(): TreeNode;
    getChild(id: string): TreeNode | null;
    getPath(): string;
    hasChild(child: TreeNode): boolean;
    removeChild(child: TreeNode): boolean;
    updateVersion(): void;
    updateVersionAtomic(): void;
}
//# sourceMappingURL=TreeNode.d.ts.map